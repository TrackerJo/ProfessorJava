"use strict";
(function(root, module) {
    if (typeof define === 'function' && define.amd) {
        define(['exports'], function(exports)  {
            module(root, exports);
        });
    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
        module(global, exports);
    } else {
        module(root, root);
    }
}(typeof self !== 'undefined' ? self : this, function($rt_globals, $rt_exports) {
    var $rt_seed = 2463534242;
    function $rt_nextId() {
        var x = $rt_seed;
        x ^= x << 13;
        x ^= x >> 17;
        x ^= x << 5;
        $rt_seed = x;
        return x;
    }
    function $rt_compare(a, b) {
        return a > b ? 1 : a < b ?  -1 : a === b ? 0 : 1;
    }
    function $rt_isInstance(obj, cls) {
        return obj instanceof $rt_objcls() && !!obj.constructor.$meta && $rt_isAssignable(obj.constructor, cls);
    }
    function $rt_isAssignable(from, to) {
        if (from === to) {
            return true;
        }
        if (to.$meta.item !== null) {
            return from.$meta.item !== null && $rt_isAssignable(from.$meta.item, to.$meta.item);
        }
        var supertypes = from.$meta.supertypes;
        for (var i = 0;i < supertypes.length;i = i + 1 | 0) {
            if ($rt_isAssignable(supertypes[i], to)) {
                return true;
            }
        }
        return false;
    }
    function $rt_castToInterface(obj, cls) {
        if (obj !== null && !$rt_isInstance(obj, cls)) {
            $rt_throwCCE();
        }
        return obj;
    }
    function $rt_castToClass(obj, cls) {
        if (obj !== null && !(obj instanceof cls)) {
            $rt_throwCCE();
        }
        return obj;
    }
    $rt_globals.Array.prototype.fill = $rt_globals.Array.prototype.fill || function(value, start, end) {
        var len = this.length;
        if (!len) return this;
        start = start | 0;
        var i = start < 0 ? $rt_globals.Math.max(len + start, 0) : $rt_globals.Math.min(start, len);
        end = end === $rt_globals.undefined ? len : end | 0;
        end = end < 0 ? $rt_globals.Math.max(len + end, 0) : $rt_globals.Math.min(end, len);
        for (;i < end;i++) {
            this[i] = value;
        }
        return this;
    };
    function $rt_createArray(cls, sz) {
        var data = new $rt_globals.Array(sz);
        data.fill(null);
        return new $rt_array(cls, data);
    }
    function $rt_createArrayFromData(cls, init) {
        return $rt_wrapArray(cls, init);
    }
    function $rt_wrapArray(cls, data) {
        return new $rt_array(cls, data);
    }
    function $rt_createUnfilledArray(cls, sz) {
        return new $rt_array(cls, new $rt_globals.Array(sz));
    }
    function $rt_createNumericArray(cls, nativeArray) {
        return new $rt_array(cls, nativeArray);
    }
    var $rt_createLongArray;
    var $rt_createLongArrayFromData;
    if (typeof $rt_globals.BigInt64Array !== 'function') {
        $rt_createLongArray = function(sz) {
            var data = new $rt_globals.Array(sz);
            var arr = new $rt_array($rt_longcls(), data);
            data.fill(Long_ZERO);
            return arr;
        };
        $rt_createLongArrayFromData = function(init) {
            return new $rt_array($rt_longcls(), init);
        };
    } else {
        $rt_createLongArray = function(sz) {
            return $rt_createNumericArray($rt_longcls(), new $rt_globals.BigInt64Array(sz));
        };
        $rt_createLongArrayFromData = function(data) {
            var buffer = new $rt_globals.BigInt64Array(data.length);
            buffer.set(data);
            return $rt_createNumericArray($rt_longcls(), buffer);
        };
    }
    function $rt_createCharArray(sz) {
        return $rt_createNumericArray($rt_charcls(), new $rt_globals.Uint16Array(sz));
    }
    function $rt_createCharArrayFromData(data) {
        var buffer = new $rt_globals.Uint16Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_charcls(), buffer);
    }
    function $rt_createByteArray(sz) {
        return $rt_createNumericArray($rt_bytecls(), new $rt_globals.Int8Array(sz));
    }
    function $rt_createByteArrayFromData(data) {
        var buffer = new $rt_globals.Int8Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_bytecls(), buffer);
    }
    function $rt_createShortArray(sz) {
        return $rt_createNumericArray($rt_shortcls(), new $rt_globals.Int16Array(sz));
    }
    function $rt_createShortArrayFromData(data) {
        var buffer = new $rt_globals.Int16Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_shortcls(), buffer);
    }
    function $rt_createIntArray(sz) {
        return $rt_createNumericArray($rt_intcls(), new $rt_globals.Int32Array(sz));
    }
    function $rt_createIntArrayFromData(data) {
        var buffer = new $rt_globals.Int32Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_intcls(), buffer);
    }
    function $rt_createBooleanArray(sz) {
        return $rt_createNumericArray($rt_booleancls(), new $rt_globals.Int8Array(sz));
    }
    function $rt_createBooleanArrayFromData(data) {
        var buffer = new $rt_globals.Int8Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_booleancls(), buffer);
    }
    function $rt_createFloatArray(sz) {
        return $rt_createNumericArray($rt_floatcls(), new $rt_globals.Float32Array(sz));
    }
    function $rt_createFloatArrayFromData(data) {
        var buffer = new $rt_globals.Float32Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_floatcls(), buffer);
    }
    function $rt_createDoubleArray(sz) {
        return $rt_createNumericArray($rt_doublecls(), new $rt_globals.Float64Array(sz));
    }
    function $rt_createDoubleArrayFromData(data) {
        var buffer = new $rt_globals.Float64Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_doublecls(), buffer);
    }
    function $rt_arraycls(cls) {
        var result = cls.$array;
        if (result === null) {
            var arraycls = {  };
            var name = "[" + cls.$meta.binaryName;
            arraycls.$meta = { item : cls, supertypes : [$rt_objcls()], primitive : false, superclass : $rt_objcls(), name : name, binaryName : name, enum : false, simpleName : null, declaringClass : null, enclosingClass : null };
            arraycls.classObject = null;
            arraycls.$array = null;
            result = arraycls;
            cls.$array = arraycls;
        }
        return result;
    }
    function $rt_createcls() {
        return { $array : null, classObject : null, $meta : { supertypes : [], superclass : null } };
    }
    function $rt_createPrimitiveCls(name, binaryName) {
        var cls = $rt_createcls();
        cls.$meta.primitive = true;
        cls.$meta.name = name;
        cls.$meta.binaryName = binaryName;
        cls.$meta.enum = false;
        cls.$meta.item = null;
        cls.$meta.simpleName = null;
        cls.$meta.declaringClass = null;
        cls.$meta.enclosingClass = null;
        return cls;
    }
    var $rt_booleanclsCache = null;
    function $rt_booleancls() {
        if ($rt_booleanclsCache === null) {
            $rt_booleanclsCache = $rt_createPrimitiveCls("boolean", "Z");
        }
        return $rt_booleanclsCache;
    }
    var $rt_charclsCache = null;
    function $rt_charcls() {
        if ($rt_charclsCache === null) {
            $rt_charclsCache = $rt_createPrimitiveCls("char", "C");
        }
        return $rt_charclsCache;
    }
    var $rt_byteclsCache = null;
    function $rt_bytecls() {
        if ($rt_byteclsCache === null) {
            $rt_byteclsCache = $rt_createPrimitiveCls("byte", "B");
        }
        return $rt_byteclsCache;
    }
    var $rt_shortclsCache = null;
    function $rt_shortcls() {
        if ($rt_shortclsCache === null) {
            $rt_shortclsCache = $rt_createPrimitiveCls("short", "S");
        }
        return $rt_shortclsCache;
    }
    var $rt_intclsCache = null;
    function $rt_intcls() {
        if ($rt_intclsCache === null) {
            $rt_intclsCache = $rt_createPrimitiveCls("int", "I");
        }
        return $rt_intclsCache;
    }
    var $rt_longclsCache = null;
    function $rt_longcls() {
        if ($rt_longclsCache === null) {
            $rt_longclsCache = $rt_createPrimitiveCls("long", "J");
        }
        return $rt_longclsCache;
    }
    var $rt_floatclsCache = null;
    function $rt_floatcls() {
        if ($rt_floatclsCache === null) {
            $rt_floatclsCache = $rt_createPrimitiveCls("float", "F");
        }
        return $rt_floatclsCache;
    }
    var $rt_doubleclsCache = null;
    function $rt_doublecls() {
        if ($rt_doubleclsCache === null) {
            $rt_doubleclsCache = $rt_createPrimitiveCls("double", "D");
        }
        return $rt_doubleclsCache;
    }
    var $rt_voidclsCache = null;
    function $rt_voidcls() {
        if ($rt_voidclsCache === null) {
            $rt_voidclsCache = $rt_createPrimitiveCls("void", "V");
        }
        return $rt_voidclsCache;
    }
    function $rt_throw(ex) {
        throw $rt_exception(ex);
    }
    var $rt_javaExceptionProp = $rt_globals.Symbol("javaException");
    function $rt_exception(ex) {
        var err = ex.$jsException;
        if (!err) {
            var javaCause = $rt_throwableCause(ex);
            var jsCause = javaCause !== null ? javaCause.$jsException : $rt_globals.undefined;
            var cause = typeof jsCause === "object" ? { cause : jsCause } : $rt_globals.undefined;
            err = new JavaError("Java exception thrown", cause);
            if (typeof $rt_globals.Error.captureStackTrace === "function") {
                $rt_globals.Error.captureStackTrace(err);
            }
            err[$rt_javaExceptionProp] = ex;
            ex.$jsException = err;
            $rt_fillStack(err, ex);
        }
        return err;
    }
    function $rt_fillStack(err, ex) {
        if (typeof $rt_decodeStack === "function" && err.stack) {
            var stack = $rt_decodeStack(err.stack);
            var javaStack = $rt_createArray($rt_stecls(), stack.length);
            var elem;
            var noStack = false;
            for (var i = 0;i < stack.length;++i) {
                var element = stack[i];
                elem = $rt_createStackElement($rt_str(element.className), $rt_str(element.methodName), $rt_str(element.fileName), element.lineNumber);
                if (elem == null) {
                    noStack = true;
                    break;
                }
                javaStack.data[i] = elem;
            }
            if (!noStack) {
                $rt_setStack(ex, javaStack);
            }
        }
    }
    function $rt_createMultiArray(cls, dimensions) {
        var first = 0;
        for (var i = dimensions.length - 1;i >= 0;i = i - 1 | 0) {
            if (dimensions[i] === 0) {
                first = i;
                break;
            }
        }
        if (first > 0) {
            for (i = 0;i < first;i = i + 1 | 0) {
                cls = $rt_arraycls(cls);
            }
            if (first === dimensions.length - 1) {
                return $rt_createArray(cls, dimensions[first]);
            }
        }
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, first));
        var firstDim = dimensions[first] | 0;
        for (i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createArray(cls, firstDim);
        }
        return $rt_createMultiArrayImpl(cls, arrays, dimensions, first);
    }
    function $rt_createByteMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_bytecls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createByteArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_bytecls(), arrays, dimensions);
    }
    function $rt_createCharMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_charcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createCharArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_charcls(), arrays, dimensions, 0);
    }
    function $rt_createBooleanMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_booleancls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createBooleanArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_booleancls(), arrays, dimensions, 0);
    }
    function $rt_createShortMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_shortcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createShortArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_shortcls(), arrays, dimensions, 0);
    }
    function $rt_createIntMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_intcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createIntArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_intcls(), arrays, dimensions, 0);
    }
    function $rt_createLongMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_longcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createLongArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_longcls(), arrays, dimensions, 0);
    }
    function $rt_createFloatMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_floatcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createFloatArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_floatcls(), arrays, dimensions, 0);
    }
    function $rt_createDoubleMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_doublecls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createDoubleArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_doublecls(), arrays, dimensions, 0);
    }
    function $rt_primitiveArrayCount(dimensions, start) {
        var val = dimensions[start + 1] | 0;
        for (var i = start + 2;i < dimensions.length;i = i + 1 | 0) {
            val = val * (dimensions[i] | 0) | 0;
            if (val === 0) {
                break;
            }
        }
        return val;
    }
    function $rt_createMultiArrayImpl(cls, arrays, dimensions, start) {
        var limit = arrays.length;
        for (var i = start + 1 | 0;i < dimensions.length;i = i + 1 | 0) {
            cls = $rt_arraycls(cls);
            var dim = dimensions[i];
            var index = 0;
            var packedIndex = 0;
            while (index < limit) {
                var arr = $rt_createUnfilledArray(cls, dim);
                for (var j = 0;j < dim;j = j + 1 | 0) {
                    arr.data[j] = arrays[index];
                    index = index + 1 | 0;
                }
                arrays[packedIndex] = arr;
                packedIndex = packedIndex + 1 | 0;
            }
            limit = packedIndex;
        }
        return arrays[0];
    }
    function $rt_assertNotNaN(value) {
        if (typeof value === 'number' && $rt_globals.isNaN(value)) {
            throw "NaN";
        }
        return value;
    }
    function $rt_createOutputFunction(printFunction) {
        var buffer = "";
        var utf8Buffer = 0;
        var utf8Remaining = 0;
        function putCodePoint(ch) {
            if (ch === 0xA) {
                printFunction(buffer);
                buffer = "";
            } else if (ch < 0x10000) {
                buffer += $rt_globals.String.fromCharCode(ch);
            } else {
                ch = ch - 0x10000 | 0;
                var hi = (ch >> 10) + 0xD800;
                var lo = (ch & 0x3FF) + 0xDC00;
                buffer += $rt_globals.String.fromCharCode(hi, lo);
            }
        }
        return function(ch) {
            if ((ch & 0x80) === 0) {
                putCodePoint(ch);
            } else if ((ch & 0xC0) === 0x80) {
                if (utf8Buffer > 0) {
                    utf8Remaining <<= 6;
                    utf8Remaining |= ch & 0x3F;
                    if ( --utf8Buffer === 0) {
                        putCodePoint(utf8Remaining);
                    }
                }
            } else if ((ch & 0xE0) === 0xC0) {
                utf8Remaining = ch & 0x1F;
                utf8Buffer = 1;
            } else if ((ch & 0xF0) === 0xE0) {
                utf8Remaining = ch & 0x0F;
                utf8Buffer = 2;
            } else if ((ch & 0xF8) === 0xF0) {
                utf8Remaining = ch & 0x07;
                utf8Buffer = 3;
            }
        };
    }
    var $rt_putStdout = typeof $rt_putStdoutCustom === "function" ? $rt_putStdoutCustom : typeof $rt_globals.console === "object" ? $rt_createOutputFunction(function(msg) {
        $rt_globals.console.info(msg);
    }) : function() {
    };
    var $rt_putStderr = typeof $rt_putStderrCustom === "function" ? $rt_putStderrCustom : typeof $rt_globals.console === "object" ? $rt_createOutputFunction(function(msg) {
        $rt_globals.console.error(msg);
    }) : function() {
    };
    var $rt_packageData = null;
    function $rt_packages(data) {
        var i = 0;
        var packages = new $rt_globals.Array(data.length);
        for (var j = 0;j < data.length;++j) {
            var prefixIndex = data[i++];
            var prefix = prefixIndex >= 0 ? packages[prefixIndex] : "";
            packages[j] = prefix + data[i++] + ".";
        }
        $rt_packageData = packages;
    }
    function $rt_metadata(data) {
        var packages = $rt_packageData;
        var i = 0;
        while (i < data.length) {
            var cls = data[i++];
            cls.$meta = {  };
            var m = cls.$meta;
            var className = data[i++];
            m.name = className !== 0 ? className : null;
            if (m.name !== null) {
                var packageIndex = data[i++];
                if (packageIndex >= 0) {
                    m.name = packages[packageIndex] + m.name;
                }
            }
            m.binaryName = "L" + m.name + ";";
            var superclass = data[i++];
            m.superclass = superclass !== 0 ? superclass : null;
            m.supertypes = data[i++];
            if (m.superclass) {
                m.supertypes.push(m.superclass);
                cls.prototype = $rt_globals.Object.create(m.superclass.prototype);
            } else {
                cls.prototype = {  };
            }
            var flags = data[i++];
            m.enum = (flags & 8) !== 0;
            m.flags = flags;
            m.primitive = false;
            m.item = null;
            cls.prototype.constructor = cls;
            cls.classObject = null;
            m.accessLevel = data[i++];
            var innerClassInfo = data[i++];
            if (innerClassInfo === 0) {
                m.simpleName = null;
                m.declaringClass = null;
                m.enclosingClass = null;
            } else {
                var enclosingClass = innerClassInfo[0];
                m.enclosingClass = enclosingClass !== 0 ? enclosingClass : null;
                var declaringClass = innerClassInfo[1];
                m.declaringClass = declaringClass !== 0 ? declaringClass : null;
                var simpleName = innerClassInfo[2];
                m.simpleName = simpleName !== 0 ? simpleName : null;
            }
            var clinit = data[i++];
            cls.$clinit = clinit !== 0 ? clinit : function() {
            };
            var virtualMethods = data[i++];
            if (virtualMethods !== 0) {
                for (var j = 0;j < virtualMethods.length;j += 2) {
                    var name = virtualMethods[j];
                    var func = virtualMethods[j + 1];
                    if (typeof name === 'string') {
                        name = [name];
                    }
                    for (var k = 0;k < name.length;++k) {
                        cls.prototype[name[k]] = func;
                    }
                }
            }
            cls.$array = null;
        }
    }
    function $rt_wrapFunction0(f) {
        return function() {
            return f(this);
        };
    }
    function $rt_wrapFunction1(f) {
        return function(p1) {
            return f(this, p1);
        };
    }
    function $rt_wrapFunction2(f) {
        return function(p1, p2) {
            return f(this, p1, p2);
        };
    }
    function $rt_wrapFunction3(f) {
        return function(p1, p2, p3) {
            return f(this, p1, p2, p3, p3);
        };
    }
    function $rt_wrapFunction4(f) {
        return function(p1, p2, p3, p4) {
            return f(this, p1, p2, p3, p4);
        };
    }
    function $rt_threadStarter(f) {
        return function() {
            var args = $rt_globals.Array.prototype.slice.apply(arguments);
            $rt_startThread(function() {
                f.apply(this, args);
            });
        };
    }
    function $rt_mainStarter(f) {
        return function(args, callback) {
            if (!args) {
                args = [];
            }
            var javaArgs = $rt_createArray($rt_objcls(), args.length);
            for (var i = 0;i < args.length;++i) {
                javaArgs.data[i] = $rt_str(args[i]);
            }
            $rt_startThread(function() {
                f.call(null, javaArgs);
            }, callback);
        };
    }
    var $rt_stringPool_instance;
    function $rt_stringPool(strings) {
        $rt_stringPool_instance = new $rt_globals.Array(strings.length);
        for (var i = 0;i < strings.length;++i) {
            $rt_stringPool_instance[i] = $rt_intern($rt_str(strings[i]));
        }
    }
    function $rt_s(index) {
        return $rt_stringPool_instance[index];
    }
    function $rt_eraseClinit(target) {
        return target.$clinit = function() {
        };
    }
    var $rt_numberConversionView = new $rt_globals.DataView(new $rt_globals.ArrayBuffer(8));
    var $rt_doubleToRawLongBits;
    var $rt_longBitsToDouble;
    if (typeof $rt_globals.BigInt !== 'function') {
        $rt_doubleToRawLongBits = function(n) {
            $rt_numberConversionView.setFloat64(0, n, true);
            return new Long($rt_numberConversionView.getInt32(0, true), $rt_numberConversionView.getInt32(4, true));
        };
        $rt_longBitsToDouble = function(n) {
            $rt_numberConversionView.setInt32(0, n.lo, true);
            $rt_numberConversionView.setInt32(4, n.hi, true);
            return $rt_numberConversionView.getFloat64(0, true);
        };
    } else {
        $rt_doubleToRawLongBits = function(n) {
            $rt_numberConversionView.setFloat64(0, n, true);
            var lo = $rt_numberConversionView.getInt32(0, true);
            var hi = $rt_numberConversionView.getInt32(4, true);
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(32, $rt_globals.BigInt(lo)) | $rt_globals.BigInt(hi) << $rt_globals.BigInt(32));
        };
        $rt_longBitsToDouble = function(n) {
            var hi = $rt_globals.Number($rt_globals.BigInt.asIntN(32, n >> $rt_globals.BigInt(32)));
            var lo = $rt_globals.Number($rt_globals.BigInt.asIntN(32, n & $rt_globals.BigInt(0xFFFFFFFF)));
            $rt_numberConversionView.setInt32(0, lo, true);
            $rt_numberConversionView.setInt32(4, hi, true);
            return $rt_numberConversionView.getFloat64(0, true);
        };
    }
    function $rt_floatToRawIntBits(n) {
        $rt_numberConversionView.setFloat32(0, n);
        return $rt_numberConversionView.getInt32(0);
    }
    function $rt_intBitsToFloat(n) {
        $rt_numberConversionView.setInt32(0, n);
        return $rt_numberConversionView.getFloat32(0);
    }
    var JavaError;
    if (typeof $rt_globals.Reflect === 'object') {
        var defaultMessage = $rt_globals.Symbol("defaultMessage");
        JavaError = function JavaError(message, cause) {
            var self = $rt_globals.Reflect.construct($rt_globals.Error, [$rt_globals.undefined, cause], JavaError);
            $rt_globals.Object.setPrototypeOf(self, JavaError.prototype);
            self[defaultMessage] = message;
            return self;
        };
        JavaError.prototype = $rt_globals.Object.create($rt_globals.Error.prototype, { constructor : { configurable : true, writable : true, value : JavaError }, message : { get : function() {
            try {
                var javaException = this[$rt_javaExceptionProp];
                if (typeof javaException === 'object') {
                    var javaMessage = $rt_throwableMessage(javaException);
                    if (typeof javaMessage === "object") {
                        return javaMessage !== null ? javaMessage.toString() : null;
                    }
                }
                return this[defaultMessage];
            } catch (e){
                return "Exception occurred trying to extract Java exception message: " + e;
            }
        } } });
    } else {
        JavaError = $rt_globals.Error;
    }
    function $rt_javaException(e) {
        return e instanceof $rt_globals.Error && typeof e[$rt_javaExceptionProp] === 'object' ? e[$rt_javaExceptionProp] : null;
    }
    function $rt_jsException(e) {
        return typeof e.$jsException === 'object' ? e.$jsException : null;
    }
    function $rt_wrapException(err) {
        var ex = err[$rt_javaExceptionProp];
        if (!ex) {
            ex = $rt_createException($rt_str("(JavaScript) " + err.toString()));
            err[$rt_javaExceptionProp] = ex;
            ex.$jsException = err;
            $rt_fillStack(err, ex);
        }
        return ex;
    }
    function $dbg_class(obj) {
        var cls = obj.constructor;
        var arrayDegree = 0;
        while (cls.$meta && cls.$meta.item) {
            ++arrayDegree;
            cls = cls.$meta.item;
        }
        var clsName = "";
        if (cls === $rt_booleancls()) {
            clsName = "boolean";
        } else if (cls === $rt_bytecls()) {
            clsName = "byte";
        } else if (cls === $rt_shortcls()) {
            clsName = "short";
        } else if (cls === $rt_charcls()) {
            clsName = "char";
        } else if (cls === $rt_intcls()) {
            clsName = "int";
        } else if (cls === $rt_longcls()) {
            clsName = "long";
        } else if (cls === $rt_floatcls()) {
            clsName = "float";
        } else if (cls === $rt_doublecls()) {
            clsName = "double";
        } else {
            clsName = cls.$meta ? cls.$meta.name || "a/" + cls.name : "@" + cls.name;
        }
        while (arrayDegree-- > 0) {
            clsName += "[]";
        }
        return clsName;
    }
    function Long(lo, hi) {
        this.lo = lo | 0;
        this.hi = hi | 0;
    }
    Long.prototype.__teavm_class__ = function() {
        return "long";
    };
    function Long_isPositive(a) {
        return (a.hi & 0x80000000) === 0;
    }
    function Long_isNegative(a) {
        return (a.hi & 0x80000000) !== 0;
    }
    var Long_MAX_NORMAL = 1 << 18;
    var Long_ZERO;
    var Long_create;
    var Long_fromInt;
    var Long_fromNumber;
    var Long_toNumber;
    var Long_hi;
    var Long_lo;
    if (typeof $rt_globals.BigInt !== "function") {
        Long.prototype.toString = function() {
            var result = [];
            var n = this;
            var positive = Long_isPositive(n);
            if (!positive) {
                n = Long_neg(n);
            }
            var radix = new Long(10, 0);
            do  {
                var divRem = Long_divRem(n, radix);
                result.push($rt_globals.String.fromCharCode(48 + divRem[1].lo));
                n = divRem[0];
            }while (n.lo !== 0 || n.hi !== 0);
            result = (result.reverse()).join('');
            return positive ? result : "-" + result;
        };
        Long.prototype.valueOf = function() {
            return Long_toNumber(this);
        };
        Long_ZERO = new Long(0, 0);
        Long_fromInt = function(val) {
            return new Long(val,  -(val < 0) | 0);
        };
        Long_fromNumber = function(val) {
            if (val >= 0) {
                return new Long(val | 0, val / 0x100000000 | 0);
            } else {
                return Long_neg(new Long( -val | 0,  -val / 0x100000000 | 0));
            }
        };
        Long_create = function(lo, hi) {
            return new Long(lo, hi);
        };
        Long_toNumber = function(val) {
            return 0x100000000 * val.hi + (val.lo >>> 0);
        };
        Long_hi = function(val) {
            return val.hi;
        };
        Long_lo = function(val) {
            return val.lo;
        };
    } else {
        Long_ZERO = $rt_globals.BigInt(0);
        Long_create = function(lo, hi) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, $rt_globals.BigInt(lo)) | $rt_globals.BigInt.asUintN(64, $rt_globals.BigInt(hi) << $rt_globals.BigInt(32)));
        };
        Long_fromInt = function(val) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt(val | 0));
        };
        Long_fromNumber = function(val) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt(val >= 0 ? $rt_globals.Math.floor(val) : $rt_globals.Math.ceil(val)));
        };
        Long_toNumber = function(val) {
            return $rt_globals.Number(val);
        };
        Long_hi = function(val) {
            return $rt_globals.Number($rt_globals.BigInt.asIntN(64, val >> $rt_globals.BigInt(32))) | 0;
        };
        Long_lo = function(val) {
            return $rt_globals.Number($rt_globals.BigInt.asIntN(32, val)) | 0;
        };
    }
    var $rt_imul = $rt_globals.Math.imul || function(a, b) {
        var ah = a >>> 16 & 0xFFFF;
        var al = a & 0xFFFF;
        var bh = b >>> 16 & 0xFFFF;
        var bl = b & 0xFFFF;
        return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
    var $rt_udiv = function(a, b) {
        return (a >>> 0) / (b >>> 0) >>> 0;
    };
    var $rt_umod = function(a, b) {
        return (a >>> 0) % (b >>> 0) >>> 0;
    };
    var $rt_ucmp = function(a, b) {
        a >>>= 0;
        b >>>= 0;
        return a < b ?  -1 : a > b ? 1 : 0;
    };
    function $rt_checkBounds(index, array) {
        if (index < 0 || index >= array.length) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_checkUpperBound(index, array) {
        if (index >= array.length) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_checkLowerBound(index) {
        if (index < 0) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_classWithoutFields(superclass) {
        if (superclass === 0) {
            return function() {
            };
        }
        if (superclass === void 0) {
            superclass = $rt_objcls();
        }
        return function() {
            superclass.call(this);
        };
    }
    function $rt_setCloneMethod(target, f) {
        target.$clone = f;
    }
    function $rt_cls(cls) {
        return jl_Class_getClass(cls);
    }
    function $rt_str(str) {
        if (str === null) {
            return null;
        }
        var characters = $rt_createCharArray(str.length);
        var charsBuffer = characters.data;
        for (var i = 0; i < str.length; i = (i + 1) | 0) {
            charsBuffer[i] = str.charCodeAt(i) & 0xFFFF;
        }
        return jl_String__init_(characters);
    }
    function $rt_ustr(str) {
        if (str === null) {
            return null;
        }
        var data = str.$characters.data;
        var result = "";
        for (var i = 0; i < data.length; i = (i + 1) | 0) {
            result += String.fromCharCode(data[i]);
        }
        return result;
    }
    function $rt_objcls() { return jl_Object; }
    function $rt_stecls() {
        return jl_Object;
    }
    function $rt_throwableMessage(t) {
        return jl_Throwable_getMessage(t);
    }
    function $rt_throwableCause(t) {
        return jl_Throwable_getCause(t);
    }
    function $rt_nullCheck(val) {
        if (val === null) {
            $rt_throw(jl_NullPointerException__init_());
        }
        return val;
    }
    function $rt_intern(str) {
        return str;
    }
    function $rt_getThread() {
        return jl_Thread_currentThread();
    }
    function $rt_setThread(t) {
        return jl_Thread_setCurrentThread(t);
    }
    function $rt_createException(message) {
        return jl_RuntimeException__init_(message);
    }
    function $rt_createStackElement(className, methodName, fileName, lineNumber) {
        return null;
    }
    function $rt_setStack(e, stack) {
    }
    function $rt_throwAIOOBE() {
    }
    function $rt_throwCCE() {
    }
    var $java = Object.create(null);
    function jl_Object() {
        this.$id$ = 0;
    }
    function jl_Object_getClass($this) {
        return jl_Class_getClass($this.constructor);
    }
    function jl_Object_equals($this, $other) {
        return $this !== $other ? 0 : 1;
    }
    function jl_Object_toString($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
        var$1 = jl_Object_getClass($this);
        if (var$1.$name === null)
            var$1.$name = $rt_str(var$1.$platformClass.$meta.name);
        var$1 = var$1.$name;
        var$2 = jl_Object_identity($this);
        if (!var$2)
            var$3 = $rt_s(0);
        else {
            var$4 = (((32 - jl_Integer_numberOfLeadingZeros(var$2) | 0) + 4 | 0) - 1 | 0) / 4 | 0;
            var$5 = $rt_createCharArray(var$4);
            var$6 = var$5.data;
            var$7 = (var$4 - 1 | 0) * 4 | 0;
            var$4 = 0;
            while (var$7 >= 0) {
                var$8 = var$4 + 1 | 0;
                var$6[var$4] = jl_Character_forDigit((var$2 >>> var$7 | 0) & 15, 16);
                var$7 = var$7 - 4 | 0;
                var$4 = var$8;
            }
            var$3 = jl_String__init_(var$5);
        }
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        var$1 = jl_StringBuilder_append(var$9, var$1);
        jl_AbstractStringBuilder_append(var$1, 64);
        jl_StringBuilder_append(var$1, var$3);
        return jl_AbstractStringBuilder_toString(var$9);
    }
    function jl_Object_identity($this) {
        var $platformThis, var$2;
        $platformThis = $this;
        if (!$platformThis.$id$) {
            var$2 = $rt_nextId();
            $platformThis.$id$ = var$2;
        }
        return $this.$id$;
    }
    function jl_Object_clone($this) {
        var $result, var$2, var$3;
        if (!$rt_isInstance($this, jl_Cloneable) && $this.constructor.$meta.item === null) {
            $result = new jl_CloneNotSupportedException;
            jl_Exception__init_($result);
            $rt_throw($result);
        }
        $result = otp_Platform_clone($this);
        var$2 = $result;
        var$3 = $rt_nextId();
        var$2.$id$ = var$3;
        return $result;
    }
    var t_Client = $rt_classWithoutFields();
    function t_Client_main($args) {
        var $body, $root, $code, $CodeArea, $projName, $result, var$8, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$8 = $thread.pop();$result = $thread.pop();$projName = $thread.pop();$CodeArea = $thread.pop();$code = $thread.pop();$root = $thread.pop();$body = $thread.pop();$args = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            jl_Integer__clinit_();
            jl_Character__clinit_();
            otcic_StdoutOutputStream__clinit_();
            jur_AbstractSet__clinit_();
            jl_Float__clinit_();
            jl_Boolean__clinit_();
            otcit_FloatSynthesizer__clinit_();
            otcit_FloatAnalyzer__clinit_();
            jnc_CoderResult__clinit_();
            jl_AbstractStringBuilder$Constants__clinit_();
            jl_Long__clinit_();
            $args = $args.data;
            t_Client_onLoad$js_body$_3();
            $body = $rt_globals.window.document.body;
            $root = $body.querySelector("#root");
            $code = $rt_str($body.querySelector(".Code").textContent);
            $CodeArea = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($CodeArea);
            jl_StringBuilder_append(jl_StringBuilder_append($CodeArea, $rt_s(1)), $code);
            $rt_globals.console.log($rt_ustr(jl_AbstractStringBuilder_toString($CodeArea)));
            $rt_globals.console.log($rt_ustr($args[0]));
            if (!jl_String_contains($rt_str($root.className), $rt_s(2))) {
                $projName = $rt_str($body.querySelector(".FileTile.selected").textContent);
                $rt_globals.console.log($rt_ustr((jl_String_split($projName, $rt_s(3))).data[0]));
                $CodeArea = (jl_String_split($projName, $rt_s(3))).data[0];
                $root = tj_Variables__init_();
                $code = tj_Parser_parse(tj_Parser__init_($code, $root));
                $projName = new tj_Translator;
                $projName.$lineNumber = 0;
                $projName.$tabCount = 2;
                $projName.$javaLines = ju_ArrayList__init_();
                $projName.$javaImports = ju_ArrayList__init_();
                $projName.$javaMain = ju_ArrayList__init_();
                $projName.$publicVarDeclarations = ju_ArrayList__init_();
                $projName.$usedJOptionPane = 0;
                $projName.$usedList = 0;
                $projName.$globalVariables = $root;
                $projName.$projName = $CodeArea;
                tj_Translator_interpretFunction($projName, $code.$body, null, null, $rt_s(4), 1, 1);
                $CodeArea = ju_ArrayList__init_();
                $root = ju_AbstractList_iterator($projName.$javaImports);
                while (ju_AbstractList$1_hasNext($root)) {
                    ju_ArrayList_add($CodeArea, ju_AbstractList$1_next($root));
                }
                $root = $projName.$projName;
                $result = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($result);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($result, $rt_s(5)), $root), $rt_s(6));
                ju_ArrayList_add($CodeArea, jl_AbstractStringBuilder_toString($result));
                $root = ju_AbstractList_iterator($projName.$publicVarDeclarations);
                while (ju_AbstractList$1_hasNext($root)) {
                    ju_ArrayList_add($CodeArea, ju_AbstractList$1_next($root));
                }
                ju_ArrayList_add($CodeArea, $rt_s(7));
                $root = ju_AbstractList_iterator($projName.$javaMain);
                while (ju_AbstractList$1_hasNext($root)) {
                    ju_ArrayList_add($CodeArea, ju_AbstractList$1_next($root));
                }
                ju_ArrayList_add($CodeArea, $rt_s(8));
                $root = ju_AbstractList_iterator($projName.$javaLines);
                while (ju_AbstractList$1_hasNext($root)) {
                    ju_ArrayList_add($CodeArea, ju_AbstractList$1_next($root));
                }
                ju_ArrayList_add($CodeArea, $rt_s(9));
                $result = $rt_s(10);
                $CodeArea = ju_AbstractList_iterator($CodeArea);
                while (ju_AbstractList$1_hasNext($CodeArea)) {
                    $root = ju_AbstractList$1_next($CodeArea);
                    $code = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($code);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($code, $result), $root), 10);
                    $result = jl_AbstractStringBuilder_toString($code);
                }
                $rt_globals.console.log($rt_ustr($result));
                $CodeArea = $body.querySelector(".ConvertedCode");
                $body = $rt_ustr($result);
                $CodeArea.textContent = $body;
                $rt_globals.finishRun();
                return;
            }
            $CodeArea = tj_Variables__init_();
            $body = tj_Parser_parse(tj_Parser__init_($code, $CodeArea));
            $root = new tj_Interpreter;
            $root.$lineNumber0 = 0;
            $root.$globalVariables0 = $CodeArea;
            $projName = $body.$body;
            $body = null;
            $code = null;
            $CodeArea = $rt_s(10);
            var$8 = 1;
            $ptr = 1;
        case 1:
            tj_Interpreter_interpretFunction($root, $projName, $body, $code, $CodeArea, var$8);
            if ($rt_suspending()) {
                break main;
            }
            $rt_globals.finishRun();
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($args, $body, $root, $code, $CodeArea, $projName, $result, var$8, $ptr);
    }
    function t_Client_onLoad$js_body$_3() {
        $rt_globals.document.addEventListener("DOMContentLoaded", function() {
            $rt_globals.console.log("DOM loaded");
        });
    }
    var jlr_AnnotatedElement = $rt_classWithoutFields(0);
    var jlr_Type = $rt_classWithoutFields(0);
    function jl_Class() {
        var a = this; jl_Object.call(a);
        a.$name = null;
        a.$platformClass = null;
    }
    function jl_Class_getClass($cls) {
        var $result, var$3;
        if ($cls === null)
            return null;
        $result = $cls.classObject;
        if ($result === null) {
            $result = new jl_Class;
            $result.$platformClass = $cls;
            var$3 = $result;
            $cls.classObject = var$3;
        }
        return $result;
    }
    function jl_Class_isPrimitive($this) {
        return $this.$platformClass.$meta.primitive ? 1 : 0;
    }
    function jl_Class_getComponentType($this) {
        return jl_Class_getClass($this.$platformClass.$meta.item);
    }
    var otji_JS = $rt_classWithoutFields();
    function otji_JS_wrap($array) {
        var var$2, $result, $i, var$5;
        if ($array === null)
            return null;
        $array = $array.data;
        var$2 = $array.length;
        $result = new $rt_globals.Array(var$2);
        $i = 0;
        while ($i < var$2) {
            var$5 = $rt_ustr($array[$i]);
            $result[$i] = otji_JSWrapper_javaToJs(var$5);
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function otji_JS_function(var$1, var$2) {
        var name = 'jso$functor$' + var$2;
        if (!var$1[name]) {
            var fn = function() {
                return var$1[var$2].apply(var$1, arguments);
            };
            var$1[name] = function() {
                return fn;
            };
        }
        return var$1[name]();
    }
    function otji_JS_functionAsObject(var$1, var$2) {
        if (typeof var$1 !== "function") return var$1;
        var result = {};
        result[var$2] = var$1;
        return result;
    }
    var otp_Platform = $rt_classWithoutFields();
    function otp_Platform_clone(var$1) {
        var copy = new var$1.constructor();
        for (var field in var$1) {
            if (!var$1.hasOwnProperty(field)) {
                continue;
            }
            copy[field] = var$1[field];
        }
        return copy;
    }
    function otp_Platform_isAssignable($from, $to) {
        var $supertypes, $i;
        if ($from === $to)
            return 1;
        $supertypes = $from.$meta.supertypes;
        $i = 0;
        while ($i < $supertypes.length) {
            if (otp_Platform_isAssignable($supertypes[$i], $to))
                return 1;
            $i = $i + 1 | 0;
        }
        return 0;
    }
    function otp_Platform_launchThread($runnable) {
        var var$2;
        if (!$runnable.$isInterrupted) {
            var$2 = $runnable.$thread;
            var$2.$interruptHandler = null;
            jl_Thread_setCurrentThread(var$2);
            otpp_AsyncCallbackWrapper_complete($runnable.$callback, null);
        }
    }
    function otp_Platform_schedule(var$1, var$2) {
        return setTimeout(function() {
            otp_Platform_launchThread(var$1);
        }, var$2);
    }
    function jl_Throwable() {
        var a = this; jl_Object.call(a);
        a.$message = null;
        a.$cause = null;
        a.$suppressionEnabled = 0;
        a.$writableStackTrace = 0;
    }
    function jl_Throwable__init_(var_0) {
        var var_1 = new jl_Throwable();
        jl_Throwable__init_0(var_1, var_0);
        return var_1;
    }
    function jl_Throwable__init_0($this, $message) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
        $this.$message = $message;
    }
    function jl_Throwable_fillInStackTrace($this) {
        return $this;
    }
    function jl_Throwable_getMessage($this) {
        return $this.$message;
    }
    function jl_Throwable_getCause($this) {
        var var$1;
        var$1 = $this.$cause;
        if (var$1 === $this)
            var$1 = null;
        return var$1;
    }
    var jl_Exception = $rt_classWithoutFields(jl_Throwable);
    function jl_Exception__init_0() {
        var var_0 = new jl_Exception();
        jl_Exception__init_(var_0);
        return var_0;
    }
    function jl_Exception__init_($this) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
    }
    var jl_RuntimeException = $rt_classWithoutFields(jl_Exception);
    function jl_RuntimeException__init_0() {
        var var_0 = new jl_RuntimeException();
        jl_RuntimeException__init_1(var_0);
        return var_0;
    }
    function jl_RuntimeException__init_(var_0) {
        var var_1 = new jl_RuntimeException();
        jl_RuntimeException__init_2(var_1, var_0);
        return var_1;
    }
    function jl_RuntimeException__init_1($this) {
        jl_Exception__init_($this);
    }
    function jl_RuntimeException__init_2($this, $message) {
        jl_Throwable__init_0($this, $message);
    }
    var jl_ClassCastException = $rt_classWithoutFields(jl_RuntimeException);
    var ji_Serializable = $rt_classWithoutFields(0);
    var jl_Comparable = $rt_classWithoutFields(0);
    var jl_CharSequence = $rt_classWithoutFields(0);
    function jl_String() {
        var a = this; jl_Object.call(a);
        a.$characters = null;
        a.$hashCode = 0;
    }
    var jl_String_EMPTY_CHARS = null;
    var jl_String_EMPTY = null;
    var jl_String_CASE_INSENSITIVE_ORDER = null;
    function jl_String_$callClinit() {
        jl_String_$callClinit = $rt_eraseClinit(jl_String);
        jl_String__clinit_();
    }
    function jl_String__init_(var_0) {
        var var_1 = new jl_String();
        jl_String__init_0(var_1, var_0);
        return var_1;
    }
    function jl_String__init_1(var_0, var_1, var_2) {
        var var_3 = new jl_String();
        jl_String__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jl_String__init_0($this, $characters) {
        jl_String_$callClinit();
        jl_String__init_2($this, $characters, 0, $characters.data.length);
    }
    function jl_String__init_2($this, $value, $offset, $count) {
        var var$4;
        jl_String_$callClinit();
        var$4 = $rt_createCharArray($count);
        $this.$characters = var$4;
        jl_System_fastArraycopy($value, $offset, var$4, 0, $count);
    }
    function jl_String_charAt($this, $index) {
        var var$2, var$3;
        if ($index >= 0) {
            var$2 = $this.$characters.data;
            if ($index < var$2.length)
                return var$2[$index];
        }
        var$3 = new jl_StringIndexOutOfBoundsException;
        jl_Exception__init_(var$3);
        $rt_throw(var$3);
    }
    function jl_String_length($this) {
        return $this.$characters.data.length;
    }
    function jl_String_isEmpty($this) {
        return $this.$characters.data.length ? 0 : 1;
    }
    function jl_String_startsWith($this, $prefix, $toffset) {
        var $i, var$4, var$5;
        if (($toffset + jl_String_length($prefix) | 0) > jl_String_length($this))
            return 0;
        $i = 0;
        while ($i < jl_String_length($prefix)) {
            var$4 = jl_String_charAt($prefix, $i);
            var$5 = $toffset + 1 | 0;
            if (var$4 != jl_String_charAt($this, $toffset))
                return 0;
            $i = $i + 1 | 0;
            $toffset = var$5;
        }
        return 1;
    }
    function jl_String_startsWith0($this, $prefix) {
        if ($this === $prefix)
            return 1;
        return jl_String_startsWith($this, $prefix, 0);
    }
    function jl_String_indexOf($this, $ch, $fromIndex) {
        var $i, $bmpChar, var$5, $hi, $lo;
        $i = jl_Math_max(0, $fromIndex);
        if ($ch < 65536) {
            $bmpChar = $ch & 65535;
            while (true) {
                var$5 = $this.$characters.data;
                if ($i >= var$5.length)
                    return (-1);
                if (var$5[$i] == $bmpChar)
                    break;
                $i = $i + 1 | 0;
            }
            return $i;
        }
        $hi = jl_Character_highSurrogate($ch);
        $lo = jl_Character_lowSurrogate($ch);
        while (true) {
            var$5 = $this.$characters.data;
            if ($i >= (var$5.length - 1 | 0))
                return (-1);
            if (var$5[$i] == $hi && var$5[$i + 1 | 0] == $lo)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    function jl_String_lastIndexOf($this, $ch, $fromIndex) {
        var $i, $bmpChar, $hi, $lo, var$7;
        $i = jl_Math_min($fromIndex, jl_String_length($this) - 1 | 0);
        if ($ch < 65536) {
            $bmpChar = $ch & 65535;
            while (true) {
                if ($i < 0)
                    return (-1);
                if ($this.$characters.data[$i] == $bmpChar)
                    break;
                $i = $i + (-1) | 0;
            }
            return $i;
        }
        $hi = jl_Character_highSurrogate($ch);
        $lo = jl_Character_lowSurrogate($ch);
        while (true) {
            if ($i < 1)
                return (-1);
            var$7 = $this.$characters.data;
            if (var$7[$i] == $lo) {
                $ch = $i - 1 | 0;
                if (var$7[$ch] == $hi)
                    break;
            }
            $i = $i + (-1) | 0;
        }
        return $ch;
    }
    function jl_String_indexOf0($this, $str, $fromIndex) {
        var $i, $toIndex, $j;
        $i = jl_Math_max(0, $fromIndex);
        $toIndex = jl_String_length($this) - jl_String_length($str) | 0;
        a: while (true) {
            if ($i > $toIndex)
                return (-1);
            $j = 0;
            while (true) {
                if ($j >= jl_String_length($str))
                    break a;
                if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                    break;
                $j = $j + 1 | 0;
            }
            $i = $i + 1 | 0;
        }
        return $i;
    }
    function jl_String_indexOf1($this, $str) {
        return jl_String_indexOf0($this, $str, 0);
    }
    function jl_String_substring($this, $beginIndex, $endIndex) {
        var var$3, var$4;
        var$3 = $rt_compare($beginIndex, $endIndex);
        if (var$3 > 0) {
            var$4 = new jl_IndexOutOfBoundsException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        if (!var$3) {
            jl_String_$callClinit();
            return jl_String_EMPTY;
        }
        if (!$beginIndex && $endIndex == jl_String_length($this))
            return $this;
        return jl_String__init_1($this.$characters, $beginIndex, $endIndex - $beginIndex | 0);
    }
    function jl_String_substring0($this, $beginIndex) {
        return jl_String_substring($this, $beginIndex, jl_String_length($this));
    }
    function jl_String_subSequence($this, $beginIndex, $endIndex) {
        return jl_String_substring($this, $beginIndex, $endIndex);
    }
    function jl_String_contains($this, $s) {
        var $sz, $i, $j;
        $sz = jl_String_length($this) - jl_String_length($s) | 0;
        $i = 0;
        while ($i <= $sz) {
            $j = 0;
            while (true) {
                if ($j >= jl_String_length($s))
                    return 1;
                if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($s, $j))
                    break;
                $j = $j + 1 | 0;
            }
            $i = $i + 1 | 0;
        }
        return 0;
    }
    function jl_String_trim($this) {
        var $lower, $upper;
        $lower = 0;
        $upper = jl_String_length($this) - 1 | 0;
        a: {
            while ($lower <= $upper) {
                if (jl_String_charAt($this, $lower) > 32)
                    break a;
                $lower = $lower + 1 | 0;
            }
        }
        while ($lower <= $upper && jl_String_charAt($this, $upper) <= 32) {
            $upper = $upper + (-1) | 0;
        }
        return jl_String_substring($this, $lower, $upper + 1 | 0);
    }
    function jl_String_toString($this) {
        return $this;
    }
    function jl_String_toCharArray($this) {
        var var$1, $array, var$3, $i, var$5;
        var$1 = $this.$characters.data;
        $array = $rt_createCharArray(var$1.length);
        var$3 = $array.data;
        $i = 0;
        var$5 = var$3.length;
        while ($i < var$5) {
            var$3[$i] = var$1[$i];
            $i = $i + 1 | 0;
        }
        return $array;
    }
    function jl_String_valueOf($obj) {
        jl_String_$callClinit();
        return $obj === null ? $rt_s(11) : $obj.$toString();
    }
    function jl_String_valueOf0($i) {
        var var$2;
        jl_String_$callClinit();
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        return jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, $i));
    }
    function jl_String_equals($this, $other) {
        var $str, $i;
        if ($this === $other)
            return 1;
        if (!($other instanceof jl_String))
            return 0;
        $str = $other;
        if (jl_String_length($str) != jl_String_length($this))
            return 0;
        $i = 0;
        while ($i < jl_String_length($str)) {
            if (jl_String_charAt($this, $i) != jl_String_charAt($str, $i))
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    function jl_String_hashCode($this) {
        var var$1, var$2, var$3, $c;
        a: {
            if (!$this.$hashCode) {
                var$1 = $this.$characters.data;
                var$2 = var$1.length;
                var$3 = 0;
                while (true) {
                    if (var$3 >= var$2)
                        break a;
                    $c = var$1[var$3];
                    $this.$hashCode = (31 * $this.$hashCode | 0) + $c | 0;
                    var$3 = var$3 + 1 | 0;
                }
            }
        }
        return $this.$hashCode;
    }
    function jl_String_split($this, $regex) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
        if ($regex === null) {
            $regex = new jl_NullPointerException;
            jl_Throwable__init_0($regex, $rt_s(12));
            $rt_throw($regex);
        }
        jur_AbstractSet_counter = 1;
        var$2 = new jur_Pattern;
        var$2.$backRefs = $rt_createArray(jur_FSet, 10);
        var$2.$globalGroupIndex = (-1);
        var$2.$compCount = (-1);
        var$2.$consCount = (-1);
        var$3 = new jur_Lexer;
        var$3.$mode = 1;
        var$3.$orig = $regex;
        var$3.$pattern = $rt_createCharArray(jl_String_length($regex) + 2 | 0);
        jl_System_fastArraycopy(jl_String_toCharArray($regex), 0, var$3.$pattern, 0, jl_String_length($regex));
        var$4 = var$3.$pattern.data;
        var$5 = var$4.length;
        var$4[var$5 - 1 | 0] = 0;
        var$4[var$5 - 2 | 0] = 0;
        var$3.$patternFullLength = var$5;
        var$3.$flags = 0;
        jur_Lexer_movePointer(var$3);
        jur_Lexer_movePointer(var$3);
        var$2.$lexemes = var$3;
        var$2.$flags0 = 0;
        var$2.$start = jur_Pattern_processExpression(var$2, (-1), 0, null);
        if (!jur_Lexer_isEmpty(var$2.$lexemes)) {
            $regex = new jur_PatternSyntaxException;
            var$2 = var$2.$lexemes;
            jur_PatternSyntaxException__init_($regex, $rt_s(10), var$2.$orig, var$2.$curToc);
            $rt_throw($regex);
        }
        if (var$2.$needsBackRefReplacement)
            var$2.$start.$processSecondPass();
        $regex = ju_ArrayList__init_();
        var$3 = new jur_Matcher;
        var$3.$leftBound = (-1);
        var$3.$rightBound = (-1);
        var$3.$pat = var$2;
        var$3.$start0 = var$2.$start;
        var$3.$string = $this;
        var$3.$leftBound = 0;
        var$6 = jl_String_length($this);
        var$3.$rightBound = var$6;
        var$7 = new jur_MatchResultImpl;
        var$8 = var$3.$leftBound;
        var$9 = var$2.$globalGroupIndex;
        var$5 = var$2.$compCount + 1 | 0;
        var$10 = var$2.$consCount + 1 | 0;
        var$7.$previousMatch = (-1);
        var$11 = var$9 + 1 | 0;
        var$7.$groupCount = var$11;
        var$7.$groupBounds = $rt_createIntArray(var$11 * 2 | 0);
        var$4 = $rt_createIntArray(var$10);
        var$7.$consumers = var$4;
        ju_Arrays_fill(var$4, (-1));
        if (var$5 > 0)
            var$7.$compQuantCounters = $rt_createIntArray(var$5);
        ju_Arrays_fill(var$7.$groupBounds, (-1));
        jur_MatchResultImpl_reset(var$7, $this, var$8, var$6);
        var$3.$matchResult = var$7;
        var$7.$anchoringBounds = 1;
        var$5 = 0;
        var$9 = 0;
        if (!jl_String_length($this)) {
            var$4 = $rt_createArray(jl_String, 1);
            var$4.data[0] = $rt_s(10);
        } else {
            while (true) {
                var$11 = jl_String_length(var$3.$string);
                if (!jur_Matcher_hasTransparentBounds(var$3))
                    var$11 = var$3.$rightBound;
                var$2 = var$3.$matchResult;
                if (var$2.$startIndex >= 0 && jur_MatchResultImpl_mode(var$2) == 1) {
                    var$2 = var$3.$matchResult;
                    var$2.$startIndex = jur_MatchResultImpl_end(var$2);
                    if (jur_MatchResultImpl_end(var$3.$matchResult) == jur_MatchResultImpl_start(var$3.$matchResult)) {
                        var$2 = var$3.$matchResult;
                        var$2.$startIndex = var$2.$startIndex + 1 | 0;
                    }
                    var$6 = var$3.$matchResult.$startIndex;
                    var$6 = var$6 <= var$11 && jur_Matcher_find(var$3, var$6) ? 1 : 0;
                } else
                    var$6 = jur_Matcher_find(var$3, var$3.$leftBound);
                if (!var$6)
                    break;
                var$5 = var$5 + 1 | 0;
                ju_ArrayList_add($regex, jl_String_subSequence($this, var$9, jur_Matcher_start(var$3)));
                var$9 = jur_Matcher_end(var$3);
            }
            ju_ArrayList_add($regex, jl_String_subSequence($this, var$9, jl_String_length($this)));
            var$12 = var$5 + 1 | 0;
            a: {
                while (true) {
                    var$12 = var$12 + (-1) | 0;
                    if (var$12 < 0)
                        break;
                    if (jl_String_length(ju_ArrayList_get($regex, var$12)))
                        break a;
                    ju_ArrayList_remove($regex, var$12);
                }
            }
            if (var$12 < 0)
                var$12 = 0;
            var$4 = ju_AbstractCollection_toArray($regex, $rt_createArray(jl_String, var$12));
        }
        return var$4;
    }
    function jl_String__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createCharArray(0);
        jl_String_EMPTY_CHARS = var$1;
        var$2 = new jl_String;
        jl_String_$callClinit();
        var$2.$characters = var$1;
        jl_String_EMPTY = var$2;
        jl_String_CASE_INSENSITIVE_ORDER = new jl_String$_clinit_$lambda$_89_0;
    }
    var jl_Error = $rt_classWithoutFields(jl_Throwable);
    var jl_LinkageError = $rt_classWithoutFields(jl_Error);
    var jl_NoClassDefFoundError = $rt_classWithoutFields(jl_LinkageError);
    var jl_Number = $rt_classWithoutFields();
    function jl_Integer() {
        jl_Number.call(this);
        this.$value = 0;
    }
    var jl_Integer_TYPE = null;
    var jl_Integer_integerCache = null;
    function jl_Integer__init_(var_0) {
        var var_1 = new jl_Integer();
        jl_Integer__init_0(var_1, var_0);
        return var_1;
    }
    function jl_Integer__init_0($this, $value) {
        $this.$value = $value;
    }
    function jl_Integer_toString($i) {
        return (jl_AbstractStringBuilder_append0(jl_AbstractStringBuilder__init_0(20), $i, 10)).$toString();
    }
    function jl_Integer_parseInt($s, $radix) {
        var var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
        if ($s === null) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_0($s, $rt_s(13));
            $rt_throw($s);
        }
        var$3 = jl_String_length($s);
        if (0 == var$3) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_0($s, $rt_s(14));
            $rt_throw($s);
        }
        if ($radix >= 2 && $radix <= 36) {
            a: {
                var$4 = 0;
                switch (jl_String_charAt($s, 0)) {
                    case 43:
                        break;
                    case 45:
                        var$4 = 1;
                        var$5 = 1;
                        break a;
                    default:
                        var$5 = 0;
                        break a;
                }
                var$5 = 1;
            }
            var$6 = 0;
            if (var$5 == var$3) {
                $s = new jl_NumberFormatException;
                jl_Exception__init_($s);
                $rt_throw($s);
            }
            b: {
                c: {
                    while (var$5 < var$3) {
                        var$7 = var$5 + 1 | 0;
                        var$8 = jl_Character_getNumericValue(jl_String_charAt($s, var$5));
                        if (var$8 < 0) {
                            var$9 = new jl_NumberFormatException;
                            $s = jl_String_valueOf(jl_String_substring($s, 0, var$3));
                            var$10 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$10);
                            jl_StringBuilder_append(jl_StringBuilder_append(var$10, $rt_s(15)), $s);
                            jl_Throwable__init_0(var$9, jl_AbstractStringBuilder_toString(var$10));
                            $rt_throw(var$9);
                        }
                        if (var$8 >= $radix) {
                            var$9 = new jl_NumberFormatException;
                            $s = jl_String_valueOf(jl_String_substring($s, 0, var$3));
                            var$10 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$10);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$10, $rt_s(16)), $radix), $rt_s(17)), $s);
                            jl_Throwable__init_0(var$9, jl_AbstractStringBuilder_toString(var$10));
                            $rt_throw(var$9);
                        }
                        var$6 = $rt_imul($radix, var$6) + var$8 | 0;
                        if (var$6 < 0) {
                            if (var$7 != var$3)
                                break b;
                            if (var$6 != (-2147483648))
                                break b;
                            if (!var$4)
                                break b;
                            var$6 = (-2147483648);
                            break c;
                        }
                        var$5 = var$7;
                    }
                    if (var$4)
                        var$6 =  -var$6 | 0;
                }
                return var$6;
            }
            var$9 = new jl_NumberFormatException;
            var$10 = jl_String_valueOf(jl_String_substring($s, 0, var$3));
            var$11 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$11);
            jl_StringBuilder_append(jl_StringBuilder_append(var$11, $rt_s(18)), var$10);
            jl_Throwable__init_0(var$9, jl_AbstractStringBuilder_toString(var$11));
            $rt_throw(var$9);
        }
        $s = new jl_NumberFormatException;
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(19)), $radix);
        jl_Throwable__init_0($s, jl_AbstractStringBuilder_toString(var$9));
        $rt_throw($s);
    }
    function jl_Integer_parseInt0($s) {
        return jl_Integer_parseInt($s, 10);
    }
    function jl_Integer_intValue($this) {
        return $this.$value;
    }
    function jl_Integer_toString0($this) {
        return jl_Integer_toString($this.$value);
    }
    function jl_Integer_numberOfLeadingZeros($i) {
        var $n, var$3;
        if (!$i)
            return 32;
        $n = 0;
        var$3 = $i >>> 16 | 0;
        if (var$3)
            $n = 16;
        else
            var$3 = $i;
        $i = var$3 >>> 8 | 0;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 8;
        var$3 = $i >>> 4 | 0;
        if (!var$3)
            var$3 = $i;
        else
            $n = $n | 4;
        $i = var$3 >>> 2 | 0;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 2;
        if ($i >>> 1 | 0)
            $n = $n | 1;
        return (32 - $n | 0) - 1 | 0;
    }
    function jl_Integer_numberOfTrailingZeros($i) {
        var $n, var$3;
        if (!$i)
            return 32;
        $n = 0;
        var$3 = $i << 16;
        if (var$3)
            $n = 16;
        else
            var$3 = $i;
        $i = var$3 << 8;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 8;
        var$3 = $i << 4;
        if (!var$3)
            var$3 = $i;
        else
            $n = $n | 4;
        $i = var$3 << 2;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 2;
        if ($i << 1)
            $n = $n | 1;
        return (32 - $n | 0) - 1 | 0;
    }
    function jl_Integer__clinit_() {
        jl_Integer_TYPE = $rt_cls($rt_intcls());
    }
    function jl_AbstractStringBuilder() {
        var a = this; jl_Object.call(a);
        a.$buffer = null;
        a.$length0 = 0;
    }
    function jl_AbstractStringBuilder__init_1() {
        var var_0 = new jl_AbstractStringBuilder();
        jl_AbstractStringBuilder__init_(var_0);
        return var_0;
    }
    function jl_AbstractStringBuilder__init_0(var_0) {
        var var_1 = new jl_AbstractStringBuilder();
        jl_AbstractStringBuilder__init_2(var_1, var_0);
        return var_1;
    }
    function jl_AbstractStringBuilder__init_($this) {
        jl_AbstractStringBuilder__init_2($this, 16);
    }
    function jl_AbstractStringBuilder__init_2($this, $capacity) {
        $this.$buffer = $rt_createCharArray($capacity);
    }
    function jl_AbstractStringBuilder_append0($this, $value, $radix) {
        return jl_AbstractStringBuilder_insert($this, $this.$length0, $value, $radix);
    }
    function jl_AbstractStringBuilder_insert($this, $target, $value, $radix) {
        var $positive, var$5, var$6, $pos, $sz, $posLimit, var$10;
        $positive = 1;
        if ($value < 0) {
            $positive = 0;
            $value =  -$value | 0;
        }
        a: {
            if ($rt_ucmp($value, $radix) < 0) {
                if ($positive)
                    jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
                else {
                    jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                    var$5 = $this.$buffer.data;
                    var$6 = $target + 1 | 0;
                    var$5[$target] = 45;
                    $target = var$6;
                }
                $this.$buffer.data[$target] = jl_Character_forDigit($value, $radix);
            } else {
                $pos = 1;
                $sz = 1;
                $posLimit = $rt_udiv((-1), $radix);
                b: {
                    while (true) {
                        var$10 = $rt_imul($pos, $radix);
                        if ($rt_ucmp(var$10, $value) > 0) {
                            var$10 = $pos;
                            break b;
                        }
                        $sz = $sz + 1 | 0;
                        if ($rt_ucmp(var$10, $posLimit) > 0)
                            break;
                        $pos = var$10;
                    }
                }
                if (!$positive)
                    $sz = $sz + 1 | 0;
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
                if ($positive)
                    $positive = $target;
                else {
                    var$5 = $this.$buffer.data;
                    $positive = $target + 1 | 0;
                    var$5[$target] = 45;
                }
                while (true) {
                    if (!var$10)
                        break a;
                    var$5 = $this.$buffer.data;
                    $target = $positive + 1 | 0;
                    var$5[$positive] = jl_Character_forDigit($rt_udiv($value, var$10), $radix);
                    $value = $rt_umod($value, var$10);
                    var$10 = $rt_udiv(var$10, $radix);
                    $positive = $target;
                }
            }
        }
        return $this;
    }
    function jl_AbstractStringBuilder_insert0($this, $target, $value) {
        var $mantissa, var$4, $number, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, $pos, $intDigit, $i;
        $mantissa = $rt_compare($value, 0.0);
        if (!$mantissa) {
            if (1.0 / $value === Infinity) {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
                var$4 = $this.$buffer.data;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 48;
                $target = $mantissa + 1 | 0;
                var$4[$mantissa] = 46;
                var$4[$target] = 48;
                return $this;
            }
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 48;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 46;
            var$4[$mantissa] = 48;
            return $this;
        }
        if ($rt_globals.isNaN($value) ? 1 : 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 78;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 97;
            var$4[$target] = 78;
            return $this;
        }
        if (!$rt_globals.isFinite($value) ? 1 : 0) {
            if ($mantissa > 0) {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
                $mantissa = $target;
            } else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
                var$4 = $this.$buffer.data;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 45;
            }
            var$4 = $this.$buffer.data;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 73;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 110;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 102;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 105;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 110;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 105;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 116;
            var$4[$target] = 121;
            return $this;
        }
        $number = jl_AbstractStringBuilder$Constants_floatAnalysisResult;
        otcit_FloatAnalyzer_analyze($value, $number);
        $mantissa = $number.$mantissa;
        $exp = $number.$exponent;
        $negative = $number.$sign;
        $intPart = 1;
        $sz = 1;
        if ($negative)
            $sz = 2;
        $digits = 9;
        $zeros = jl_AbstractStringBuilder_trailingDecimalZeros($mantissa);
        if ($zeros > 0)
            $digits = $digits - $zeros | 0;
        $leadingZeros = 0;
        $leadingZero = 0;
        if ($exp < 7 && $exp >= (-3)) {
            if ($exp >= 0) {
                $intPart = $exp + 1 | 0;
                $digits = jl_Math_max($digits, $intPart + 1 | 0);
                $exp = 0;
            } else {
                $intPart = 0;
                $leadingZeros = ( -$exp | 0) - 1 | 0;
                $leadingZero = 1;
                $sz = $sz + 1 | 0;
                $exp = 0;
            }
        }
        if ($exp) {
            $sz = $sz + 2 | 0;
            if (!($exp > (-10) && $exp < 10))
                $sz = $sz + 1 | 0;
            if ($exp < 0)
                $sz = $sz + 1 | 0;
        }
        if ($exp && $digits == $intPart)
            $digits = $digits + 1 | 0;
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + ($digits + $leadingZeros | 0) | 0) | 0);
        if (!$negative)
            $negative = $target;
        else {
            var$4 = $this.$buffer.data;
            $negative = $target + 1 | 0;
            var$4[$target] = 45;
        }
        $pos = 100000000;
        if ($leadingZero) {
            var$4 = $this.$buffer.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = 48;
            $negative = $target + 1 | 0;
            var$4[$target] = 46;
            while (true) {
                $target = $leadingZeros + (-1) | 0;
                if ($leadingZeros <= 0)
                    break;
                $intDigit = $negative + 1 | 0;
                var$4[$negative] = 48;
                $leadingZeros = $target;
                $negative = $intDigit;
            }
        }
        $i = 0;
        while ($i < $digits) {
            if ($pos <= 0)
                $intDigit = 0;
            else {
                $intDigit = $mantissa / $pos | 0;
                $mantissa = $mantissa % $pos | 0;
            }
            var$4 = $this.$buffer.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = (48 + $intDigit | 0) & 65535;
            $intPart = $intPart + (-1) | 0;
            if ($intPart)
                $negative = $target;
            else {
                $negative = $target + 1 | 0;
                var$4[$target] = 46;
            }
            $pos = $pos / 10 | 0;
            $i = $i + 1 | 0;
        }
        if ($exp) {
            var$4 = $this.$buffer.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = 69;
            if ($exp >= 0)
                $mantissa = $target;
            else {
                $exp =  -$exp | 0;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 45;
            }
            if ($exp < 10)
                $intDigit = $mantissa;
            else {
                $intDigit = $mantissa + 1 | 0;
                var$4[$mantissa] = (48 + ($exp / 10 | 0) | 0) & 65535;
            }
            var$4[$intDigit] = (48 + ($exp % 10 | 0) | 0) & 65535;
        }
        return $this;
    }
    function jl_AbstractStringBuilder_trailingDecimalZeros($n) {
        var $result, $zeros, var$4;
        if (!($n % 1000000000 | 0))
            return 9;
        $result = 0;
        $zeros = 1;
        if (!($n % 100000000 | 0)) {
            $result = 8;
            $zeros = 100000000;
        }
        var$4 = $zeros * 10000 | 0;
        if ($n % var$4 | 0)
            var$4 = $zeros;
        else
            $result = $result | 4;
        $zeros = var$4 * 100 | 0;
        if ($n % $zeros | 0)
            $zeros = var$4;
        else
            $result = $result | 2;
        if (!($n % ($zeros * 10 | 0) | 0))
            $result = $result | 1;
        return $result;
    }
    function jl_AbstractStringBuilder_append($this, $c) {
        return $this.$insert0($this.$length0, $c);
    }
    function jl_AbstractStringBuilder_insert1($this, $index, $c) {
        jl_AbstractStringBuilder_insertSpace($this, $index, $index + 1 | 0);
        $this.$buffer.data[$index] = $c;
        return $this;
    }
    function jl_AbstractStringBuilder_ensureCapacity($this, $capacity) {
        var var$2, $newLength;
        var$2 = $this.$buffer.data.length;
        if (var$2 >= $capacity)
            return;
        $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($capacity, jl_Math_max(var$2 * 2 | 0, 5));
        $this.$buffer = ju_Arrays_copyOf($this.$buffer, $newLength);
    }
    function jl_AbstractStringBuilder_toString($this) {
        return jl_String__init_1($this.$buffer, 0, $this.$length0);
    }
    function jl_AbstractStringBuilder_append1($this, $chars, $offset, $len) {
        return $this.$insert1($this.$length0, $chars, $offset, $len);
    }
    function jl_AbstractStringBuilder_insert2($this, $index, $chars, $offset, $len) {
        var var$5, var$6, var$7, var$8;
        jl_AbstractStringBuilder_insertSpace($this, $index, $index + $len | 0);
        var$5 = $len + $offset | 0;
        while ($offset < var$5) {
            var$6 = $chars.data;
            var$7 = $this.$buffer.data;
            $len = $index + 1 | 0;
            var$8 = $offset + 1 | 0;
            var$7[$index] = var$6[$offset];
            $index = $len;
            $offset = var$8;
        }
        return $this;
    }
    function jl_AbstractStringBuilder_append2($this, $chars) {
        return $this.$append3($chars, 0, $chars.data.length);
    }
    function jl_AbstractStringBuilder_insertSpace($this, $start, $end) {
        var var$3, $sz, $i, var$6;
        var$3 = $this.$length0;
        $sz = var$3 - $start | 0;
        $this.$ensureCapacity((var$3 + $end | 0) - $start | 0);
        $i = $sz - 1 | 0;
        while ($i >= 0) {
            var$6 = $this.$buffer.data;
            var$6[$end + $i | 0] = var$6[$start + $i | 0];
            $i = $i + (-1) | 0;
        }
        $this.$length0 = $this.$length0 + ($end - $start | 0) | 0;
    }
    var jl_Appendable = $rt_classWithoutFields(0);
    var jl_StringBuilder = $rt_classWithoutFields(jl_AbstractStringBuilder);
    function jl_StringBuilder__init_() {
        var var_0 = new jl_StringBuilder();
        jl_StringBuilder__init_0(var_0);
        return var_0;
    }
    function jl_StringBuilder__init_0($this) {
        jl_AbstractStringBuilder__init_($this);
    }
    function jl_StringBuilder_append($this, $obj) {
        jl_StringBuilder_insert($this, $this.$length0, $obj === null ? $rt_s(11) : $obj.$toString());
        return $this;
    }
    function jl_StringBuilder_append1($this, $string) {
        jl_StringBuilder_insert($this, $this.$length0, $string);
        return $this;
    }
    function jl_StringBuilder_append0($this, $value) {
        jl_AbstractStringBuilder_append0($this, $value, 10);
        return $this;
    }
    function jl_StringBuilder_append2($this, $c) {
        jl_AbstractStringBuilder_append($this, $c);
        return $this;
    }
    function jl_StringBuilder_append3($this, $b) {
        jl_StringBuilder_insert($this, $this.$length0, !$b ? $rt_s(20) : $rt_s(21));
        return $this;
    }
    function jl_StringBuilder_delete($this, $start, $end) {
        var var$3, var$4, var$5, var$6, var$7, var$8;
        var$3 = $rt_compare($start, $end);
        if (var$3 <= 0) {
            var$4 = $this.$length0;
            if ($start <= var$4) {
                if (var$3) {
                    var$5 = var$4 - $end | 0;
                    $this.$length0 = var$4 - ($end - $start | 0) | 0;
                    var$6 = 0;
                    while (var$6 < var$5) {
                        var$7 = $this.$buffer.data;
                        var$4 = $start + 1 | 0;
                        var$3 = $end + 1 | 0;
                        var$7[$start] = var$7[$end];
                        var$6 = var$6 + 1 | 0;
                        $start = var$4;
                        $end = var$3;
                    }
                }
                return $this;
            }
        }
        var$8 = new jl_StringIndexOutOfBoundsException;
        jl_Exception__init_(var$8);
        $rt_throw(var$8);
    }
    function jl_StringBuilder_deleteCharAt($this, $index) {
        var var$2, var$3, var$4, var$5;
        if ($index >= 0) {
            var$2 = $this.$length0;
            if ($index < var$2) {
                var$2 = var$2 - 1 | 0;
                $this.$length0 = var$2;
                while ($index < var$2) {
                    var$3 = $this.$buffer.data;
                    var$4 = $index + 1 | 0;
                    var$3[$index] = var$3[var$4];
                    $index = var$4;
                }
                return $this;
            }
        }
        var$5 = new jl_StringIndexOutOfBoundsException;
        jl_Exception__init_(var$5);
        $rt_throw(var$5);
    }
    function jl_StringBuilder_setLength($this, var$1) {
        $this.$length0 = var$1;
    }
    function jl_StringBuilder_insert0($this, var$1, var$2, var$3, var$4) {
        jl_AbstractStringBuilder_insert2($this, var$1, var$2, var$3, var$4);
        return $this;
    }
    function jl_StringBuilder_append4($this, var$1, var$2, var$3) {
        jl_AbstractStringBuilder_append1($this, var$1, var$2, var$3);
        return $this;
    }
    function jl_StringBuilder_length($this) {
        return $this.$length0;
    }
    function jl_StringBuilder_toString($this) {
        return jl_AbstractStringBuilder_toString($this);
    }
    function jl_StringBuilder_ensureCapacity($this, var$1) {
        jl_AbstractStringBuilder_ensureCapacity($this, var$1);
    }
    function jl_StringBuilder_insert1($this, var$1, var$2) {
        jl_AbstractStringBuilder_insert1($this, var$1, var$2);
        return $this;
    }
    function jl_StringBuilder_insert($this, var$1, var$2) {
        var var$3, var$4, var$5;
        if (var$1 >= 0 && var$1 <= $this.$length0) {
            a: {
                if (var$2 === null)
                    var$2 = $rt_s(11);
                else if (jl_String_isEmpty(var$2))
                    break a;
                jl_AbstractStringBuilder_ensureCapacity($this, $this.$length0 + jl_String_length(var$2) | 0);
                var$3 = $this.$length0 - 1 | 0;
                while (var$3 >= var$1) {
                    $this.$buffer.data[var$3 + jl_String_length(var$2) | 0] = $this.$buffer.data[var$3];
                    var$3 = var$3 + (-1) | 0;
                }
                $this.$length0 = $this.$length0 + jl_String_length(var$2) | 0;
                var$3 = 0;
                while (var$3 < jl_String_length(var$2)) {
                    var$4 = $this.$buffer.data;
                    var$5 = var$1 + 1 | 0;
                    var$4[var$1] = jl_String_charAt(var$2, var$3);
                    var$3 = var$3 + 1 | 0;
                    var$1 = var$5;
                }
            }
            return $this;
        }
        var$2 = new jl_StringIndexOutOfBoundsException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    var jl_IncompatibleClassChangeError = $rt_classWithoutFields(jl_LinkageError);
    var jl_NoSuchFieldError = $rt_classWithoutFields(jl_IncompatibleClassChangeError);
    function jl_NoSuchFieldError__init_(var_0) {
        var var_1 = new jl_NoSuchFieldError();
        jl_NoSuchFieldError__init_0(var_1, var_0);
        return var_1;
    }
    function jl_NoSuchFieldError__init_0($this, $message) {
        jl_Throwable__init_0($this, $message);
    }
    var jl_NoSuchMethodError = $rt_classWithoutFields(jl_IncompatibleClassChangeError);
    function jl_NoSuchMethodError__init_(var_0) {
        var var_1 = new jl_NoSuchMethodError();
        jl_NoSuchMethodError__init_0(var_1, var_0);
        return var_1;
    }
    function jl_NoSuchMethodError__init_0($this, $message) {
        jl_Throwable__init_0($this, $message);
    }
    var otj_JSObject = $rt_classWithoutFields(0);
    var otjdx_Node = $rt_classWithoutFields(0);
    var otjdx_Document = $rt_classWithoutFields(0);
    var otjde_EventTarget = $rt_classWithoutFields(0);
    var otjdh_HTMLDocument = $rt_classWithoutFields(0);
    var tj_Runner = $rt_classWithoutFields();
    var jl_System = $rt_classWithoutFields();
    var jl_System_outCache = null;
    function jl_System_out() {
        var var$1, var$2;
        if (jl_System_outCache === null) {
            var$1 = new ji_PrintStream;
            var$1.$out = otcic_StdoutOutputStream_INSTANCE;
            var$2 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$2);
            var$1.$sb = var$2;
            var$1.$buffer0 = $rt_createCharArray(32);
            var$1.$autoFlush = 0;
            jnci_UTF8Charset_$callClinit();
            var$1.$charset = jnci_UTF8Charset_INSTANCE;
            jl_System_outCache = var$1;
        }
        return jl_System_outCache;
    }
    function jl_System_arraycopy($src, $srcPos, $dest, $destPos, $length) {
        var $srcType, $targetType, $srcArray, $i, var$10, var$11, var$12, $elem, var$14;
        if ($src !== null && $dest !== null) {
            if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
                a: {
                    b: {
                        if ($src !== $dest) {
                            $srcType = jl_Class_getComponentType(jl_Object_getClass($src));
                            $targetType = jl_Class_getComponentType(jl_Object_getClass($dest));
                            if ($srcType !== null && $targetType !== null) {
                                if ($srcType === $targetType)
                                    break b;
                                if (!jl_Class_isPrimitive($srcType) && !jl_Class_isPrimitive($targetType)) {
                                    $srcArray = $src;
                                    $i = 0;
                                    var$10 = $srcPos;
                                    while ($i < $length) {
                                        var$11 = $srcArray.data;
                                        var$12 = var$10 + 1 | 0;
                                        $elem = var$11[var$10];
                                        var$14 = $targetType.$platformClass;
                                        if (!($elem !== null && !(typeof $elem.constructor.$meta === 'undefined' ? 1 : 0) && otp_Platform_isAssignable($elem.constructor, var$14) ? 1 : 0)) {
                                            jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $i);
                                            $src = new jl_ArrayStoreException;
                                            jl_Exception__init_($src);
                                            $rt_throw($src);
                                        }
                                        $i = $i + 1 | 0;
                                        var$10 = var$12;
                                    }
                                    jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                                    return;
                                }
                                if (!jl_Class_isPrimitive($srcType))
                                    break a;
                                if (jl_Class_isPrimitive($targetType))
                                    break b;
                                else
                                    break a;
                            }
                            $src = new jl_ArrayStoreException;
                            jl_Exception__init_($src);
                            $rt_throw($src);
                        }
                    }
                    jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                    return;
                }
                $src = new jl_ArrayStoreException;
                jl_Exception__init_($src);
                $rt_throw($src);
            }
            $src = new jl_IndexOutOfBoundsException;
            jl_Exception__init_($src);
            $rt_throw($src);
        }
        $dest = new jl_NullPointerException;
        jl_Throwable__init_0($dest, $rt_s(22));
        $rt_throw($dest);
    }
    function jl_System_fastArraycopy($src, $srcPos, $dest, $destPos, $length) {
        if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
            jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
            return;
        }
        $src = new jl_IndexOutOfBoundsException;
        jl_Exception__init_($src);
        $rt_throw($src);
    }
    function jl_System_doArrayCopy(var$1, var$2, var$3, var$4, var$5) {
        if (var$5 === 0) {
            return; 
        } else if (typeof var$1.data.buffer !== 'undefined') {
            var$3.data.set(var$1.data.subarray(var$2, var$2 + var$5), var$4);
        } else if (var$1 !== var$3 || var$4 < var$2) {
            for (var i = 0; i < var$5; i = (i + 1) | 0) {
                var$3.data[var$4++] = var$1.data[var$2++];
            }
        } else {
            var$2 = (var$2 + var$5) | 0;
            var$4 = (var$4 + var$5) | 0;
            for (var i = 0; i < var$5; i = (i + 1) | 0) {
                var$3.data[--var$4] = var$1.data[--var$2];
            }
        }
    }
    function jl_System_currentTimeMillis() {
        return Long_fromNumber(new Date().getTime());
    }
    var otci_IntegerUtil = $rt_classWithoutFields();
    var otjde_FocusEventTarget = $rt_classWithoutFields(0);
    var otjde_MouseEventTarget = $rt_classWithoutFields(0);
    var otjde_KeyboardEventTarget = $rt_classWithoutFields(0);
    var otjde_LoadEventTarget = $rt_classWithoutFields(0);
    var otjde_GamepadEventTarget = $rt_classWithoutFields(0);
    var otjb_WindowEventTarget = $rt_classWithoutFields(0);
    var otjb_StorageProvider = $rt_classWithoutFields(0);
    var otjc_JSArrayReader = $rt_classWithoutFields(0);
    var otjb_Window = $rt_classWithoutFields();
    function otjb_Window_get$exported$0(var$0, var$1) {
        return otji_JSWrapper_javaToJs(var$0.$get(var$1));
    }
    function otjb_Window_addEventListener$exported$1(var$0, var$1, var$2) {
        var$0.$addEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otjb_Window_removeEventListener$exported$2(var$0, var$1, var$2) {
        var$0.$removeEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otjb_Window_removeEventListener$exported$3(var$0, var$1, var$2, var$3) {
        var$0.$removeEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    function otjb_Window_dispatchEvent$exported$4(var$0, var$1) {
        return !!var$0.$dispatchEvent(var$1);
    }
    function otjb_Window_getLength$exported$5(var$0) {
        return var$0.$getLength0();
    }
    function otjb_Window_addEventListener$exported$6(var$0, var$1, var$2, var$3) {
        var$0.$addEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    function tj_Variables() {
        var a = this; jl_Object.call(a);
        a.$allVariables = null;
        a.$intVariables = null;
        a.$floatVariables = null;
        a.$boolVariables = null;
        a.$stringVariables = null;
        a.$intLists = null;
        a.$floatLists = null;
        a.$boolLists = null;
        a.$stringLists = null;
        a.$functions = null;
    }
    function tj_Variables__init_0(var_0) {
        var var_1 = new tj_Variables();
        tj_Variables__init_1(var_1, var_0);
        return var_1;
    }
    function tj_Variables__init_() {
        var var_0 = new tj_Variables();
        tj_Variables__init_2(var_0);
        return var_0;
    }
    function tj_Variables__init_1($this, $variables) {
        $this.$allVariables = ju_HashMap__init_();
        $this.$intVariables = ju_ArrayList__init_();
        $this.$floatVariables = ju_ArrayList__init_();
        $this.$boolVariables = ju_ArrayList__init_();
        $this.$stringVariables = ju_ArrayList__init_();
        $this.$intLists = ju_ArrayList__init_();
        $this.$floatLists = ju_ArrayList__init_();
        $this.$boolLists = ju_ArrayList__init_();
        $this.$stringLists = ju_ArrayList__init_();
        $this.$functions = ju_HashMap__init_();
        $this.$allVariables = $variables.$allVariables;
        $this.$intVariables = $variables.$intVariables;
        $this.$floatVariables = $variables.$floatVariables;
        $this.$boolVariables = $variables.$boolVariables;
        $this.$stringVariables = $variables.$stringVariables;
        $this.$functions = $variables.$functions;
    }
    function tj_Variables__init_2($this) {
        $this.$allVariables = ju_HashMap__init_();
        $this.$intVariables = ju_ArrayList__init_();
        $this.$floatVariables = ju_ArrayList__init_();
        $this.$boolVariables = ju_ArrayList__init_();
        $this.$stringVariables = ju_ArrayList__init_();
        $this.$intLists = ju_ArrayList__init_();
        $this.$floatLists = ju_ArrayList__init_();
        $this.$boolLists = ju_ArrayList__init_();
        $this.$stringLists = ju_ArrayList__init_();
        $this.$functions = ju_HashMap__init_();
    }
    function tj_Variables_addVariable($this, $name, $type, $value, $lineNumber) {
        var var$5, var$6;
        a: {
            if (ju_HashMap_containsKey($this.$allVariables, $name))
                tj_Error_VariableAlreadyExists($name, $lineNumber);
            else {
                b: {
                    ju_HashMap_put($this.$allVariables, $name, $type);
                    $type = $type.$name0;
                    var$5 = (-1);
                    switch (jl_String_hashCode($type)) {
                        case -1838656495:
                            if (!jl_String_equals($type, $rt_s(23)))
                                break b;
                            var$5 = 3;
                            break b;
                        case 72655:
                            if (!jl_String_equals($type, $rt_s(24)))
                                break b;
                            var$5 = 0;
                            break b;
                        case 66988604:
                            if (!jl_String_equals($type, $rt_s(25)))
                                break b;
                            var$5 = 1;
                            break b;
                        case 782694408:
                            if (!jl_String_equals($type, $rt_s(26)))
                                break b;
                            var$5 = 2;
                            break b;
                        default:
                    }
                }
                switch (var$5) {
                    case 0:
                        break;
                    case 1:
                        $type = $this.$floatVariables;
                        var$6 = new tj_FloatVar;
                        var$6.$value0 = $value;
                        var$6.$name1 = $name;
                        ju_ArrayList_add($type, var$6);
                        break a;
                    case 2:
                        $type = $this.$boolVariables;
                        var$6 = new tj_BoolVar;
                        var$6.$value1 = $value;
                        var$6.$name2 = $name;
                        ju_ArrayList_add($type, var$6);
                        break a;
                    case 3:
                        $type = $this.$stringVariables;
                        var$6 = new tj_StringVar;
                        var$6.$value2 = $value;
                        var$6.$name3 = $name;
                        ju_ArrayList_add($type, var$6);
                        break a;
                    default:
                        break a;
                }
                $type = $this.$intVariables;
                var$6 = new tj_IntVar;
                var$6.$value3 = $value;
                var$6.$name4 = $name;
                ju_ArrayList_add($type, var$6);
            }
        }
    }
    function tj_Variables_isVariable($this, $name) {
        return ju_HashMap_containsKey($this.$allVariables, $name);
    }
    function tj_Variables_addFunction($this, $name, $body, $args, $lineNumber) {
        var var$5, var$6, var$7;
        if (!ju_HashMap_containsKey($this.$functions, $name)) {
            var$5 = $this.$functions;
            var$6 = new tj_FunctionVar;
            var$6.$name5 = $name;
            var$6.$body0 = $body;
            var$6.$args = $args;
            ju_HashMap_put(var$5, $name, var$6);
            return;
        }
        $body = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($body);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($body, $rt_s(27)), $name), $rt_s(28));
        $body = jl_AbstractStringBuilder_toString($body);
        $args = $rt_createArray(jl_String, 2);
        var$7 = $args.data;
        var$7[0] = $body;
        $body = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($body);
        jl_StringBuilder_append0($body, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString($body);
        $rt_globals.addConsoleError(otji_JS_wrap($args));
        $body = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(27)), $name), $rt_s(28));
        jl_Throwable__init_0($body, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw($body);
    }
    function tj_Variables_getFunctionArgs($this, $name) {
        return (ju_HashMap_get($this.$functions, $name)).$args;
    }
    function tj_Variables_getFunctionBody($this, $name) {
        return (ju_HashMap_get($this.$functions, $name)).$body0;
    }
    function tj_Variables_setVariableValue($this, $name, $value, $lineNumber) {
        var $i, var$5, $i_0, $t, var$8;
        a: {
            $i = (ju_HashMap_get($this.$allVariables, $name)).$name0;
            var$5 = (-1);
            switch (jl_String_hashCode($i)) {
                case -1838656495:
                    if (!jl_String_equals($i, $rt_s(23)))
                        break a;
                    var$5 = 3;
                    break a;
                case 72655:
                    if (!jl_String_equals($i, $rt_s(24)))
                        break a;
                    var$5 = 0;
                    break a;
                case 66988604:
                    if (!jl_String_equals($i, $rt_s(25)))
                        break a;
                    var$5 = 1;
                    break a;
                case 782694408:
                    if (!jl_String_equals($i, $rt_s(26)))
                        break a;
                    var$5 = 2;
                    break a;
                default:
            }
        }
        b: {
            switch (var$5) {
                case 0:
                    break;
                case 1:
                    $i = ju_AbstractList_iterator($this.$floatVariables);
                    while (ju_AbstractList$1_hasNext($i)) {
                        $i_0 = ju_AbstractList$1_next($i);
                        if (jl_String_equals($i_0.$name1, $name)) {
                            $t = $value.$getType();
                            tj_JavaishVal$JavaishType_$callClinit();
                            if ($t === tj_JavaishVal$JavaishType_FLOAT)
                                $i_0.$value0 = $value;
                            else if ($value.$getType() !== tj_JavaishVal$JavaishType_INT)
                                tj_Error_TypeMismatch($rt_s(29), $value.$typeString(), $lineNumber);
                            else
                                $i_0.$value0 = tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value);
                        }
                    }
                    break b;
                case 2:
                    $i = ju_AbstractList_iterator($this.$boolVariables);
                    while (ju_AbstractList$1_hasNext($i)) {
                        $i_0 = ju_AbstractList$1_next($i);
                        if (jl_String_equals($i_0.$name2, $name)) {
                            $t = $value.$getType();
                            tj_JavaishVal$JavaishType_$callClinit();
                            if ($t === tj_JavaishVal$JavaishType_BOOLEAN)
                                $i_0.$value1 = $value;
                            else
                                tj_Error_TypeMismatch($rt_s(30), $value.$typeString(), $lineNumber);
                        }
                    }
                    break b;
                case 3:
                    var$8 = ju_AbstractList_iterator($this.$stringVariables);
                    while (ju_AbstractList$1_hasNext(var$8)) {
                        $i = ju_AbstractList$1_next(var$8);
                        if (jl_String_equals($i.$name3, $name)) {
                            $i_0 = $value.$getType();
                            tj_JavaishVal$JavaishType_$callClinit();
                            if ($i_0 === tj_JavaishVal$JavaishType_STRING)
                                $i.$value2 = $value;
                            else
                                tj_Error_TypeMismatch($rt_s(31), $value.$typeString(), $lineNumber);
                        }
                    }
                    break b;
                default:
                    break b;
            }
            $i = ju_AbstractList_iterator($this.$intVariables);
            while (ju_AbstractList$1_hasNext($i)) {
                $i_0 = ju_AbstractList$1_next($i);
                if (jl_String_equals($i_0.$name4, $name)) {
                    $t = $value.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($t === tj_JavaishVal$JavaishType_INT)
                        $i_0.$value3 = $value;
                    else
                        tj_Error_TypeMismatch($rt_s(32), $value.$typeString(), $lineNumber);
                }
            }
        }
    }
    function tj_Variables_getVariableValue($this, $name) {
        var $t, var$3, var$4, $i;
        a: {
            $t = ju_HashMap_get($this.$allVariables, $name);
            var$3 = $t.$name0;
            var$4 = (-1);
            switch (jl_String_hashCode(var$3)) {
                case -1838656495:
                    if (!jl_String_equals(var$3, $rt_s(23)))
                        break a;
                    var$4 = 3;
                    break a;
                case 72655:
                    if (!jl_String_equals(var$3, $rt_s(24)))
                        break a;
                    var$4 = 0;
                    break a;
                case 66988604:
                    if (!jl_String_equals(var$3, $rt_s(25)))
                        break a;
                    var$4 = 1;
                    break a;
                case 782694408:
                    if (!jl_String_equals(var$3, $rt_s(26)))
                        break a;
                    var$4 = 2;
                    break a;
                default:
            }
        }
        b: {
            switch (var$4) {
                case 0:
                    break;
                case 1:
                    $t = ju_AbstractList_iterator($this.$floatVariables);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name1, $name))
                            return $i.$value0;
                    }
                    break b;
                case 2:
                    $t = ju_AbstractList_iterator($this.$boolVariables);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name2, $name))
                            return $i.$value1;
                    }
                    break b;
                case 3:
                    $t = ju_AbstractList_iterator($this.$stringVariables);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name3, $name))
                            return $i.$value2;
                    }
                    break b;
                default:
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($t !== tj_JavaishVal$JavaishType_BOOLEANLIST && $t !== tj_JavaishVal$JavaishType_FLOATLIST && $t !== tj_JavaishVal$JavaishType_INTLIST && $t !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break b;
                    return tj_Variables_getList($this, $name);
            }
            $t = ju_AbstractList_iterator($this.$intVariables);
            while (ju_AbstractList$1_hasNext($t)) {
                $i = ju_AbstractList$1_next($t);
                if (jl_String_equals($i.$name4, $name))
                    return $i.$value3;
            }
        }
        return null;
    }
    function tj_Variables_getList($this, $name) {
        var $i, var$3, $t;
        a: {
            $i = (ju_HashMap_get($this.$allVariables, $name)).$name0;
            var$3 = (-1);
            switch (jl_String_hashCode($i)) {
                case -1618721555:
                    if (!jl_String_equals($i, $rt_s(33)))
                        break a;
                    var$3 = 0;
                    break a;
                case -1087271889:
                    if (!jl_String_equals($i, $rt_s(34)))
                        break a;
                    var$3 = 3;
                    break a;
                case 318725286:
                    if (!jl_String_equals($i, $rt_s(35)))
                        break a;
                    var$3 = 2;
                    break a;
                case 675960026:
                    if (!jl_String_equals($i, $rt_s(36)))
                        break a;
                    var$3 = 1;
                    break a;
                default:
            }
        }
        b: {
            switch (var$3) {
                case 0:
                    break;
                case 1:
                    $t = ju_AbstractList_iterator($this.$floatLists);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name6, $name))
                            return tj_JavaishListVal__init_(tj_JavaishFloatList__init_($i.$value4.$value5));
                    }
                    break b;
                case 2:
                    $t = ju_AbstractList_iterator($this.$boolLists);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name7, $name))
                            return tj_JavaishListVal__init_(tj_JavaishBooleanList__init_($i.$value6.$value7));
                    }
                    break b;
                case 3:
                    $t = ju_AbstractList_iterator($this.$stringLists);
                    while (ju_AbstractList$1_hasNext($t)) {
                        $i = ju_AbstractList$1_next($t);
                        if (jl_String_equals($i.$name8, $name))
                            return tj_JavaishListVal__init_(tj_JavaishStringList__init_($i.$value8.$value9));
                    }
                    break b;
                default:
                    break b;
            }
            $t = ju_AbstractList_iterator($this.$intLists);
            while (ju_AbstractList$1_hasNext($t)) {
                $i = ju_AbstractList$1_next($t);
                if (jl_String_equals($i.$name9, $name))
                    return tj_JavaishListVal__init_(tj_JavaishIntList__init_($i.$value10.$value11));
            }
        }
        return null;
    }
    function tj_Variables_getVariableType($this, $name) {
        return ju_HashMap_get($this.$allVariables, $name);
    }
    function tj_Variables_addList($this, $name, $type, $value, $lineNumber) {
        var $v;
        a: {
            if (ju_HashMap_containsKey($this.$allVariables, $name))
                tj_Error_VariableAlreadyExists($name, $lineNumber);
            else {
                b: {
                    ju_HashMap_put($this.$allVariables, $name, $type);
                    $v = $type.$name0;
                    $lineNumber = (-1);
                    switch (jl_String_hashCode($v)) {
                        case -1618721555:
                            if (!jl_String_equals($v, $rt_s(33)))
                                break b;
                            $lineNumber = 0;
                            break b;
                        case -1087271889:
                            if (!jl_String_equals($v, $rt_s(34)))
                                break b;
                            $lineNumber = 3;
                            break b;
                        case 318725286:
                            if (!jl_String_equals($v, $rt_s(35)))
                                break b;
                            $lineNumber = 2;
                            break b;
                        case 675960026:
                            if (!jl_String_equals($v, $rt_s(36)))
                                break b;
                            $lineNumber = 1;
                            break b;
                        default:
                    }
                }
                switch ($lineNumber) {
                    case 0:
                        break;
                    case 1:
                        if (!($value instanceof tj_JavaishFloatList)) {
                            tj_Error_TypeMismatch($rt_s(37), $value.$typeString(), 0);
                            break a;
                        }
                        $v = $value;
                        $type = $this.$floatLists;
                        $value = new tj_FloatList;
                        $value.$value4 = $v;
                        $value.$name6 = $name;
                        ju_ArrayList_add($type, $value);
                        break a;
                    case 2:
                        if (!($value instanceof tj_JavaishBooleanList)) {
                            tj_Error_TypeMismatch($rt_s(38), $value.$typeString(), 0);
                            break a;
                        }
                        $v = $value;
                        $type = $this.$boolLists;
                        $value = new tj_BoolList;
                        $value.$value6 = $v;
                        $value.$name7 = $name;
                        ju_ArrayList_add($type, $value);
                        break a;
                    case 3:
                        if (!($value instanceof tj_JavaishStringList)) {
                            tj_Error_TypeMismatch($rt_s(39), $value.$typeString(), 0);
                            break a;
                        }
                        $v = $value;
                        $type = $this.$stringLists;
                        $value = new tj_StringList;
                        $value.$value8 = $v;
                        $value.$name8 = $name;
                        ju_ArrayList_add($type, $value);
                        break a;
                    default:
                        break a;
                }
                if (!($value instanceof tj_JavaishIntList))
                    tj_Error_TypeMismatch($rt_s(40), $value.$typeString(), 0);
                else {
                    $v = $value;
                    $type = $this.$intLists;
                    $value = new tj_IntList;
                    $value.$value10 = $v;
                    $value.$name9 = $name;
                    ju_ArrayList_add($type, $value);
                }
            }
        }
    }
    function tj_Parser() {
        var a = this; jl_Object.call(a);
        a.$source = null;
        a.$variables = null;
        a.$lineNumber1 = 0;
        a.$classStmt = null;
        a.$variableNames = null;
    }
    function tj_Parser__init_(var_0, var_1) {
        var var_2 = new tj_Parser();
        tj_Parser__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Parser__init_0($this, $source, $variables) {
        var var$3;
        $this.$lineNumber1 = 0;
        var$3 = new tj_ClassStmt;
        tj_Statements__init_(var$3);
        var$3.$line = (-1);
        tj_Statements$StmtType_$callClinit();
        var$3.$type = tj_Statements$StmtType_CLASS;
        var$3.$isBlock = 1;
        $this.$classStmt = var$3;
        $this.$variableNames = ju_ArrayList__init_();
        $this.$source = $source;
        $this.$variables = $variables;
    }
    function tj_Parser_removeIndents($this, $line) {
        var $i, $rString, $readingIndents, $c, var$6;
        $i = 0;
        $rString = $rt_s(10);
        $readingIndents = 1;
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c != 32 && $readingIndents) {
                $readingIndents = 0;
                var$6 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$6);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$6, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$6);
            } else if (!$readingIndents) {
                var$6 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$6);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$6, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$6);
            }
            $i = $i + 1 | 0;
        }
        return $rString;
    }
    function tj_Parser_parse($this) {
        var $parents, $lines, var$3, var$4, $expression, $commentStmt, $declaration, $varName, $columnVar, $varType, $varValue, $expressionType, $dec, $parent, $condition, $columnIC, $boolExpression, $parentE, $conditionE, $columnE, $boolExpressionE, $forVarName, $forListName, $forCondition, $forIncrementVar, $forIncrementVal, $columnFC, $columnFIV, $forConditionExpression, $forIncrementExpression, $whileCondition, $columnW, $whileBoolExpression, $returnVal, $hasReturn, $columnRe, $returnExpression, $returnStmt,
        $returnStmt2, $addVarName, $addChange, $columnA, $addExpression, $addStmt, $subtractVarName, $subtractChange, $columnS, $subtractExpression, $subtractStmt, $multiplyVarName, $multiplyChange, $columnM, $multiplyExpression, $multiplyStmt, $divideVarName, $divideChange, $columnD, $divideExpression, $divideStmt, $functionName, $functionArgs, $forLoop, $arguments, $i, $argName, $argumentsArr, $removeAllVarName, $removeAllValue, $columnRAll, $removeAllExpression, $removeAllStmt, $removeVarName, $removeValue,
        $columnR, $removeValExpression, $removeStmt, $removeAtVarName, $removeAtLocation, $columnRA, $removeAtExpression, $removeAtStmt, $assignment, $columnVarA, $expressionA, $assignmentStmt, $functionCallName, $functionArgExpressions, $words, $arg, $argType, $columnArg, $printStmt, $functionCallStmt, $showMsgBoxStmt, $columnC;
        $parents = ju_ArrayList__init_();
        ju_ArrayList_add($parents, $this.$classStmt);
        $lines = (jl_String_split($this.$source, $rt_s(41))).data;
        var$3 = $lines.length;
        var$4 = 0;
        while (var$4 < var$3) {
            a: {
                $expression = tj_Parser_removeIndents($this, $lines[var$4]);
                $this.$lineNumber1 = $this.$lineNumber1 + 1 | 0;
                if (!jl_String_isEmpty(jl_String_trim($expression))) {
                    if (jl_String_startsWith0($expression, $rt_s(42))) {
                        $commentStmt = tj_CommentStmt__init_($this.$lineNumber1, $expression);
                        tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $commentStmt);
                    } else {
                        b: {
                            $declaration = (jl_String_split($expression, $rt_s(43))).data;
                            $varName = $declaration[0];
                            $columnVar = (-1);
                            switch (jl_String_hashCode($varName)) {
                                case -2060248300:
                                    if (!jl_String_equals($varName, $rt_s(44)))
                                        break b;
                                    $columnVar = 9;
                                    break b;
                                case -1331463047:
                                    if (!jl_String_equals($varName, $rt_s(45)))
                                        break b;
                                    $columnVar = 11;
                                    break b;
                                case -934610812:
                                    if (!jl_String_equals($varName, $rt_s(46)))
                                        break b;
                                    $columnVar = 14;
                                    break b;
                                case -934396624:
                                    if (!jl_String_equals($varName, $rt_s(47)))
                                        break b;
                                    $columnVar = 6;
                                    break b;
                                case -512823337:
                                    if (!jl_String_equals($varName, $rt_s(48)))
                                        break b;
                                    $columnVar = 15;
                                    break b;
                                case 125:
                                    if (!jl_String_equals($varName, $rt_s(9)))
                                        break b;
                                    $columnVar = 1;
                                    break b;
                                case 3357:
                                    if (!jl_String_equals($varName, $rt_s(49)))
                                        break b;
                                    $columnVar = 2;
                                    break b;
                                case 96417:
                                    if (!jl_String_equals($varName, $rt_s(50)))
                                        break b;
                                    $columnVar = 8;
                                    break b;
                                case 101577:
                                    if (!jl_String_equals($varName, $rt_s(51)))
                                        break b;
                                    $columnVar = 4;
                                    break b;
                                case 107035:
                                    if (!jl_String_equals($varName, $rt_s(52)))
                                        break b;
                                    $columnVar = 0;
                                    break b;
                                case 113101617:
                                    if (!jl_String_equals($varName, $rt_s(53)))
                                        break b;
                                    $columnVar = 5;
                                    break b;
                                case 118556470:
                                    if (!jl_String_equals($varName, $rt_s(54)))
                                        break b;
                                    $columnVar = 3;
                                    break b;
                                case 653829668:
                                    if (!jl_String_equals($varName, $rt_s(55)))
                                        break b;
                                    $columnVar = 10;
                                    break b;
                                case 1098475774:
                                    if (!jl_String_equals($varName, $rt_s(56)))
                                        break b;
                                    $columnVar = 7;
                                    break b;
                                case 1282345597:
                                    if (!jl_String_equals($varName, $rt_s(57)))
                                        break b;
                                    $columnVar = 13;
                                    break b;
                                case 1380938712:
                                    if (!jl_String_equals($varName, $rt_s(58)))
                                        break b;
                                    $columnVar = 12;
                                    break b;
                                default:
                            }
                        }
                        switch ($columnVar) {
                            case 0:
                                c: {
                                    $declaration = (tj_Parser_parseDeclaration($this, $expression)).data;
                                    $varName = $declaration[0];
                                    $varType = tj_Parser_getType($this, $declaration[1]);
                                    $varValue = $declaration[2];
                                    $expressionType = jl_System_out();
                                    $dec = jl_StringBuilder__init_();
                                    jl_StringBuilder_append(jl_StringBuilder_append($dec, $rt_s(59)), $varValue);
                                    ji_PrintStream_println($expressionType, jl_StringBuilder_toString($dec));
                                    tj_Expression$ExpressionReturnType_$callClinit();
                                    $expressionType = tj_Expression$ExpressionReturnType_STRING;
                                    tj_Parser$1_$callClinit();
                                    switch (tj_Parser$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($varType)]) {
                                        case 1:
                                            $expressionType = tj_Expression$ExpressionReturnType_STRING;
                                            break c;
                                        case 2:
                                            $expressionType = tj_Expression$ExpressionReturnType_INT;
                                            break c;
                                        case 3:
                                            $expressionType = tj_Expression$ExpressionReturnType_FLOAT;
                                            break c;
                                        case 4:
                                            $expressionType = tj_Expression$ExpressionReturnType_BOOL;
                                            break c;
                                        case 5:
                                            $expressionType = tj_Expression$ExpressionReturnType_INTLIST;
                                            break c;
                                        case 6:
                                            $expressionType = tj_Expression$ExpressionReturnType_FLOATLIST;
                                            break c;
                                        case 7:
                                            $expressionType = tj_Expression$ExpressionReturnType_STRINGLIST;
                                            break c;
                                        case 8:
                                            $expressionType = tj_Expression$ExpressionReturnType_BOOLEANLIST;
                                            break c;
                                        default:
                                    }
                                }
                                $columnVar = jl_String_indexOf1($expression, $varValue);
                                $expression = tj_Expression__init_($varValue, $expressionType, $this.$lineNumber1, $columnVar);
                                $dec = tj_DeclarationStmt__init_($this.$lineNumber1, $varName, $varType, $expression);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $dec);
                                break a;
                            case 1:
                                $parent = ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0);
                                $columnVar = $declaration.length;
                                if ($columnVar > 2 && jl_String_equals($declaration[1], $rt_s(60)) && jl_String_equals($declaration[2], $rt_s(49))) {
                                    ju_ArrayList_remove($parents, ju_ArrayList_size($parents) - 1 | 0);
                                    tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $parent);
                                    $condition = tj_Parser_parseElseIf($this, $expression, $rt_s(49));
                                    $columnIC = jl_String_indexOf1($expression, $condition);
                                    $boolExpression = new tj_Expression;
                                    tj_Expression$ExpressionReturnType_$callClinit();
                                    tj_Expression__init_0($boolExpression, $condition, tj_Expression$ExpressionReturnType_BOOL, $this.$lineNumber1, $columnIC);
                                    ju_ArrayList_add($parents, tj_ElseIfStmt__init_($this.$lineNumber1, $boolExpression));
                                    break a;
                                }
                                if ($columnVar > 1 && jl_String_equals($declaration[1], $rt_s(60))) {
                                    ju_ArrayList_remove($parents, ju_ArrayList_size($parents) - 1 | 0);
                                    tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $parent);
                                    ju_ArrayList_add($parents, tj_ElseStmt__init_($this.$lineNumber1));
                                    break a;
                                }
                                ju_ArrayList_remove($parents, ju_ArrayList_size($parents) - 1 | 0);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $parent);
                                break a;
                            case 2:
                                break;
                            case 3:
                                $parentE = ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0);
                                ju_ArrayList_remove($parents, ju_ArrayList_size($parents) - 1 | 0);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $parentE);
                                if ($declaration.length > 1 && jl_String_equals($declaration[1], $rt_s(49))) {
                                    $conditionE = tj_Parser_parseElseIf($this, $expression, $rt_s(49));
                                    $columnE = jl_String_indexOf1($expression, $conditionE);
                                    $boolExpressionE = new tj_Expression;
                                    tj_Expression$ExpressionReturnType_$callClinit();
                                    tj_Expression__init_0($boolExpressionE, $conditionE, tj_Expression$ExpressionReturnType_BOOL, $this.$lineNumber1, $columnE);
                                    ju_ArrayList_add($parents, tj_ElseIfStmt__init_($this.$lineNumber1, $boolExpressionE));
                                    break a;
                                }
                                ju_ArrayList_add($parents, tj_ElseStmt__init_($this.$lineNumber1));
                                break a;
                            case 4:
                                if (!jl_String_equals($declaration[1], $rt_s(61))) {
                                    if (!jl_String_equals($declaration[1], $rt_s(62)))
                                        break a;
                                    $declaration = (tj_Parser_parseForEach($this, $expression)).data;
                                    $forVarName = $declaration[0];
                                    $forListName = $declaration[1];
                                    ju_ArrayList_add($parents, tj_ForEachStmt__init_($this.$lineNumber1, $forVarName, $forListName));
                                    break a;
                                }
                                $declaration = (tj_Parser_parseForWhen($this, $expression)).data;
                                $forCondition = $declaration[0];
                                $forIncrementVar = $declaration[2];
                                $forIncrementVal = $declaration[1];
                                $varName = jl_System_out();
                                $varType = jl_StringBuilder__init_();
                                jl_StringBuilder_append(jl_StringBuilder_append($varType, $rt_s(63)), $forCondition);
                                ji_PrintStream_println($varName, jl_StringBuilder_toString($varType));
                                $columnFC = jl_String_indexOf1($expression, $forCondition);
                                $columnFIV = jl_String_indexOf1($expression, $forIncrementVal);
                                $forConditionExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($forConditionExpression, $forCondition, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber1, $columnFC);
                                $forIncrementExpression = tj_Expression__init_($forIncrementVal, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber1, $columnFIV);
                                ju_ArrayList_add($parents, tj_ForWhenStmt__init_($this.$lineNumber1, $forConditionExpression, $forIncrementExpression, $forIncrementVar));
                                break a;
                            case 5:
                                $whileCondition = tj_Parser_parseLoop($this, $expression, $rt_s(53));
                                $columnW = jl_String_indexOf1($expression, $whileCondition);
                                $whileBoolExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($whileBoolExpression, $whileCondition, tj_Expression$ExpressionReturnType_BOOL, $this.$lineNumber1, $columnW);
                                ju_ArrayList_add($parents, tj_WhileStmt__init_($this.$lineNumber1, $whileBoolExpression));
                                break a;
                            case 6:
                                $returnVal = tj_Parser_parseReturn($this, $expression);
                                $hasReturn = $returnVal === $rt_s(10) ? 0 : 1;
                                $columnRe = jl_String_indexOf1($expression, $returnVal);
                                $returnExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($returnExpression, $returnVal, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber1, $columnRe);
                                $returnStmt = tj_ReturnStmt__init_($this.$lineNumber1, $returnExpression, $hasReturn);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $returnStmt);
                                break a;
                            case 7:
                                $returnStmt2 = new tj_ReturnStmt;
                                $columnIC = $this.$lineNumber1;
                                $varType = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($varType, $rt_s(10), tj_Expression$ExpressionReturnType_STRING, $columnIC, 0);
                                tj_ReturnStmt__init_0($returnStmt2, $columnIC, $varType, 0);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $returnStmt2);
                                break a;
                            case 8:
                                $declaration = (tj_Parser_parseMutationAS($this, $expression, $rt_s(50))).data;
                                $addVarName = $declaration[0];
                                $addChange = $declaration[1];
                                $columnA = jl_String_indexOf1($expression, $addChange);
                                $addExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($addExpression, $addChange, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber1, $columnA);
                                $addStmt = new tj_MutationStmt;
                                $columnVar = $this.$lineNumber1;
                                tj_Statements$MutationType_$callClinit();
                                tj_MutationStmt__init_($addStmt, $columnVar, $addVarName, $addExpression, tj_Statements$MutationType_ADD);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $addStmt);
                                break a;
                            case 9:
                                $declaration = (tj_Parser_parseMutationAS($this, $expression, $rt_s(44))).data;
                                $subtractVarName = $declaration[0];
                                $subtractChange = $declaration[1];
                                $columnS = jl_String_indexOf1($expression, $subtractChange);
                                $subtractExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($subtractExpression, $subtractChange, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber1, $columnS);
                                $subtractStmt = new tj_MutationStmt;
                                $columnVar = $this.$lineNumber1;
                                tj_Statements$MutationType_$callClinit();
                                tj_MutationStmt__init_($subtractStmt, $columnVar, $subtractVarName, $subtractExpression, tj_Statements$MutationType_SUBTRACT);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $subtractStmt);
                                break a;
                            case 10:
                                $declaration = (tj_Parser_parseMutationMD($this, $expression, $rt_s(55))).data;
                                $multiplyVarName = $declaration[1];
                                $multiplyChange = $declaration[0];
                                $columnM = jl_String_indexOf1($expression, $multiplyChange);
                                $multiplyExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($multiplyExpression, $multiplyChange, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber1, $columnM);
                                $multiplyStmt = new tj_MutationStmt;
                                $columnVar = $this.$lineNumber1;
                                tj_Statements$MutationType_$callClinit();
                                tj_MutationStmt__init_($multiplyStmt, $columnVar, $multiplyVarName, $multiplyExpression, tj_Statements$MutationType_MULTIPLY);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $multiplyStmt);
                                break a;
                            case 11:
                                $declaration = (tj_Parser_parseMutationMD($this, $expression, $rt_s(45))).data;
                                $divideVarName = $declaration[1];
                                $divideChange = $declaration[0];
                                $columnD = jl_String_indexOf1($expression, $divideChange);
                                $divideExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($divideExpression, $divideChange, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber1, $columnD);
                                $divideStmt = new tj_MutationStmt;
                                $columnVar = $this.$lineNumber1;
                                tj_Statements$MutationType_$callClinit();
                                tj_MutationStmt__init_($divideStmt, $columnVar, $divideVarName, $divideExpression, tj_Statements$MutationType_DIVIDE);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $divideStmt);
                                break a;
                            case 12:
                                $declaration = (tj_Parser_parseFunction($this, $expression)).data;
                                $functionName = $declaration[0];
                                $functionArgs = jl_String_split($declaration[1], $rt_s(64));
                                $forLoop = $functionArgs.data;
                                if ($forLoop.length == 1 && jl_String_equals($forLoop[0], $rt_s(10)))
                                    $functionArgs = $rt_createArray(jl_String, 0);
                                $arguments = ju_ArrayList__init_();
                                $i = 0;
                                while (true) {
                                    $forLoop = $functionArgs.data;
                                    if ($i >= $forLoop.length)
                                        break;
                                    if (!jl_String_isEmpty($forLoop[$i])) {
                                        $forLoop = (jl_String_split($forLoop[$i], $rt_s(65))).data;
                                        if ($forLoop.length != 2) {
                                            $parents = new jl_RuntimeException;
                                            $varName = $declaration[1];
                                            $columnVar = $this.$lineNumber1;
                                            $varType = jl_StringBuilder__init_();
                                            jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($varType, $rt_s(66)), $varName), $rt_s(67)), $columnVar);
                                            jl_RuntimeException__init_2($parents, jl_StringBuilder_toString($varType));
                                            $rt_throw($parents);
                                        }
                                        $argName = $forLoop[1];
                                        ju_ArrayList_add($arguments, tj_Argument__init_(tj_Parser_getType($this, $forLoop[0]), $argName));
                                    }
                                    $i = $i + 1 | 0;
                                }
                                $argumentsArr = ju_AbstractCollection_toArray($arguments, $rt_createArray(tj_Argument, ju_ArrayList_size($arguments)));
                                ju_ArrayList_add($parents, tj_FunctionStmt__init_($this.$lineNumber1, $functionName, $argumentsArr));
                                break a;
                            case 13:
                                $declaration = (tj_Parser_parseRemoveFrom($this, $expression, $rt_s(57))).data;
                                $removeAllVarName = $declaration[0];
                                $removeAllValue = $declaration[1];
                                $columnRAll = jl_String_indexOf1($expression, $removeAllValue);
                                $removeAllExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($removeAllExpression, $removeAllValue, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber1, $columnRAll);
                                $removeAllStmt = tj_RemoveAllFromStmt__init_($this.$lineNumber1, $removeAllVarName, $removeAllExpression);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $removeAllStmt);
                                break a;
                            case 14:
                                $declaration = (tj_Parser_parseRemoveFrom($this, $expression, $rt_s(46))).data;
                                $removeVarName = $declaration[0];
                                $removeValue = $declaration[1];
                                $columnR = jl_String_indexOf1($expression, $removeValue);
                                $removeValExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($removeValExpression, $removeValue, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber1, $columnR);
                                $removeStmt = tj_RemoveFromStmt__init_($this.$lineNumber1, $removeValExpression, $removeVarName);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $removeStmt);
                                break a;
                            case 15:
                                $declaration = (tj_Parser_parseRemoveAt($this, $expression)).data;
                                $removeAtVarName = $declaration[0];
                                $removeAtLocation = $declaration[1];
                                $columnRA = jl_String_indexOf1($expression, $removeAtLocation);
                                $removeAtExpression = new tj_Expression;
                                tj_Expression$ExpressionReturnType_$callClinit();
                                tj_Expression__init_0($removeAtExpression, $removeAtLocation, tj_Expression$ExpressionReturnType_NUMBER, $this.$lineNumber1, $columnRA);
                                $removeAtStmt = tj_RemoveAtStmt__init_($this.$lineNumber1, $removeAtExpression, $removeAtVarName);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $removeAtStmt);
                                break a;
                            default:
                                if (ju_AbstractCollection_contains($this.$variableNames, $declaration[0]) && !(!jl_String_equals(tj_Parser_nextWord($this, $expression, jl_String_length($declaration[0]) + 1 | 0), $rt_s(68)) && !jl_String_equals(tj_Parser_nextWord($this, $expression, jl_String_length($declaration[0]) + 1 | 0), $rt_s(69)))) {
                                    $assignment = tj_Parser_parseAssignment($this, $expression, $declaration[0]);
                                    $columnVarA = jl_String_indexOf1($expression, $assignment);
                                    $expressionA = new tj_Expression;
                                    tj_Expression$ExpressionReturnType_$callClinit();
                                    tj_Expression__init_0($expressionA, $assignment, tj_Expression$ExpressionReturnType_STRING, $this.$lineNumber1, $columnVarA);
                                    $assignmentStmt = tj_AssignmentStmt__init_($this.$lineNumber1, $declaration[0], $expressionA);
                                    tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $assignmentStmt);
                                    break a;
                                }
                                if (!tj_Parser_possibleFunctionName($this, $declaration[0])) {
                                    tj_Error_UnexpectedStmt($expression, $this.$lineNumber1);
                                    break a;
                                }
                                $declaration = (tj_Parser_parseFunctionCall($this, $expression)).data;
                                $functionCallName = $declaration[0];
                                $forLoop = (jl_String_split($declaration[1], $rt_s(64))).data;
                                $columnVar = $forLoop.length;
                                $functionArgExpressions = $rt_createArray(tj_Expression, $columnVar);
                                $words = $functionArgExpressions.data;
                                $i = 0;
                                while ($i < $columnVar) {
                                    if (!jl_String_isEmpty($forLoop[$i])) {
                                        $arg = $forLoop[$i];
                                        tj_Expression$ExpressionReturnType_$callClinit();
                                        $argType = tj_Expression$ExpressionReturnType_STRING;
                                        $columnArg = jl_String_indexOf1($expression, $arg);
                                        $words[$i] = tj_Expression__init_($arg, $argType, $this.$lineNumber1, $columnArg);
                                    }
                                    $i = $i + 1 | 0;
                                }
                                if (jl_String_equals($functionCallName, $rt_s(70))) {
                                    $columnVar = $words.length;
                                    if ($columnVar != 1)
                                        tj_Error_ArgumentLengthMismatch($rt_s(70), $this.$lineNumber1, 1, $columnVar);
                                    if (jl_String_equals($declaration[1], $rt_s(10)))
                                        tj_Error_ArgumentLengthMismatch($rt_s(70), $this.$lineNumber1, 1, 0);
                                    $printStmt = tj_PrintStmt__init_($this.$lineNumber1, $words[0]);
                                    tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $printStmt);
                                    break a;
                                }
                                if (!jl_String_equals($functionCallName, $rt_s(71))) {
                                    $functionCallStmt = tj_CallStmt__init_($this.$lineNumber1, $functionCallName, $functionArgExpressions);
                                    tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $functionCallStmt);
                                    break a;
                                }
                                $columnVar = $words.length;
                                if ($columnVar != 1)
                                    tj_Error_ArgumentLengthMismatch($rt_s(71), $this.$lineNumber1, 1, $columnVar);
                                if (jl_String_equals($declaration[1], $rt_s(10)))
                                    tj_Error_ArgumentLengthMismatch($rt_s(71), $this.$lineNumber1, 1, 0);
                                $showMsgBoxStmt = tj_ShowMsgBoxStmt__init_($this.$lineNumber1, $words[0]);
                                tj_Statements_addStatement(ju_ArrayList_get($parents, ju_ArrayList_size($parents) - 1 | 0), $showMsgBoxStmt);
                                break a;
                        }
                        $condition = tj_Parser_parseLoop($this, $expression, $rt_s(49));
                        $columnC = jl_String_indexOf1($expression, $condition);
                        $boolExpression = new tj_Expression;
                        tj_Expression$ExpressionReturnType_$callClinit();
                        tj_Expression__init_0($boolExpression, $condition, tj_Expression$ExpressionReturnType_BOOL, $this.$lineNumber1, $columnC);
                        ju_ArrayList_add($parents, tj_IfStmt__init_($this.$lineNumber1, $boolExpression));
                    }
                }
            }
            var$4 = var$4 + 1 | 0;
        }
        return ju_ArrayList_get($parents, 0);
    }
    function tj_Parser_parseRemoveFrom($this, $line, $type) {
        var $i, $readingId, $readingValue, $readingVar, $readingString, $readPeriod, $rString, $varName, $value, $c, $hasNext, var$14, var$15;
        $i = 0;
        $readingId = 1;
        $readingValue = 0;
        $readingVar = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(10);
        $varName = $rt_s(10);
        $value = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$14 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$14);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$14, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$14);
            } else if ($c == 32 && !$readingString) {
                if (jl_String_equals($rString, $type) && $readingId) {
                    $readingId = 0;
                    $readingValue = 1;
                    $rString = $rt_s(10);
                } else if ($readingValue && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(72))) {
                    $readingValue = 0;
                    $readingVar = 1;
                    $value = $rString;
                    $rString = $rt_s(10);
                } else if (jl_String_equals($varName, $rt_s(10)) && $readingVar && jl_String_equals($rString, $rt_s(72)))
                    $rString = $rt_s(10);
                else {
                    var$15 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$15);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$15);
                }
            } else if ($c == 46 && !$readingString && !$hasNext) {
                $readPeriod = 1;
                $varName = $rString;
                $rString = $rt_s(10);
            } else {
                var$14 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$14);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$14, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$14);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber1);
        return $rt_createArrayFromData(jl_String, [$varName, $value]);
    }
    function tj_Parser_parseRemoveAt($this, $line) {
        var $i, $readingId, $readingLocation, $readingVar, $readingString, $readPeriod, $rString, $varName, $location, $c, $hasNext, var$13;
        $i = 0;
        $readingId = 1;
        $readingLocation = 0;
        $readingVar = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(10);
        $varName = $rt_s(10);
        $location = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$13 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$13);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$13, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$13);
            } else if ($c == 32 && !$readingString) {
                if (jl_String_equals($rString, $rt_s(48)) && $readingId) {
                    $readingId = 0;
                    $readingVar = 1;
                    $rString = $rt_s(10);
                } else if ($readingVar && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(73))) {
                    $readingVar = 0;
                    $readingLocation = 1;
                    $varName = $rString;
                    $rString = $rt_s(10);
                } else if (jl_String_equals($location, $rt_s(10)) && $readingLocation && jl_String_equals($rString, $rt_s(73)))
                    $rString = $rt_s(10);
                else {
                    var$13 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$13);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$13, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$13);
                }
            } else if ($c == 46 && !$readingString && !$hasNext) {
                $readPeriod = 1;
                $location = $rString;
                $rString = $rt_s(10);
            } else {
                var$13 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$13);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$13, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$13);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber1);
        return $rt_createArrayFromData(jl_String, [$varName, $location]);
    }
    function tj_Parser_possibleFunctionName($this, $name) {
        var $functionName;
        if (!jl_String_contains($name, $rt_s(74)))
            return 0;
        $functionName = (jl_String_split($name, $rt_s(75))).data[0];
        if (!ju_AbstractCollection_contains($this.$variableNames, $functionName) && !jl_String_contains($functionName, $rt_s(43)) && jl_String_length($functionName))
            return 1;
        return 0;
    }
    function tj_Parser_parseForEach($this, $line) {
        var $i, $readingId, $readingEach, $readingVar, $readingList, $readingString, $rString, $varName, $listName, $c, var$12;
        $i = 0;
        $readingId = 1;
        $readingEach = 0;
        $readingVar = 0;
        $readingList = 0;
        $readingString = 0;
        $rString = $rt_s(10);
        $varName = $rt_s(10);
        $listName = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$12, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$12);
            } else if ($c == 32 && !$readingString) {
                if ($readingId && jl_String_equals($rString, $rt_s(51))) {
                    $readingId = 0;
                    $readingEach = 1;
                    $rString = $rt_s(10);
                } else if ($readingEach && jl_String_equals($rString, $rt_s(62))) {
                    $readingEach = 0;
                    $readingVar = 1;
                    $rString = $rt_s(10);
                } else if ($readingVar) {
                    $readingVar = 0;
                    $varName = $rString;
                    $rString = $rt_s(10);
                } else if (jl_String_equals($rString, $rt_s(76)) && !$readingList) {
                    $readingList = 1;
                    $rString = $rt_s(10);
                } else if ($readingList) {
                    $readingList = 0;
                    $listName = $rString;
                    $rString = $rt_s(10);
                } else {
                    var$12 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$12);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$12, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$12);
                }
            } else if ($c == 123 && !$readingString && jl_String_equals($listName, $rt_s(10))) {
                $listName = $rString;
                $rString = $rt_s(10);
            } else {
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$12, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$12);
            }
            $i = $i + 1 | 0;
        }
        return $rt_createArrayFromData(jl_String, [$varName, $listName]);
    }
    function tj_Parser_parseForWhen($this, $line) {
        var $i, $readingId, $readingWhen, $readingCondition, $readingIncrementVar, $readingIncrementVal, $readingString, $readingExpression, $parenCount, $rString, $condition, $increment, $incrementVar, $c, var$16, var$17, var$18;
        $i = 0;
        $readingId = 1;
        $readingWhen = 0;
        $readingCondition = 0;
        $readingIncrementVar = 0;
        $readingIncrementVal = 0;
        $readingString = 0;
        $readingExpression = 0;
        $parenCount = 0;
        $rString = $rt_s(10);
        $condition = $rt_s(10);
        $increment = $rt_s(10);
        $incrementVar = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$16 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$16);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$16);
            } else if (!$readingString && $c == 40) {
                $parenCount = $parenCount + 1 | 0;
                $readingExpression = 1;
                var$16 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$16);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$16);
            } else if (!$readingString && $c == 41) {
                $parenCount = $parenCount + (-1) | 0;
                if ($parenCount) {
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                } else {
                    $readingExpression = 0;
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                }
            } else if ($readingExpression) {
                var$16 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$16);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$16);
            } else {
                var$17 = $rt_compare($c, 32);
                if (!var$17 && !$readingString && !$readingExpression) {
                    if ($readingId && jl_String_equals($rString, $rt_s(51))) {
                        $readingId = 0;
                        $readingWhen = 1;
                        $rString = $rt_s(10);
                    } else if ($readingWhen && jl_String_equals($rString, $rt_s(61))) {
                        $readingWhen = 0;
                        $readingCondition = 1;
                        $rString = $rt_s(10);
                    } else if ($readingCondition && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(77))) {
                        $readingCondition = 0;
                        $condition = $rString;
                        $rString = $rt_s(10);
                    } else if (jl_String_equals($rString, $rt_s(77))) {
                        $readingIncrementVar = 1;
                        $rString = $rt_s(10);
                    } else if ($readingIncrementVar && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(78))) {
                        $readingIncrementVar = 0;
                        $readingIncrementVal = 1;
                        $i = $i + 3 | 0;
                        $incrementVar = $rString;
                        $rString = $rt_s(10);
                    } else if ($readingIncrementVal) {
                        $readingIncrementVal = 0;
                        $increment = $rString;
                        $rString = $rt_s(10);
                    } else {
                        var$16 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$16);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                        $rString = jl_AbstractStringBuilder_toString(var$16);
                    }
                } else if ($c == 123 && !$readingString && jl_String_equals($increment, $rt_s(10)) && !$readingExpression) {
                    $increment = $rString;
                    $rString = $rt_s(10);
                } else if (!var$17 && $readingExpression) {
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                } else {
                    var$18 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$18);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$18, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$18);
                }
            }
            $i = $i + 1 | 0;
        }
        return $rt_createArrayFromData(jl_String, [$condition, $increment, $incrementVar]);
    }
    function tj_Parser_parseElseIf($this, $line, $id) {
        var $i, $readingBracket, $readingElse, $readingId, $readingCondition, $rString, $condition, $c, var$11;
        $i = 0;
        $readingBracket = 1;
        $readingElse = 0;
        $readingId = 0;
        $readingCondition = 0;
        $rString = $rt_s(10);
        $condition = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 32 && !$readingCondition) {
                if (jl_String_equals($rString, $rt_s(9)) && $readingBracket) {
                    $readingBracket = 0;
                    $readingElse = 1;
                    $rString = $rt_s(10);
                } else if (jl_String_equals($rString, $rt_s(60)) && $readingElse) {
                    $readingElse = 0;
                    $readingId = 1;
                    $rString = $rt_s(10);
                } else if ($readingId && jl_String_equals($rString, $id)) {
                    $readingId = 0;
                    $readingCondition = 1;
                    $rString = $rt_s(10);
                } else if ($readingBracket && jl_String_equals($rString, $rt_s(54))) {
                    $readingBracket = 0;
                    $readingId = 1;
                    $rString = $rt_s(10);
                }
            } else if ($c != 123) {
                var$11 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$11);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$11, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$11);
            } else {
                $condition = jl_String_charAt($rString, jl_String_length($rString) - 1 | 0) != 32 ? $rString : jl_String_substring($rString, 0, jl_String_length($rString) - 1 | 0);
                $rString = $rt_s(10);
            }
            $i = $i + 1 | 0;
        }
        return $condition;
    }
    function tj_Parser_parseAssignment($this, $line, $varName) {
        var $i, $readingName, $readingValue, $readingString, $readPeriod, $rString, $varValue, $c, $hasNext;
        $i = 0;
        $readingName = 1;
        $readingValue = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(10);
        $varValue = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                $varName = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($varName);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append($varName, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString($varName);
            } else if ($c == 32 && !$readingString) {
                if ($readingName) {
                    $readingName = 0;
                    $rString = $rt_s(10);
                } else if (!$readingName && !$readingValue && !(!jl_String_equals($rString, $rt_s(69)) && !jl_String_equals($rString, $rt_s(68)))) {
                    $readingValue = 1;
                    $rString = $rt_s(10);
                } else {
                    $varName = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($varName);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($varName, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString($varName);
                }
            } else if ($c == 46 && !$readingString && $readingValue && !$hasNext) {
                $readingValue = 0;
                $readPeriod = 1;
                $varValue = $rString;
                $rString = $rt_s(10);
            } else {
                $varName = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($varName);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append($varName, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString($varName);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber1);
        return $varValue;
    }
    function tj_Parser_parseFunctionCall($this, $line) {
        var $i, $readingName, $readingString, $readPeriod, $rString, $functionName, $args, $functionDepth, $c, var$11, var$12, var$13, var$14;
        $i = 0;
        $readingName = 1;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(10);
        $functionName = $rt_s(10);
        $args = $rt_s(10);
        $functionDepth = 0;
        while ($i < jl_String_length($line)) {
            a: {
                $c = jl_String_charAt($line, $i);
                if ($c == 34) {
                    $readingString = $readingString ? 0 : 1;
                    var$11 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$11);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$11, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$11);
                    break a;
                }
                var$12 = $rt_compare($c, 32);
                if (!var$12 && !$readingString) {
                    if ($readingName) {
                        $readingName = 0;
                        $functionName = $rString;
                        $rString = $rt_s(10);
                        break a;
                    }
                    var$11 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$11);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$11, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$11);
                    break a;
                }
                if ($readingName && $c == 40) {
                    $functionDepth = $functionDepth + 1 | 0;
                    $readingName = 0;
                    $functionName = $rString;
                    $rString = $rt_s(10);
                    break a;
                }
                var$13 = $rt_compare($c, 40);
                if (!var$13 && !$readingString) {
                    $functionDepth = $functionDepth + 1 | 0;
                    var$11 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$11);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$11, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$11);
                    break a;
                }
                if ($c == 44) {
                    var$11 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$11);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$11, $args), $rString), 44);
                    $args = jl_AbstractStringBuilder_toString(var$11);
                    $rString = $rt_s(10);
                    break a;
                }
                var$14 = $rt_compare($c, 41);
                if (!var$14) {
                    $functionDepth = $functionDepth + (-1) | 0;
                    if ($functionDepth) {
                        var$11 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$11);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$11, $rString), $c);
                        $rString = jl_AbstractStringBuilder_toString(var$11);
                        break a;
                    }
                    var$11 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$11);
                    jl_StringBuilder_append(jl_StringBuilder_append(var$11, $args), $rString);
                    $args = jl_AbstractStringBuilder_toString(var$11);
                    $rString = $rt_s(10);
                    break a;
                }
                if ($c == 46 && !$readingString) {
                    $readPeriod = 1;
                    break a;
                }
                if (!(!var$12 && !var$13 && !var$14) && !$readingString) {
                    var$11 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$11);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$11, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$11);
                }
                if (!$readingString)
                    break a;
                var$11 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$11);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$11, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$11);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber1);
        return $rt_createArrayFromData(jl_String, [$functionName, $args]);
    }
    function tj_Parser_parseFunction($this, $line) {
        var $i, $readingId, $readingName, $readingArgType, $readingArgName, $rString, $functionName, $args, $argType, $c, var$12, var$13, var$14, var$15;
        $i = 0;
        $readingId = 1;
        $readingName = 0;
        $readingArgType = 0;
        $readingArgName = 0;
        $rString = $rt_s(10);
        $functionName = $rt_s(10);
        $args = $rt_s(10);
        $argType = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            var$12 = $rt_compare($c, 32);
            if (!var$12) {
                if (jl_String_equals($rString, $rt_s(58)) && $readingId) {
                    $readingId = 0;
                    $readingName = 1;
                    $rString = $rt_s(10);
                } else if ($readingName) {
                    $readingName = 0;
                    $readingArgType = 1;
                    $functionName = $rString;
                    $rString = $rt_s(10);
                } else if ($readingArgType) {
                    $readingArgType = 0;
                    $readingArgName = 1;
                    $argType = $rString;
                    $rString = $rt_s(10);
                } else if ($readingArgName && jl_String_contains($rString, $rt_s(64))) {
                    var$13 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$13);
                    $args = jl_StringBuilder_append(jl_StringBuilder_append(var$13, $args), $argType);
                    jl_AbstractStringBuilder_append($args, 58);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($args, $rString), 44);
                    $args = jl_AbstractStringBuilder_toString(var$13);
                    $argType = $rt_s(10);
                    $readingArgType = 1;
                    $readingArgName = 0;
                    $rString = $rt_s(10);
                }
            } else if ($readingName && $c == 40) {
                $readingName = 0;
                $readingArgType = 1;
                $functionName = $rString;
                $rString = $rt_s(10);
            } else {
                var$14 = $rt_compare($c, 41);
                if (!var$14) {
                    if (!jl_String_equals($rString, $rt_s(10))) {
                        var$15 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$15);
                        var$13 = jl_StringBuilder_append(jl_StringBuilder_append(var$15, $args), $argType);
                        jl_AbstractStringBuilder_append(var$13, 58);
                        jl_StringBuilder_append(var$13, $rString);
                        $args = jl_AbstractStringBuilder_toString(var$15);
                    }
                    $readingArgType = 0;
                    $readingArgName = 0;
                    $rString = $rt_s(10);
                } else if (!(!var$12 && $c == 40 && !var$14)) {
                    var$13 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$13);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$13, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$13);
                }
            }
            $i = $i + 1 | 0;
        }
        return $rt_createArrayFromData(jl_String, [$functionName, $args]);
    }
    function tj_Parser_parseMutationAS($this, $line, $type) {
        var $i, $readingType, $readingChange, $readingVar, $readingString, $readPeriod, $id, $rString, $varName, $change, $c, $hasNext, var$15;
        $i = 0;
        $readingType = 1;
        $readingChange = 0;
        $readingVar = 0;
        $readingString = 0;
        $readPeriod = 0;
        $id = $rt_s(79);
        if (jl_String_equals($type, $rt_s(44)))
            $id = $rt_s(72);
        $rString = $rt_s(10);
        $varName = $rt_s(10);
        $change = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$15 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$15);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$15);
            } else if ($c == 32 && !$readingString) {
                if (jl_String_equals($rString, $type) && $readingType) {
                    $readingType = 0;
                    $readingChange = 1;
                    $rString = $rt_s(10);
                } else if ($readingChange && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $id)) {
                    $readingChange = 0;
                    $readingVar = 1;
                    $change = $rString;
                    $rString = $rt_s(10);
                } else if (jl_String_equals($varName, $rt_s(10)) && $readingVar && jl_String_equals($rString, $id))
                    $rString = $rt_s(10);
                else {
                    var$15 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$15);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$15);
                }
            } else if ($c == 46 && !$readingString && !$hasNext) {
                $readPeriod = 1;
                $varName = $rString;
                $rString = $rt_s(10);
            } else {
                var$15 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$15);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$15);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber1);
        return $rt_createArrayFromData(jl_String, [$varName, $change]);
    }
    function tj_Parser_parseMutationMD($this, $line, $type) {
        var $i, $readingType, $readingChange, $readingVar, $readingString, $readPeriod, $rString, $varName, $change, $c, $hasNext, var$14, var$15;
        $i = 0;
        $readingType = 1;
        $readingChange = 0;
        $readingVar = 0;
        $readingString = 0;
        $readPeriod = 0;
        $rString = $rt_s(10);
        $varName = $rt_s(10);
        $change = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 34) {
                $readingString = $readingString ? 0 : 1;
                var$14 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$14);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$14, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$14);
            } else if ($c == 32 && !$readingString) {
                if (jl_String_equals($rString, $type) && $readingType) {
                    $readingType = 0;
                    $readingVar = 1;
                    $rString = $rt_s(10);
                } else if ($readingVar && jl_String_equals(tj_Parser_nextWord($this, $line, $i + 1 | 0), $rt_s(78))) {
                    $readingVar = 0;
                    $readingChange = 1;
                    $change = $rString;
                    $rString = $rt_s(10);
                } else if (jl_String_equals($varName, $rt_s(10)) && $readingChange && jl_String_equals($rString, $rt_s(78)))
                    $rString = $rt_s(10);
                else {
                    var$15 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$15);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$15, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$15);
                }
            } else if ($c == 46 && !$readingString && !$hasNext) {
                $readPeriod = 1;
                $varName = $rString;
                $rString = $rt_s(10);
            } else {
                var$14 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$14);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$14, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$14);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber1);
        return $rt_createArrayFromData(jl_String, [$varName, $change]);
    }
    function tj_Parser_nextWord($this, $line, $i) {
        var $rString, $c, var$5;
        $rString = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 32)
                return $rString;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$5, $rString), $c);
            $rString = jl_AbstractStringBuilder_toString(var$5);
            $i = $i + 1 | 0;
        }
        return $rString;
    }
    function tj_Parser_parseReturn($this, $line) {
        var $i, $readingId, $readPeriod, $rString, $returnVal, $c, $hasNext, var$9;
        $i = 0;
        $readingId = 1;
        $readPeriod = 0;
        $rString = $rt_s(10);
        $returnVal = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            if ($hasNext)
                jl_String_charAt($line, $i + 1 | 0);
            if ($c == 32) {
                if ($readingId && jl_String_equals($rString, $rt_s(47))) {
                    $readingId = 0;
                    $rString = $rt_s(10);
                } else {
                    var$9 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$9);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$9, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$9);
                }
            } else if ($c == 46 && !$hasNext) {
                $readPeriod = 1;
                $returnVal = $rString;
                $rString = $rt_s(10);
            } else {
                var$9 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$9);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$9, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$9);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber1);
        return $returnVal;
    }
    function tj_Parser_parseLoop($this, $line, $id) {
        var $i, $readingId, $readingCondition, $rString, $condition, $c, var$9;
        $i = 0;
        $readingId = 1;
        $readingCondition = 0;
        $rString = $rt_s(10);
        $condition = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            if ($c == 32 && !$readingCondition) {
                if ($readingId && jl_String_equals($rString, $id)) {
                    $readingId = 0;
                    $readingCondition = 1;
                    $rString = $rt_s(10);
                }
            } else if ($c != 123) {
                var$9 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$9);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$9, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$9);
            } else {
                $condition = jl_String_charAt($rString, jl_String_length($rString) - 1 | 0) != 32 ? $rString : jl_String_substring($rString, 0, jl_String_length($rString) - 1 | 0);
                $rString = $rt_s(10);
            }
            $i = $i + 1 | 0;
        }
        return $condition;
    }
    function tj_Parser_parseDeclaration($this, $line) {
        var $i, $readingId, $readingType, $readingName, $readingValue, $readingString, $readPeriod, $varName, $varType, $varValue, $rString, $c, $hasNext, $nextChar, var$16, var$17, var$18, var$19;
        $i = 0;
        $readingId = 1;
        $readingType = 0;
        $readingName = 0;
        $readingValue = 0;
        $readingString = 0;
        $readPeriod = 0;
        $varName = $rt_s(10);
        $varType = $rt_s(10);
        $varValue = $rt_s(10);
        $rString = $rt_s(10);
        while ($i < jl_String_length($line)) {
            $c = jl_String_charAt($line, $i);
            $hasNext = $i >= (jl_String_length($line) - 1 | 0) ? 0 : 1;
            $nextChar = 32;
            if ($hasNext)
                $nextChar = jl_String_charAt($line, $i + 1 | 0);
            if ($c == 32 && !$readingValue) {
                if ($readingId && jl_String_equals($rString, $rt_s(52))) {
                    $readingId = 0;
                    $readingType = 1;
                    $rString = $rt_s(10);
                } else if ($readingType) {
                    $readingType = 0;
                    $readingName = 1;
                    $varType = $rString;
                    $rString = $rt_s(10);
                } else if ($readingName) {
                    $readingName = 0;
                    $varName = $rString;
                    $rString = $rt_s(10);
                } else if (!jl_String_equals($rString, $rt_s(69)) && !jl_String_equals($rString, $rt_s(80))) {
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                } else {
                    $readingValue = 1;
                    $rString = $rt_s(10);
                }
            } else if ($c == 34) {
                if ($readingString) {
                    $readingString = 0;
                    var$16 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$16);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$16);
                } else {
                    $readingString = 1;
                    var$17 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$17);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$17, $rString), $c);
                    $rString = jl_AbstractStringBuilder_toString(var$17);
                }
            } else if ($c == 46 && !$readingString && !($hasNext && $nextChar != 32)) {
                $readPeriod = 1;
                var$16 = $rString;
                $varValue = $rString;
                $rString = var$16;
            } else {
                var$16 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$16);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$16, $rString), $c);
                $rString = jl_AbstractStringBuilder_toString(var$16);
            }
            $i = $i + 1 | 0;
        }
        if (!$readPeriod)
            tj_Error_MissingPeriod($this.$lineNumber1);
        ju_ArrayList_add($this.$variableNames, $varName);
        if (!$readingString)
            return $rt_createArrayFromData(jl_String, [$varName, $varType, $varValue]);
        $i = $this.$lineNumber1;
        $line = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($line);
        jl_StringBuilder_append0(jl_StringBuilder_append($line, $rt_s(81)), $i);
        $line = jl_AbstractStringBuilder_toString($line);
        var$18 = $rt_createArray(jl_String, 2);
        var$19 = var$18.data;
        var$19[0] = $line;
        $line = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($line);
        jl_StringBuilder_append0($line, $i);
        var$19[1] = jl_AbstractStringBuilder_toString($line);
        $rt_globals.addConsoleError(otji_JS_wrap(var$18));
        $line = new jl_RuntimeException;
        var$16 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$16);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$16, $rt_s(81)), $i);
        jl_Throwable__init_0($line, jl_AbstractStringBuilder_toString(var$16));
        $rt_throw($line);
    }
    function tj_Parser_getType($this, $type) {
        var var$2;
        a: {
            var$2 = (-1);
            switch (jl_String_hashCode($type)) {
                case -1808118735:
                    if (!jl_String_equals($type, $rt_s(31)))
                        break a;
                    var$2 = 0;
                    break a;
                case -1383386164:
                    if (!jl_String_equals($type, $rt_s(82)))
                        break a;
                    var$2 = 7;
                    break a;
                case -766441794:
                    if (!jl_String_equals($type, $rt_s(83)))
                        break a;
                    var$2 = 6;
                    break a;
                case 104431:
                    if (!jl_String_equals($type, $rt_s(84)))
                        break a;
                    var$2 = 1;
                    break a;
                case 3029738:
                    if (!jl_String_equals($type, $rt_s(85)))
                        break a;
                    var$2 = 3;
                    break a;
                case 97526364:
                    if (!jl_String_equals($type, $rt_s(86)))
                        break a;
                    var$2 = 2;
                    break a;
                case 100361105:
                    if (!jl_String_equals($type, $rt_s(87)))
                        break a;
                    var$2 = 5;
                    break a;
                case 1859653459:
                    if (!jl_String_equals($type, $rt_s(88)))
                        break a;
                    var$2 = 4;
                    break a;
                default:
            }
        }
        switch (var$2) {
            case 0:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_STRING;
            case 1:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_INT;
            case 2:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_FLOAT;
            case 3:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_BOOLEAN;
            case 4:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_STRINGLIST;
            case 5:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_INTLIST;
            case 6:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_FLOATLIST;
            case 7:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_BOOLEANLIST;
            default:
        }
        return null;
    }
    function tj_Translator() {
        var a = this; jl_Object.call(a);
        a.$lineNumber = 0;
        a.$tabCount = 0;
        a.$javaLines = null;
        a.$javaImports = null;
        a.$javaMain = null;
        a.$publicVarDeclarations = null;
        a.$usedJOptionPane = 0;
        a.$usedList = 0;
        a.$projName = null;
        a.$globalVariables = null;
    }
    function tj_Translator_interpretFunction($this, $statements, $args, $params, $name, $isGlobal, $doTranslate) {
        var $localVariables, $javaPrinter, $funcJavaLine, $arg, $returnVal, $val, $i, var$14, $i_0, $arg_0, var$17, $i_1;
        $localVariables = tj_Variables__init_();
        $javaPrinter = $this.$javaMain;
        if (!$doTranslate)
            $javaPrinter = ju_ArrayList__init_();
        $funcJavaLine = $this.$javaLines.$size0;
        if (!jl_String_equals($name, $rt_s(4)) && $doTranslate) {
            $javaPrinter = $this.$javaLines;
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $arg = tj_Translator_addTabCount($this);
            $returnVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnVal);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($returnVal, $arg), $rt_s(89)), $name), 40);
            $val = jl_AbstractStringBuilder_toString($returnVal);
            $i = 0;
            while (true) {
                var$14 = $args.data;
                $i_0 = var$14.length;
                if ($i >= $i_0)
                    break;
                $arg_0 = var$14[$i];
                var$17 = tj_Translator_typeToString($this, $arg_0.$type0);
                $returnVal = $arg_0.$name10;
                $arg = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($arg);
                $val = jl_StringBuilder_append(jl_StringBuilder_append($arg, $val), var$17);
                jl_AbstractStringBuilder_append($val, 32);
                jl_StringBuilder_append($val, $returnVal);
                $val = jl_AbstractStringBuilder_toString($arg);
                if ($i != ($i_0 - 1 | 0)) {
                    $arg = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($arg);
                    jl_StringBuilder_append(jl_StringBuilder_append($arg, $val), $rt_s(90));
                    $val = jl_AbstractStringBuilder_toString($arg);
                }
                $i = $i + 1 | 0;
            }
            $arg = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($arg);
            jl_StringBuilder_append(jl_StringBuilder_append($arg, $val), $rt_s(91));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($arg));
            $this.$tabCount = $this.$tabCount + 1 | 0;
        }
        a: {
            if ($args !== null && $params !== null) {
                b: {
                    var$14 = $args.data;
                    $params = $params.data;
                    $i_1 = var$14.length;
                    $i = $params.length;
                    if ($i_1 != $i) {
                        tj_Error_ArgumentLengthMismatch($name, $this.$lineNumber, $i_1, $i);
                        $i_0 = 0;
                        while (true) {
                            if ($i_0 >= $i_1)
                                break b;
                            $i_0 = $i_0 + 1 | 0;
                        }
                    }
                }
                $i_0 = 0;
                while (true) {
                    if ($i_0 >= $i)
                        break a;
                    $val = $params[$i_0];
                    $arg = var$14[$i_0];
                    if ($arg.$type0 !== $val.$getType())
                        break;
                    tj_Variables_addVariable($localVariables, $arg.$name10, $arg.$type0, $val, $this.$lineNumber);
                    $i_0 = $i_0 + 1 | 0;
                }
                tj_Error_ArgumentTypeMismatch($name, $this.$lineNumber, $arg.$type0.$name0, $val.$typeString());
                return null;
            }
        }
        $returnVal = tj_Translator_interpretBody($this, $statements, $localVariables, $isGlobal, $javaPrinter);
        if (!jl_String_equals($name, $rt_s(4)) && $doTranslate) {
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $arg = tj_Translator_addTabCount($this);
            $statements = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($statements);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($statements, $arg), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($statements));
        }
        if ($returnVal !== null && !jl_String_equals($name, $rt_s(4)) && $doTranslate) {
            $arg = tj_Translator_addTabCount($this);
            $localVariables = $returnVal.$typeString();
            $statements = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($statements);
            $arg = jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($statements, $arg), $rt_s(92)), $localVariables);
            jl_AbstractStringBuilder_append($arg, 32);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($arg, $name), 40);
            $name = jl_AbstractStringBuilder_toString($statements);
            $i_1 = 0;
            while (true) {
                $params = $args.data;
                $doTranslate = $params.length;
                if ($i_1 >= $doTranslate)
                    break;
                $arg = $params[$i_1];
                $val = tj_Translator_typeToString($this, $arg.$type0);
                $arg = $arg.$name10;
                $statements = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($statements);
                $name = jl_StringBuilder_append(jl_StringBuilder_append($statements, $name), $val);
                jl_AbstractStringBuilder_append($name, 32);
                jl_StringBuilder_append($name, $arg);
                $name = jl_AbstractStringBuilder_toString($statements);
                if ($i_1 != ($doTranslate - 1 | 0)) {
                    $statements = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($statements);
                    jl_StringBuilder_append(jl_StringBuilder_append($statements, $name), $rt_s(90));
                    $name = jl_AbstractStringBuilder_toString($statements);
                }
                $i_1 = $i_1 + 1 | 0;
            }
            $statements = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($statements);
            jl_StringBuilder_append(jl_StringBuilder_append($statements, $name), $rt_s(91));
            $statements = jl_AbstractStringBuilder_toString($statements);
            ju_ArrayList_checkIndex($javaPrinter, $funcJavaLine);
            $javaPrinter.$array.data[$funcJavaLine] = $statements;
        }
        if ($returnVal !== null)
            return $returnVal;
        return null;
    }
    function tj_Translator_interpretBody($this, $statements, $funcVariables, $isGlobal, $javaPrinter) {
        var $pastResult, $localVariables, $returnVal, var$8, $statement, var$10, var$11, var$12, var$13, var$14;
        $pastResult = tj_Result__init_(0);
        $localVariables = tj_Variables__init_0($funcVariables);
        $returnVal = tj_Return__init_(0, null);
        var$8 = ju_AbstractList_iterator($statements);
        while (true) {
            if (!ju_AbstractList$1_hasNext(var$8)) {
                if (!$returnVal.$hasReturn)
                    return null;
                return $returnVal.$value12;
            }
            $statement = ju_AbstractList$1_next(var$8);
            if ($returnVal.$hasReturn)
                break;
            a: {
                $this.$lineNumber = $statement.$getLine();
                tj_Translator$1_$callClinit();
                switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[$statement.$type.$ordinal0]) {
                    case 1:
                        $statement = $statement;
                        $funcVariables = $statement.$name11;
                        $statements = tj_Translator_evalExpression($this, $statement.$value13, $localVariables, $isGlobal);
                        $statement = tj_Translator_translateExpression($this, $statement.$value13, $localVariables, $isGlobal, $javaPrinter);
                        var$10 = tj_Translator_addTabCount($this);
                        var$11 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$11);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$11, var$10), $funcVariables), $rt_s(93)), $statement), 59);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$11));
                        if (tj_Variables_isVariable($localVariables, $funcVariables))
                            tj_Variables_setVariableValue($localVariables, $funcVariables, $statements, $this.$lineNumber);
                        else
                            tj_Variables_setVariableValue($this.$globalVariables, $funcVariables, $statements, $this.$lineNumber);
                        break a;
                    case 2:
                        $statements = $statement;
                        $funcVariables = tj_Translator_addTabCount($this);
                        $statement = $statements.$comment;
                        $statements = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($statements);
                        jl_StringBuilder_append(jl_StringBuilder_append($statements, $funcVariables), $statement);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($statements));
                        break a;
                    case 3:
                        $statements = $statement;
                        $statement = $statements.$name12;
                        var$12 = $statements.$params.data;
                        $statements = tj_Translator_addTabCount($this);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $statement), 40);
                        $statements = jl_AbstractStringBuilder_toString($funcVariables);
                        var$13 = var$12.length;
                        var$14 = 0;
                        while (var$14 < var$13) {
                            $funcVariables = var$12[var$14];
                            if ($funcVariables === null) {
                                $funcVariables = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($funcVariables);
                                jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $rt_s(94));
                                $statements = jl_AbstractStringBuilder_toString($funcVariables);
                            } else {
                                $funcVariables = tj_Translator_translateExpression($this, $funcVariables, $localVariables, $isGlobal, $javaPrinter);
                                $statement = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($statement);
                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($statement, $statements), $funcVariables), $rt_s(90));
                                $statements = jl_AbstractStringBuilder_toString($statement);
                            }
                            var$14 = var$14 + 1 | 0;
                        }
                        $statements = jl_String_substring($statements, 0, jl_String_length($statements) - 2 | 0);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $rt_s(95));
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($funcVariables));
                        break a;
                    case 4:
                        break;
                    case 5:
                        var$10 = $statement.$body;
                        $funcVariables = ju_ArrayList_get($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        $statement = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($statement);
                        jl_StringBuilder_append(jl_StringBuilder_append($statement, $funcVariables), $rt_s(96));
                        $statements = jl_AbstractStringBuilder_toString($statement);
                        ju_ArrayList_remove($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        ju_ArrayList_add($javaPrinter, $statements);
                        $this.$tabCount = $this.$tabCount + 1 | 0;
                        tj_Translator_interpretBody($this, var$10, $localVariables, 0, $javaPrinter);
                        $this.$tabCount = $this.$tabCount - 1 | 0;
                        $statements = tj_Translator_addTabCount($this);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), 125);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($funcVariables));
                        break a;
                    case 6:
                        $statements = $statement;
                        $funcVariables = $statements.$condition;
                        var$10 = $statements.$body;
                        $statements = tj_Translator_translateExpression($this, $funcVariables, $localVariables, $isGlobal, $javaPrinter);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $rt_s(97)), $statements), $rt_s(98));
                        $statement = jl_AbstractStringBuilder_toString($funcVariables);
                        $statements = ju_ArrayList_get($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_StringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), $statement);
                        $statements = jl_AbstractStringBuilder_toString($funcVariables);
                        ju_ArrayList_remove($javaPrinter, $javaPrinter.$size0 - 1 | 0);
                        ju_ArrayList_add($javaPrinter, $statements);
                        $this.$tabCount = $this.$tabCount + 1 | 0;
                        tj_Translator_interpretBody($this, var$10, $localVariables, 0, $javaPrinter);
                        $this.$tabCount = $this.$tabCount - 1 | 0;
                        $statements = tj_Translator_addTabCount($this);
                        $funcVariables = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($funcVariables);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append($funcVariables, $statements), 125);
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($funcVariables));
                        break a;
                    case 7:
                        tj_Translator_evalMutation($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 8:
                        tj_Translator_evalReturn($this, $statement, $localVariables, $returnVal, $isGlobal, $javaPrinter);
                        break a;
                    case 9:
                        tj_Translator_evalFunction($this, $statement, $localVariables, $isGlobal);
                        break a;
                    case 10:
                        tj_Translator_evalIf($this, $statement, $localVariables, $isGlobal, $pastResult, $javaPrinter);
                        break a;
                    case 11:
                        tj_Translator_evalWhile($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 12:
                        tj_Translator_evalForEach($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 13:
                        tj_Translator_evalForWhen($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 14:
                        $statements = tj_Translator_translateExpression($this, $statement.$value14, $localVariables, $isGlobal, $javaPrinter);
                        $funcVariables = tj_Translator_addTabCount($this);
                        $statement = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($statement);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($statement, $funcVariables), $rt_s(99)), $statements), $rt_s(95));
                        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($statement));
                        break a;
                    case 15:
                        tj_Translator_evalShowMsgBox($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 16:
                        tj_Translator_evalRemoveAt($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 17:
                        tj_Translator_evalRemoveFrom($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    case 18:
                        tj_Translator_evalRemoveAllFrom($this, $statement, $localVariables, $isGlobal, $javaPrinter);
                        break a;
                    default:
                        break a;
                }
                tj_Translator_evalDeclaration($this, $statement, $localVariables, $isGlobal, $javaPrinter);
            }
        }
        return $returnVal.$value12;
    }
    function tj_Translator_evalExpression($this, $expression, $localVariables, $isGlobal) {
        var $total, $operation, $comparison, $compVal, $isComp, var$9, var$10, var$11, $elmt, $result, $valNot, $bool, $valB, $cast, $val, $newVal, $expressionElmt, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, $listLength, var$33, $valFunc, $input, $arrayName, $listL, $length, $resultO, $variable, $listVal, $index, $listValVal, $list, $type, $listExpressions, $listVals, $intList, $listValI, $intListVal, $floatList, $floatListVal, $stringList, $stringListVal,
        $booleanList, $booleanListVal, $$je;
        $total = null;
        $operation = null;
        $comparison = null;
        $compVal = null;
        $isComp = 0;
        var$9 = (tj_Expression_getElements($expression)).data;
        var$10 = var$9.length;
        var$11 = 0;
        a: while (true) {
            if (var$11 >= var$10) {
                if (!$isComp)
                    return $total;
                return tj_Translator_performComparision($this, $comparison, $total, $compVal);
            }
            b: {
                c: {
                    d: {
                        e: {
                            f: {
                                $elmt = var$9[var$11];
                                tj_Translator$1_$callClinit();
                                switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                                    case 1:
                                        $result = tj_Translator_performComparision($this, $comparison, $total, $compVal);
                                        if ($result === null)
                                            break a;
                                        if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        $total = null;
                                        $operation = null;
                                        $comparison = null;
                                        $compVal = null;
                                        $isComp = 0;
                                        break b;
                                    case 2:
                                        $valNot = tj_Translator_evalExpression($this, $elmt.$expression, $localVariables, $isGlobal);
                                        if (!($valNot instanceof tj_JavaishBoolean)) {
                                            tj_Error_TypeMismatch($rt_s(30), $valNot.$typeString(), $this.$lineNumber);
                                            break b;
                                        }
                                        $expression = jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($valNot)) != 1 ? tj_JavaishBoolean__init_(jl_Boolean_valueOf(1)) : tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        if (!$isComp)
                                            $total = tj_Translator_performOperation($this, $operation, $total, $expression);
                                        else
                                            $compVal = tj_Translator_performOperation($this, $operation, $compVal, $expression);
                                        break b;
                                    case 3:
                                        $bool = $elmt;
                                        $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                        if (!$isComp) {
                                            $total = tj_Translator_performOperation($this, $operation, $total, $valB);
                                            break b;
                                        }
                                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $valB);
                                        break b;
                                    case 4:
                                        g: {
                                            $cast = $elmt;
                                            $val = tj_Translator_evalExpression($this, $cast.$element, $localVariables, $isGlobal);
                                            switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($cast.$castType)]) {
                                                case 1:
                                                    if ($val instanceof tj_JavaishFloat) {
                                                        $newVal = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if ($val instanceof tj_JavaishInt) {
                                                            $expressionElmt = $val;
                                                            $newVal = new tj_JavaishFloat;
                                                            $expressionElmt = $newVal;
                                                            tj_JavaishFloat__init_0($newVal, jl_Integer_intValue(tj_JavaishInt_getValue($val)));
                                                        } else {
                                                            $expressionElmt = $val;
                                                            if (!($val instanceof tj_JavaishString))
                                                                $newVal = $val;
                                                            else {
                                                                $expressionElmt = $val;
                                                                $newVal = new tj_JavaishFloat;
                                                                $expressionElmt = $newVal;
                                                                tj_JavaishFloat__init_0($newVal, jl_Float_parseFloat(tj_JavaishString_getValue($val)));
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(29), $this.$lineNumber, $expressionElmt.$typeString());
                                                    $newVal = $expressionElmt;
                                                    break g;
                                                case 2:
                                                    $newVal = jl_System_out();
                                                    $floatElmt = $val.$typeString();
                                                    $expression = jl_StringBuilder__init_();
                                                    jl_StringBuilder_append(jl_StringBuilder_append($expression, $rt_s(100)), $floatElmt);
                                                    ji_PrintStream_println($newVal, jl_StringBuilder_toString($expression));
                                                    if ($val instanceof tj_JavaishInt) {
                                                        $newVal = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if ($val instanceof tj_JavaishFloat) {
                                                            $expressionElmt = $val;
                                                            $newVal = new tj_JavaishInt;
                                                            $expressionElmt = $newVal;
                                                            tj_JavaishInt__init_($newVal, jl_Math_round(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                                                        } else {
                                                            $expressionElmt = $val;
                                                            if (!($val instanceof tj_JavaishString))
                                                                $newVal = $val;
                                                            else {
                                                                $expressionElmt = $val;
                                                                $floatElmt = jl_System_out();
                                                                $valF = $val;
                                                                $integer = tj_JavaishString_getValue($valF);
                                                                $expression = jl_StringBuilder__init_();
                                                                jl_StringBuilder_append(jl_StringBuilder_append($expression, $rt_s(100)), $integer);
                                                                $expression = jl_StringBuilder_toString($expression);
                                                                $expressionElmt = $val;
                                                                ji_PrintStream_println($floatElmt, $expression);
                                                                $newVal = new tj_JavaishInt;
                                                                $expressionElmt = $newVal;
                                                                tj_JavaishInt__init_($newVal, jl_Integer_parseInt0(tj_JavaishString_getValue($valF)));
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($expressionElmt.$typeString(), $this.$lineNumber, $rt_s(32));
                                                    $newVal = $expressionElmt;
                                                    break g;
                                                case 3:
                                                    if ($val instanceof tj_JavaishString) {
                                                        $newVal = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if ($val instanceof tj_JavaishFloat) {
                                                            $expressionElmt = $val;
                                                            $newVal = new tj_JavaishString;
                                                            $expressionElmt = $newVal;
                                                            tj_JavaishString__init_($newVal, jl_Float_toString(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                                                        } else {
                                                            $expressionElmt = $val;
                                                            if ($val instanceof tj_JavaishInt) {
                                                                $expressionElmt = $val;
                                                                $newVal = new tj_JavaishString;
                                                                $expressionElmt = $newVal;
                                                                tj_JavaishString__init_($newVal, jl_Integer_toString(jl_Integer_intValue(tj_JavaishInt_getValue($val))));
                                                            } else {
                                                                $expressionElmt = $val;
                                                                if (!($val instanceof tj_JavaishBoolean))
                                                                    $newVal = $val;
                                                                else {
                                                                    $expressionElmt = $val;
                                                                    $newVal = new tj_JavaishString;
                                                                    $expressionElmt = $newVal;
                                                                    tj_JavaishString__init_($newVal, jl_Boolean_toString(jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($val))));
                                                                }
                                                            }
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(31), $this.$lineNumber, $expressionElmt.$typeString());
                                                    $newVal = $expressionElmt;
                                                    break g;
                                                case 4:
                                                    if ($val instanceof tj_JavaishBoolean) {
                                                        $newVal = $val;
                                                        break g;
                                                    }
                                                    try {
                                                        $expressionElmt = $val;
                                                        if (!($val instanceof tj_JavaishString))
                                                            $newVal = $val;
                                                        else {
                                                            $expressionElmt = $val;
                                                            $newVal = new tj_JavaishBoolean;
                                                            $expressionElmt = $newVal;
                                                            tj_JavaishBoolean__init_0($newVal, jl_Boolean_valueOf(jl_Boolean_parseBoolean(tj_JavaishString_getValue($val))));
                                                        }
                                                        break g;
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof jl_Exception) {
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    tj_Error_UnableToParse($rt_s(30), $this.$lineNumber, $expressionElmt.$typeString());
                                                    $newVal = $expressionElmt;
                                                    break g;
                                                default:
                                            }
                                            $newVal = $val;
                                        }
                                        if (!$isComp) {
                                            $total = tj_Translator_performOperation($this, $operation, $total, $newVal);
                                            break b;
                                        }
                                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $newVal);
                                        break b;
                                    case 5:
                                        tj_Translator$Operator_$callClinit();
                                        $operation = tj_Translator$Operator_DIVIDE;
                                        break b;
                                    case 6:
                                        tj_Translator$Operator_$callClinit();
                                        $comparison = tj_Translator$Operator_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 7:
                                        $newVal = tj_Translator_evalExpression($this, $elmt.$expression0, $localVariables, $isGlobal);
                                        if (!$isComp) {
                                            $total = tj_Translator_performOperation($this, $operation, $total, $newVal);
                                            break b;
                                        }
                                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $newVal);
                                        break b;
                                    case 8:
                                        $floatElmt = $elmt;
                                        $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                        if (!$isComp) {
                                            $total = tj_Translator_performOperation($this, $operation, $total, $valF);
                                            break b;
                                        }
                                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $valF);
                                        break b;
                                    case 9:
                                        tj_Translator$Operator_$callClinit();
                                        $comparison = tj_Translator$Operator_GREATER_THAN;
                                        $isComp = 1;
                                        break b;
                                    case 10:
                                        tj_Translator$Operator_$callClinit();
                                        $comparison = tj_Translator$Operator_GREATER_THAN_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 11:
                                        $integer = $elmt;
                                        $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                        if (!$isComp) {
                                            $total = tj_Translator_performOperation($this, $operation, $total, $valI);
                                            break b;
                                        }
                                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $valI);
                                        break b;
                                    case 12:
                                        tj_Translator$Operator_$callClinit();
                                        $comparison = tj_Translator$Operator_LESS_THAN;
                                        $isComp = 1;
                                        break b;
                                    case 13:
                                        tj_Translator$Operator_$callClinit();
                                        $comparison = tj_Translator$Operator_LESS_THAN_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 14:
                                        tj_Translator$Operator_$callClinit();
                                        $operation = tj_Translator$Operator_MINUS;
                                        break b;
                                    case 15:
                                        tj_Translator$Operator_$callClinit();
                                        $operation = tj_Translator$Operator_MULTIPLY;
                                        break b;
                                    case 16:
                                        tj_Translator$Operator_$callClinit();
                                        $comparison = tj_Translator$Operator_NOT_EQUAL;
                                        $isComp = 1;
                                        break b;
                                    case 17:
                                        break f;
                                    case 18:
                                        tj_Translator$Operator_$callClinit();
                                        $operation = tj_Translator$Operator_PLUS;
                                        break b;
                                    case 19:
                                        $string = $elmt;
                                        $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                        if (!$isComp) {
                                            $total = tj_Translator_performOperation($this, $operation, $total, $valS);
                                            break b;
                                        }
                                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $valS);
                                        break b;
                                    case 20:
                                        break e;
                                    case 21:
                                        $function = $elmt;
                                        $body = tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                                        $args = tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                                        $params = (tj_FunctionElmt_getParams($function)).data;
                                        $paramVals = ju_ArrayList__init_();
                                        $listLength = $params.length;
                                        var$33 = 0;
                                        while (var$33 < $listLength) {
                                            ju_ArrayList_add($paramVals, tj_Translator_evalExpression($this, $params[var$33], $localVariables, $isGlobal));
                                            var$33 = var$33 + 1 | 0;
                                        }
                                        $valFunc = tj_Translator_interpretFunction($this, $body, $args, ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals))), tj_FunctionElmt_getName($function), $isGlobal, 0);
                                        if (!$isComp) {
                                            $total = tj_Translator_performOperation($this, $operation, $total, $valFunc);
                                            break b;
                                        }
                                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $valFunc);
                                        break b;
                                    case 22:
                                        $input = tj_JavaishString__init_0($rt_s(0));
                                        if (!$isComp) {
                                            $total = tj_Translator_performOperation($this, $operation, $total, $input);
                                            break b;
                                        }
                                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $input);
                                        break b;
                                    case 23:
                                        break d;
                                    case 24:
                                        break c;
                                    case 25:
                                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                        if (tj_Variables_isVariable($localVariables, $arrayName))
                                            $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                        else {
                                            if (!tj_Variables_isVariable($this.$globalVariables, $arrayName)) {
                                                tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber);
                                                return null;
                                            }
                                            $expression = tj_Variables_getVariableValue($this.$globalVariables, $arrayName);
                                        }
                                        if (!($expression instanceof tj_JavaishListVal)) {
                                            tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber);
                                            return null;
                                        }
                                        $listL = tj_JavaishListVal_getValue($expression);
                                        $length = tj_JavaishInt__init_0($listL.$getLength0());
                                        if (!$isComp)
                                            $total = tj_Translator_performOperation($this, $operation, $total, $length);
                                        else
                                            $compVal = tj_Translator_performOperation($this, $operation, $compVal, $length);
                                        break b;
                                    default:
                                }
                                break b;
                            }
                            $resultO = tj_Translator_performComparision($this, $comparison, $total, $compVal);
                            if ($resultO === null)
                                return null;
                            if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                                return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            $total = null;
                            $operation = null;
                            $compVal = null;
                            $isComp = 0;
                            break b;
                        }
                        $variable = $elmt;
                        if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                            $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                        else {
                            if (!tj_Variables_isVariable($this.$globalVariables, tj_VariableElmt_getName($variable))) {
                                tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber);
                                return null;
                            }
                            $expression = tj_Variables_getVariableValue($this.$globalVariables, tj_VariableElmt_getName($variable));
                        }
                        if (!$isComp) {
                            $total = tj_Translator_performOperation($this, $operation, $total, $expression);
                            break b;
                        }
                        $compVal = tj_Translator_performOperation($this, $operation, $compVal, $expression);
                        break b;
                    }
                    $listVal = $elmt;
                    $index = tj_Translator_evalExpression($this, tj_ListValElmt_getIndex($listVal), $localVariables, $isGlobal);
                    if (!($index instanceof tj_JavaishInt)) {
                        tj_Error_TypeMismatch($rt_s(32), $index.$typeString(), $this.$lineNumber);
                        return null;
                    }
                    $expression = $index;
                    if (tj_Variables_isVariable($localVariables, tj_ListValElmt_getListName($listVal)))
                        $expressionElmt = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($localVariables, tj_ListValElmt_getListName($listVal)));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables, tj_ListValElmt_getListName($listVal))) {
                            tj_Error_VariableNotDeclared(tj_ListValElmt_getListName($listVal), $this.$lineNumber);
                            return null;
                        }
                        $expressionElmt = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($this.$globalVariables, tj_ListValElmt_getListName($listVal)));
                    }
                    $listLength = $expressionElmt.$getLength0();
                    if (jl_Integer_intValue(tj_JavaishInt_getValue($expression)) >= $listLength) {
                        tj_Error_IndexOutOfBounds(jl_Integer_intValue(tj_JavaishInt_getValue($expression)), $this.$lineNumber, $listLength);
                        return null;
                    }
                    $listValVal = $expressionElmt.$getValue7(jl_Integer_intValue(tj_JavaishInt_getValue($expression)));
                    if (!$isComp) {
                        $total = tj_Translator_performOperation($this, $operation, $total, $listValVal);
                        break b;
                    }
                    $compVal = tj_Translator_performOperation($this, $operation, $compVal, $listValVal);
                    break b;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $expression = ju_AbstractList_iterator($listExpressions);
                while (ju_AbstractList$1_hasNext($expression)) {
                    ju_ArrayList_add($listVals, tj_Translator_evalExpression($this, ju_AbstractList$1_next($expression), $localVariables, $isGlobal));
                }
                switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($type)]) {
                    case 5:
                        $intList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishInt)) {
                                tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber);
                                return null;
                            }
                            ju_ArrayList_add($intList, $listValI);
                        }
                        $intListVal = tj_JavaishIntList__init_($intList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($intListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($intListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber);
                        break b;
                    case 6:
                        $floatList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishFloat)) {
                                tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber);
                                return null;
                            }
                            ju_ArrayList_add($floatList, $listValI);
                        }
                        $floatListVal = tj_JavaishFloatList__init_($floatList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($floatListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($floatListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber);
                        break b;
                    case 7:
                        $stringList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishString)) {
                                tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber);
                                return null;
                            }
                            ju_ArrayList_add($stringList, $listValI);
                        }
                        $stringListVal = tj_JavaishStringList__init_($stringList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($stringListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($stringListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber);
                        break b;
                    case 8:
                        $booleanList = ju_ArrayList__init_();
                        $expression = ju_AbstractList_iterator($listVals);
                        while (ju_AbstractList$1_hasNext($expression)) {
                            $listValI = ju_AbstractList$1_next($expression);
                            if (!($listValI instanceof tj_JavaishBoolean)) {
                                tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber);
                                return null;
                            }
                            ju_ArrayList_add($booleanList, $listValI);
                        }
                        $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                        if (!$isComp) {
                            if ($operation === null) {
                                $total = tj_JavaishListVal__init_($booleanListVal);
                                break b;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber);
                            break b;
                        }
                        if ($operation === null) {
                            $compVal = tj_JavaishListVal__init_($booleanListVal);
                            break b;
                        }
                        tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber);
                        break b;
                    default:
                }
            }
            var$11 = var$11 + 1 | 0;
        }
        return null;
    }
    function tj_Translator_performComparision($this, $comparison, $left, $right) {
        var $result;
        a: {
            $result = null;
            tj_Translator$1_$callClinit();
            switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal($comparison)]) {
                case 1:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType() === tj_JavaishVal$JavaishType_STRING) {
                        if (!jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break a;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break a;
                    }
                    if ($left.$getType() !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) !== tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) !== tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) !== jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) !== jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (tj_JavaishFloat_getValue($left) !== tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(30), $rt_s(102), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(31), $rt_s(103), $this.$lineNumber);
                    return null;
                case 2:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType() === tj_JavaishVal$JavaishType_STRING) {
                        if (jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break a;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break a;
                    }
                    if ($left.$getType() !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) === tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) === tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) === jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) === jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (tj_JavaishFloat_getValue($left) === tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(30), $rt_s(102), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(31), $rt_s(103), $this.$lineNumber);
                    return null;
                case 3:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(104), $rt_s(30), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber);
                    return null;
                case 4:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(104), $rt_s(30), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber);
                    return null;
                case 5:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(104), $rt_s(30), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber);
                    return null;
                case 6:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break a;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break a;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break a;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break a;
                        }
                        tj_Error_TypeMismatch($rt_s(104), $rt_s(30), $this.$lineNumber);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter) {
        var $expr, var$6, var$7, var$8, $elmt, $castExpr, var$11, $cast, $val, $expressionElmt, $floatElmt, $integer, $string, $function, $params, $funcExpr, var$21, $inputLine, $listVal, $index, $listName, $list, $type, $listExpressions, $listExpr, $arrayName;
        $expr = $rt_s(10);
        var$6 = (tj_Expression_getElements($expression)).data;
        var$7 = var$6.length;
        var$8 = 0;
        while (var$8 < var$7) {
            a: {
                $elmt = var$6[var$8];
                tj_Translator$1_$callClinit();
                switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element_getType($elmt))]) {
                    case 1:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(105));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 2:
                        $castExpr = tj_Translator_translateExpression($this, $elmt.$expression, $localVariables, $isGlobal, $javaPrinter);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(106)), $castExpr);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 3:
                        var$11 = tj_BoolElmt_getValue($elmt);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append3(jl_StringBuilder_append($expression, $expr), var$11);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 4:
                        b: {
                            $cast = $elmt;
                            $val = tj_Translator_evalExpression($this, $cast.$element, $localVariables, $isGlobal);
                            $castExpr = tj_Translator_translateExpression($this, $cast.$element, $localVariables, $isGlobal, $javaPrinter);
                            $expression = jl_System_out();
                            $expressionElmt = $val.$typeString();
                            $floatElmt = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append($floatElmt, $rt_s(107)), $castExpr), 32), $expressionElmt);
                            ji_PrintStream_println($expression, jl_StringBuilder_toString($floatElmt));
                            switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal($cast.$castType)]) {
                                case 1:
                                    if ($val instanceof tj_JavaishFloat)
                                        break b;
                                    if ($val instanceof tj_JavaishInt) {
                                        $expression = jl_StringBuilder__init_();
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(108)), $castExpr);
                                        $expr = jl_StringBuilder_toString($expression);
                                        break b;
                                    }
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(109)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 2:
                                    if ($val instanceof tj_JavaishFloat) {
                                        $expression = jl_StringBuilder__init_();
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(110)), $castExpr);
                                        $expr = jl_StringBuilder_toString($expression);
                                        break b;
                                    }
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(111)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 3:
                                    if ($val instanceof tj_JavaishString)
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(112)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                case 4:
                                    if ($val instanceof tj_JavaishBoolean)
                                        break b;
                                    if (!($val instanceof tj_JavaishString))
                                        break b;
                                    $expression = jl_StringBuilder__init_();
                                    jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(113)), $castExpr), 41);
                                    $expr = jl_StringBuilder_toString($expression);
                                    break b;
                                default:
                            }
                        }
                        $expression = jl_System_out();
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $rt_s(107)), $expr);
                        ji_PrintStream_println($expression, jl_StringBuilder_toString($cast));
                        break a;
                    case 5:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(114));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 6:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(115));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 7:
                        $expression = tj_Translator_translateExpression($this, $elmt.$expression0, $localVariables, $isGlobal, $javaPrinter);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $expression);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 8:
                        $floatElmt = $elmt;
                        $val = tj_JavaishFloat_getValue(tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt)));
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $val), 102);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 9:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(116));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 10:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(117));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 11:
                        $integer = $elmt;
                        $val = tj_JavaishInt_getValue(tj_JavaishInt__init_0(tj_IntElmt_getValue($integer)));
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $val);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 12:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(118));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 13:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(119));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 14:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(120));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 15:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(121));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 16:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(122));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 17:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(123));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 18:
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $rt_s(124));
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 19:
                        $string = $elmt;
                        $val = tj_JavaishString_getValue(tj_JavaishString__init_0(tj_StringElmt_getValue($string)));
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append2(jl_StringBuilder_append($expression, $expr), 34), $val), 34);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 20:
                        $expression = tj_VariableElmt_getName($elmt);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $expression);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 21:
                        $function = $elmt;
                        tj_Variables_getFunctionBody($this.$globalVariables, tj_FunctionElmt_getName($function));
                        tj_Variables_getFunctionArgs($this.$globalVariables, tj_FunctionElmt_getName($function));
                        $params = (tj_FunctionElmt_getParams($function)).data;
                        ju_ArrayList__init_0(new ju_ArrayList);
                        $expression = tj_FunctionElmt_getName($function);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append2(jl_StringBuilder_append($cast, $expression), 40);
                        $funcExpr = jl_StringBuilder_toString($cast);
                        var$11 = $params.length;
                        var$21 = 0;
                        while (var$21 < var$11) {
                            $val = tj_Translator_translateExpression($this, $params[var$21], $localVariables, $isGlobal, $javaPrinter);
                            $expression = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $funcExpr), $val), $rt_s(90));
                            $funcExpr = jl_StringBuilder_toString($expression);
                            var$21 = var$21 + 1 | 0;
                        }
                        $cast = jl_String_substring($funcExpr, 0, jl_String_length($funcExpr) - 2 | 0);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append2(jl_StringBuilder_append($expression, $cast), 41);
                        $expression = jl_StringBuilder_toString($expression);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $expression);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 22:
                        $inputLine = tj_Translator_evalShowInputBox($this, $elmt, $localVariables, $isGlobal, $javaPrinter);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $inputLine);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 23:
                        $listVal = $elmt;
                        $index = tj_Translator_translateExpression($this, tj_ListValElmt_getIndex($listVal), $localVariables, $isGlobal, $javaPrinter);
                        $listName = tj_ListValElmt_getListName($listVal);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $expr), $listName), $rt_s(125)), $index), 41);
                        $expr = jl_StringBuilder_toString($expression);
                        break a;
                    case 24:
                        $list = $elmt;
                        $type = tj_Translator_typeToString($this, tj_ListElmt_getListType($list));
                        $listExpressions = tj_ListElmt_getList($list);
                        $expression = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $rt_s(126)), $type), $rt_s(127));
                        $listExpr = jl_StringBuilder_toString($expression);
                        if (!$this.$usedList) {
                            ju_ArrayList_add($this.$javaImports, $rt_s(128));
                            ju_ArrayList_add($this.$javaImports, $rt_s(129));
                            $this.$usedList = 1;
                        }
                        $castExpr = ju_AbstractList_iterator($listExpressions);
                        while (ju_AbstractList$1_hasNext($castExpr)) {
                            $expression = tj_Translator_translateExpression($this, ju_AbstractList$1_next($castExpr), $localVariables, $isGlobal, $javaPrinter);
                            $cast = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($cast, $listExpr), $expression), $rt_s(90));
                            $listExpr = jl_StringBuilder_toString($cast);
                        }
                        $expression = jl_String_substring($listExpr, 0, jl_String_length($listExpr) - 2 | 0);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expression), $rt_s(130));
                        $expression = jl_StringBuilder_toString($cast);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $expression);
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    case 25:
                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                        $cast = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($cast, $expr), $arrayName), $rt_s(131));
                        $expr = jl_StringBuilder_toString($cast);
                        break a;
                    default:
                }
            }
            var$8 = var$8 + 1 | 0;
        }
        return $expr;
    }
    function tj_Translator_performOperation($this, $operation, $total, $val2) {
        var $result, var$5;
        $result = null;
        if ($operation === null)
            return $val2;
        a: {
            tj_Translator$1_$callClinit();
            switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal($operation)]) {
                case 7:
                    var$5 = $total instanceof tj_JavaishString;
                    if (var$5) {
                        if (!($val2 instanceof tj_JavaishString)) {
                            tj_Error_TypeMismatch($rt_s(31), $val2.$typeString(), $this.$lineNumber);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_($result, jl_StringBuilder_toString($val2));
                        break a;
                    }
                    if ($val2 instanceof tj_JavaishString) {
                        if (!var$5) {
                            tj_Error_TypeMismatch($rt_s(31), $total.$typeString(), $this.$lineNumber);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_($result, jl_StringBuilder_toString($val2));
                        break a;
                    }
                    if ($total instanceof tj_JavaishFloat) {
                        if (!($val2 instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                        break a;
                    }
                    if (!($val2 instanceof tj_JavaishFloat)) {
                        $result = tj_JavaishInt__init_0(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                        break a;
                    }
                    if (!($total instanceof tj_JavaishInt)) {
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                    break a;
                case 8:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_0($rt_imul(jl_Integer_intValue(tj_JavaishInt_getValue($total)), jl_Integer_intValue(tj_JavaishInt_getValue($val2))));
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber);
                    return null;
                case 9:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_0(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber);
                    return null;
                case 10:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break a;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break a;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_0(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break a;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break a;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break a;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_Translator_evalDeclaration($this, $declaration, $localVariables, $isGlobal, $javaPrinter) {
        var $type, $line, $list, var$8, $value, $expr, $prevTabCount, $listVal, $list_0;
        $type = $declaration.$varType;
        $line = jl_System_out();
        $list = jl_String_valueOf($declaration.$varType);
        var$8 = $declaration.$name13;
        $value = jl_String_valueOf($declaration.$value15);
        $expr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($expr);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expr, $rt_s(132)), $list), $rt_s(133)), var$8), $rt_s(134)), $value);
        ji_PrintStream_println($line, jl_AbstractStringBuilder_toString($expr));
        $value = tj_Translator_evalExpression($this, $declaration.$value15, $localVariables, $isGlobal);
        $expr = tj_Translator_translateExpression($this, $declaration.$value15, $localVariables, $isGlobal, $javaPrinter);
        $line = tj_Translator_addTabCount($this);
        $prevTabCount = $this.$tabCount;
        if ($isGlobal) {
            $this.$tabCount = 1;
            $listVal = tj_Translator_addTabCount($this);
            $javaPrinter = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($javaPrinter);
            jl_StringBuilder_append(jl_StringBuilder_append($javaPrinter, $listVal), $rt_s(92));
            $line = jl_AbstractStringBuilder_toString($javaPrinter);
            $javaPrinter = $this.$publicVarDeclarations;
        }
        if ($type === $value.$getType()) {
            tj_JavaishVal$JavaishType_$callClinit();
            if ($type !== tj_JavaishVal$JavaishType_LIST) {
                $list_0 = tj_Translator_typeToString($this, $type);
                var$8 = $declaration.$name13;
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                $list = jl_StringBuilder_append(jl_StringBuilder_append($listVal, $line), $list_0);
                jl_AbstractStringBuilder_append($list, 32);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$8), $rt_s(93)), $expr), 59);
                ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($listVal));
            } else {
                var$8 = tj_Translator_typeToString($this, ($value.$getValue8()).$list.$getType());
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $rt_s(135)), var$8), 62);
                $list_0 = jl_AbstractStringBuilder_toString($listVal);
                var$8 = $declaration.$name13;
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                $list = jl_StringBuilder_append(jl_StringBuilder_append($listVal, $line), $list_0);
                jl_AbstractStringBuilder_append($list, 32);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$8), $rt_s(93)), $expr), 59);
                ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($listVal));
            }
            if (!$isGlobal) {
                if ($type !== tj_JavaishVal$JavaishType_LIST)
                    tj_Variables_addVariable($localVariables, $declaration.$name13, $type, $value, $this.$lineNumber);
                else {
                    $listVal = $value.$getValue8();
                    tj_Variables_addList($localVariables, $declaration.$name13, $type, $listVal.$list, $this.$lineNumber);
                }
            } else if ($type !== tj_JavaishVal$JavaishType_LIST)
                tj_Variables_addVariable($this.$globalVariables, $declaration.$name13, $type, $value, $this.$lineNumber);
            else {
                $listVal = $value.$getValue8();
                tj_Variables_addList($this.$globalVariables, $declaration.$name13, $type, $listVal.$list, $this.$lineNumber);
            }
            $this.$tabCount = $prevTabCount;
            return;
        }
        tj_JavaishVal$JavaishType_$callClinit();
        if ($type === tj_JavaishVal$JavaishType_FLOAT && $value.$getType() === tj_JavaishVal$JavaishType_INT) {
            $list_0 = $declaration.$name13;
            $listVal = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($listVal);
            $list = jl_StringBuilder_append(jl_StringBuilder_append($listVal, $line), $rt_s(29));
            jl_AbstractStringBuilder_append($list, 32);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, $list_0), $rt_s(93)), $expr), 59);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($listVal));
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $declaration.$name13, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber);
            else
                tj_Variables_addVariable($this.$globalVariables, $declaration.$name13, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber);
            return;
        }
        if ($value.$getType() === tj_JavaishVal$JavaishType_LIST) {
            $list_0 = $value.$list;
            if ($list_0.$getType() === $type) {
                $value = tj_Translator_typeToString($this, $list_0.$getType());
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($listVal, $rt_s(135)), $value), 62);
                var$8 = jl_AbstractStringBuilder_toString($listVal);
                $value = $declaration.$name13;
                $listVal = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listVal);
                $list = jl_StringBuilder_append(jl_StringBuilder_append($listVal, $line), var$8);
                jl_AbstractStringBuilder_append($list, 32);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, $value), $rt_s(93)), $expr), 59);
                ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($listVal));
                if (!$isGlobal)
                    tj_Variables_addList($localVariables, $declaration.$name13, $type, $list_0, $this.$lineNumber);
                else
                    tj_Variables_addList($this.$globalVariables, $declaration.$name13, $type, $list_0, $this.$lineNumber);
                return;
            }
        }
        tj_Error_TypeMismatch($type.$name0, $value.$typeString(), $this.$lineNumber);
    }
    function tj_Translator_evalFunction($this, $function, $localVariables, $isGlobal) {
        var $name, $args, $body, $params, $paramVals, var$9, var$10, $arg;
        $name = $function.$name14;
        $args = $function.$args0;
        $body = $function.$body;
        if (!$isGlobal) {
            tj_Error_FunctionNotGlobal($name, $this.$lineNumber);
            return;
        }
        tj_Variables_addFunction($this.$globalVariables, $name, $body, $args, $this.$lineNumber);
        if ($args === null) {
            tj_Error_FunctionNotDeclared($name, $this.$lineNumber);
            return;
        }
        $params = $args.data;
        $paramVals = ju_ArrayList__init_();
        var$9 = $params.length;
        var$10 = 0;
        while (var$10 < var$9) {
            a: {
                $arg = $params[var$10];
                tj_Translator$1_$callClinit();
                switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$arg.$type0.$ordinal0]) {
                    case 1:
                        break;
                    case 2:
                        ju_ArrayList_add($paramVals, tj_JavaishInt__init_0(0));
                        break a;
                    case 3:
                        ju_ArrayList_add($paramVals, tj_JavaishString__init_0($rt_s(10)));
                        break a;
                    case 4:
                        ju_ArrayList_add($paramVals, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)));
                        break a;
                    default:
                        break a;
                }
                ju_ArrayList_add($paramVals, tj_JavaishFloat__init_(0.0));
            }
            var$10 = var$10 + 1 | 0;
        }
        tj_Translator_interpretFunction($this, $body, $args, ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, $paramVals.$size0)), $name, 0, 1);
        $this.$tabCount = $this.$tabCount + 1 | 0;
    }
    function tj_Translator_evalIf($this, $ifStmt, $localVariables, $isGlobal, $pastResult, $javaPrinter) {
        var $condition, $body, $conditionString;
        $condition = $ifStmt.$condition0;
        $body = $ifStmt.$body;
        $conditionString = tj_Translator_translateExpression($this, $condition, $localVariables, $isGlobal, $javaPrinter);
        $ifStmt = tj_Translator_addTabCount($this);
        $condition = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($condition);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($condition, $ifStmt), $rt_s(136)), $conditionString), $rt_s(98));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($condition));
        $this.$tabCount = $this.$tabCount + 1 | 0;
        tj_Translator_interpretBody($this, $body, $localVariables, 0, $javaPrinter);
        $this.$tabCount = $this.$tabCount - 1 | 0;
        $localVariables = tj_Translator_addTabCount($this);
        $ifStmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($ifStmt);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($ifStmt, $localVariables), 125);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($ifStmt));
    }
    function tj_Translator_evalWhile($this, $whileStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $condString, var$6, $condition;
        $condString = tj_Translator_translateExpression($this, $whileStmt.$condition1, $localVariables, $isGlobal, $javaPrinter);
        var$6 = tj_Translator_addTabCount($this);
        $condition = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($condition);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($condition, var$6), $rt_s(137)), $condString), $rt_s(98));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($condition));
        $this.$tabCount = $this.$tabCount + 1 | 0;
        tj_Translator_interpretBody($this, $whileStmt.$body, $localVariables, 0, $javaPrinter);
        $this.$tabCount = $this.$tabCount - 1 | 0;
        $whileStmt = tj_Translator_addTabCount($this);
        $localVariables = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($localVariables);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($localVariables, $whileStmt), 125);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
    }
    function tj_Translator_evalForEach($this, $foreachStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $tempVarName, $listName, var$7, $list;
        $tempVarName = $foreachStmt.$tempVar;
        $listName = $foreachStmt.$listVar;
        if (tj_Variables_isVariable($localVariables, $listName))
            var$7 = tj_Variables_getVariableValue($localVariables, $listName);
        else {
            if (!tj_Variables_isVariable($this.$globalVariables, $listName)) {
                tj_Error_VariableNotDeclared($listName, $this.$lineNumber);
                return;
            }
            var$7 = tj_Variables_getVariableValue($this.$globalVariables, $listName);
        }
        $list = var$7.$getType();
        tj_JavaishVal$JavaishType_$callClinit();
        if ($list !== tj_JavaishVal$JavaishType_LIST) {
            tj_Error_TypeMismatch($rt_s(101), var$7.$typeString(), $this.$lineNumber);
            return;
        }
        $list = var$7.$list;
        if ($list.$getType() === tj_JavaishVal$JavaishType_STRINGLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_0($rt_s(10)), $this.$lineNumber);
            else
                tj_Variables_addVariable($this.$globalVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_0($rt_s(10)), $this.$lineNumber);
            var$7 = tj_Translator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(138)), $tempVarName), $rt_s(139)), $listName), $rt_s(98));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount = $this.$tabCount + 1 | 0;
            tj_Translator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $foreachStmt = tj_Translator_addTabCount($this);
            $localVariables = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($localVariables);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($localVariables, $foreachStmt), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
        } else if ($list.$getType() === tj_JavaishVal$JavaishType_BOOLEANLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber);
            else
                tj_Variables_addVariable($this.$globalVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber);
            var$7 = tj_Translator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(140)), $tempVarName), $rt_s(139)), $listName), $rt_s(98));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount = $this.$tabCount + 1 | 0;
            tj_Translator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $foreachStmt = tj_Translator_addTabCount($this);
            $localVariables = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($localVariables);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($localVariables, $foreachStmt), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
        } else if ($list.$getType() === tj_JavaishVal$JavaishType_INTLIST) {
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_0(0), $this.$lineNumber);
            else
                tj_Variables_addVariable($this.$globalVariables, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_0(0), $this.$lineNumber);
            var$7 = tj_Translator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(141)), $tempVarName), $rt_s(139)), $listName), $rt_s(98));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount = $this.$tabCount + 1 | 0;
            tj_Translator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $localVariables = tj_Translator_addTabCount($this);
            $foreachStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($foreachStmt);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($foreachStmt, $localVariables), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($foreachStmt));
        } else {
            if ($list.$getType() !== tj_JavaishVal$JavaishType_FLOATLIST) {
                tj_Error_TypeMismatch($rt_s(101), var$7.$typeString(), $this.$lineNumber);
                return;
            }
            if (!$isGlobal)
                tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber);
            else
                tj_Variables_addVariable($this.$globalVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber);
            var$7 = tj_Translator_addTabCount($this);
            $list = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($list);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($list, var$7), $rt_s(142)), $tempVarName), $rt_s(139)), $listName), $rt_s(98));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($list));
            $this.$tabCount = $this.$tabCount + 1 | 0;
            tj_Translator_interpretBody($this, $foreachStmt.$body, $localVariables, 0, $javaPrinter);
            $this.$tabCount = $this.$tabCount - 1 | 0;
            $localVariables = tj_Translator_addTabCount($this);
            $foreachStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($foreachStmt);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($foreachStmt, $localVariables), 125);
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($foreachStmt));
        }
    }
    function tj_Translator_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $incVarName, $newVar, $condString, $incExpr, var$9, var$10, var$11, $condition;
        $incVarName = $forwhenStmt.$incVar;
        $newVar = 0;
        if (!tj_Variables_isVariable($localVariables, $incVarName)) {
            $newVar = 1;
            tj_JavaishVal$JavaishType_$callClinit();
            tj_Variables_addVariable($localVariables, $incVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_0(0), $this.$lineNumber);
        }
        $condString = tj_Translator_translateExpression($this, $forwhenStmt.$condition2, $localVariables, $isGlobal, $javaPrinter);
        $incExpr = tj_Translator_translateExpression($this, $forwhenStmt.$increment, $localVariables, $isGlobal, $javaPrinter);
        var$9 = tj_Translator_addTabCount($this);
        if ($newVar)
            var$10 = $rt_s(143);
        else {
            var$11 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$11);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$11, $rt_s(144)), $incVarName), $rt_s(145));
            var$10 = jl_AbstractStringBuilder_toString(var$11);
        }
        $condition = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($condition);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($condition, var$9), $rt_s(146)), var$10), $condString), $rt_s(143)), $incVarName), $rt_s(147)), $incExpr), $rt_s(98));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($condition));
        $this.$tabCount = $this.$tabCount + 1 | 0;
        tj_Translator_interpretBody($this, $forwhenStmt.$body, $localVariables, 0, $javaPrinter);
        $this.$tabCount = $this.$tabCount - 1 | 0;
        $forwhenStmt = tj_Translator_addTabCount($this);
        $localVariables = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($localVariables);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($localVariables, $forwhenStmt), 125);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
    }
    function tj_Translator_evalShowMsgBox($this, $showMsgStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $expression, $value;
        $expression = $showMsgStmt.$value16;
        if (tj_Translator_evalExpression($this, $expression, $localVariables, $isGlobal) === null)
            return;
        if (!$this.$usedJOptionPane) {
            $this.$usedJOptionPane = 1;
            ju_ArrayList_add($this.$javaImports, $rt_s(148));
        }
        $showMsgStmt = tj_Translator_addTabCount($this);
        $localVariables = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
        $value = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($value);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($value, $showMsgStmt), $rt_s(149)), $localVariables), $rt_s(95));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($value));
    }
    function tj_Translator_evalShowInputBox($this, $showInputBoxElmt, $localVariables, $isGlobal, $javaPrinter) {
        var $value, $expression;
        ji_PrintStream_println(jl_System_out(), $rt_s(150));
        $value = $rt_s(10);
        $expression = $showInputBoxElmt.$value17;
        if ($expression !== null)
            $value = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
        if (!$this.$usedJOptionPane) {
            $this.$usedJOptionPane = 1;
            ju_ArrayList_add($this.$javaImports, $rt_s(148));
        }
        $showInputBoxElmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($showInputBoxElmt);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($showInputBoxElmt, $rt_s(151)), $value), 41);
        $localVariables = jl_AbstractStringBuilder_toString($showInputBoxElmt);
        ji_PrintStream_println(jl_System_out(), $localVariables);
        return $localVariables;
    }
    function tj_Translator_evalReturn($this, $returnStmt, $localVariables, $returnVal, $isGlobal, $javaPrinter) {
        var $expression, $value, $expr;
        $expression = $returnStmt.$value18;
        $value = null;
        $expr = $rt_s(10);
        if ($returnStmt.$hasReturn0) {
            $value = tj_Translator_evalExpression($this, $expression, $localVariables, $isGlobal);
            $localVariables = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
            $returnStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($returnStmt);
            jl_AbstractStringBuilder_append($returnStmt, 32);
            jl_StringBuilder_append($returnStmt, $localVariables);
            $expr = jl_AbstractStringBuilder_toString($returnStmt);
        }
        $returnVal.$hasReturn = 1;
        $returnVal.$value12 = $value;
        $returnStmt = tj_Translator_addTabCount($this);
        $localVariables = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($localVariables);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($localVariables, $returnStmt), $rt_s(47)), $expr), 59);
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($localVariables));
    }
    function tj_Translator_evalMutation($this, $mutationStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $type, $name, $varType, $value, $list, $expression, $exprJustOne, $elements, $line, $integer, $newVal;
        $type = $mutationStmt.$mutationType;
        $name = $mutationStmt.$varName;
        $varType = tj_Variables_getVariableType($this.$globalVariables, $name);
        $value = tj_Translator_evalExpression($this, $mutationStmt.$value19, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
            $list = tj_Variables_isVariable($localVariables, $name) ? tj_Variables_getVariableValue($localVariables, $name) : tj_Variables_getVariableValue($this.$globalVariables, $name);
            if ($list === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber);
                return;
            }
            if ($list.$getType() === tj_JavaishVal$JavaishType_STRING) {
                tj_Statements$MutationType_$callClinit();
                if ($type !== tj_Statements$MutationType_ADD) {
                    tj_Error_CantPerformMutation($list.$typeString(), $this.$lineNumber);
                    return;
                }
            }
            $expression = $mutationStmt.$value19;
            $exprJustOne = 0;
            $elements = $expression.$elements.data;
            if ($elements.length == 1) {
                $line = $elements[0].$type1;
                tj_Element$ElementType_$callClinit();
                if ($line === tj_Element$ElementType_INTEGER && $elements[0].$value20 == 1)
                    $exprJustOne = 1;
            }
            a: {
                $line = tj_Translator_addTabCount($this);
                tj_Translator$1_$callClinit();
                switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[$type.$ordinal0]) {
                    case 1:
                        if ($exprJustOne) {
                            $mutationStmt = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($mutationStmt);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(152));
                            $line = jl_AbstractStringBuilder_toString($mutationStmt);
                            break a;
                        }
                        $integer = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $mutationStmt = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($mutationStmt);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(147)), $integer), 59);
                        $line = jl_AbstractStringBuilder_toString($mutationStmt);
                        break a;
                    case 2:
                        if ($exprJustOne) {
                            $mutationStmt = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($mutationStmt);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(153));
                            $line = jl_AbstractStringBuilder_toString($mutationStmt);
                            break a;
                        }
                        $integer = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $mutationStmt = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($mutationStmt);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($mutationStmt, $line), $name), $rt_s(154)), $integer), 59);
                        $line = jl_AbstractStringBuilder_toString($mutationStmt);
                        break a;
                    case 3:
                        if (!$exprJustOne) {
                            $mutationStmt = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                            $expression = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($expression);
                            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $line), $name), $rt_s(155)), $mutationStmt), 59);
                            $line = jl_AbstractStringBuilder_toString($expression);
                            break a;
                        }
                        $expression = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $integer = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($integer);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($integer, $line), $name), $rt_s(155)), $expression), 59);
                        $line = jl_AbstractStringBuilder_toString($integer);
                        break a;
                    case 4:
                        if (!$exprJustOne) {
                            $mutationStmt = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                            $expression = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($expression);
                            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $line), $name), $rt_s(156)), $mutationStmt), 59);
                            $line = jl_AbstractStringBuilder_toString($expression);
                            break a;
                        }
                        $mutationStmt = tj_Translator_translateExpression($this, $expression, $localVariables, $isGlobal, $javaPrinter);
                        $expression = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($expression);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($expression, $line), $name), $rt_s(156)), $mutationStmt), 59);
                        $line = jl_AbstractStringBuilder_toString($expression);
                        break a;
                    default:
                }
            }
            ju_ArrayList_add($javaPrinter, $line);
            $newVal = tj_Translator_performOperation($this, tj_Translator_mutationTypeToOperator($this, $type), $list, $value);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, $newVal, $this.$lineNumber);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables, $name, $newVal, $this.$lineNumber);
            return;
        }
        $expression = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables, $name)).$list;
        if ($expression === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber);
            return;
        }
        $list = tj_Translator_performListOperation($this, tj_Translator_mutationTypeToOperator($this, $type), $expression, $value, 0);
        $expression = tj_Translator_addTabCount($this);
        $mutationStmt = tj_Translator_translateExpression($this, $mutationStmt.$value19, $localVariables, $isGlobal, $javaPrinter);
        $type = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($type);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($type, $expression), $name), $rt_s(157)), $mutationStmt), $rt_s(95));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($type));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
    }
    function tj_Translator_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $index, $indexVal, $list;
        $name = $removeAtStmt.$listName;
        $varType = tj_Variables_getVariableType($this.$globalVariables, $name);
        $index = tj_Translator_evalExpression($this, $removeAtStmt.$location, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
            tj_Error_TypeMismatch($rt_s(101), $varType.$name0, $this.$lineNumber);
            return;
        }
        $varType = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables, $name)).$list;
        if ($varType === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber);
            return;
        }
        if ($index.$getType() !== tj_JavaishVal$JavaishType_INT) {
            tj_Error_TypeMismatch($rt_s(32), $index.$typeString(), $this.$lineNumber);
            return;
        }
        $indexVal = (tj_JavaishInt_getValue($index)).$value;
        tj_Translator$Operator_$callClinit();
        $list = tj_Translator_performListOperation($this, tj_Translator$Operator_REMOVEAT, $varType, null, $indexVal);
        $removeAtStmt = tj_Translator_addTabCount($this);
        $varType = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($varType);
        jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($varType, $removeAtStmt), $name), $rt_s(158)), $indexVal), $rt_s(95));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($varType));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
    }
    function tj_Translator_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $value, var$8, $list, var$10;
        $name = $removeFromStmt.$listName0;
        $varType = tj_Variables_getVariableType($this.$globalVariables, $name);
        $value = tj_Translator_evalExpression($this, $removeFromStmt.$value21, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
            return;
        var$8 = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables, $name)).$list;
        if (var$8 === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber);
            return;
        }
        tj_Translator$Operator_$callClinit();
        $list = tj_Translator_performListOperation($this, tj_Translator$Operator_REMOVEFROM, var$8, $value, 0);
        var$10 = jl_System_out();
        var$8 = $list.$listString();
        $value = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($value);
        jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(159)), var$8);
        ji_PrintStream_println(var$10, jl_AbstractStringBuilder_toString($value));
        if ($varType !== tj_JavaishVal$JavaishType_INTLIST) {
            var$8 = tj_Translator_addTabCount($this);
            $removeFromStmt = tj_Translator_translateExpression($this, $removeFromStmt.$value21, $localVariables, $isGlobal, $javaPrinter);
            var$10 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$10);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$10, var$8), $name), $rt_s(158)), $removeFromStmt), $rt_s(95));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString(var$10));
        } else {
            var$8 = tj_Translator_addTabCount($this);
            $value = tj_Translator_translateExpression($this, $removeFromStmt.$value21, $localVariables, $isGlobal, $javaPrinter);
            $removeFromStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($removeFromStmt);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($removeFromStmt, var$8), $name), $rt_s(160)), $value), $rt_s(161));
            ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($removeFromStmt));
        }
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
    }
    function tj_Translator_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal, $javaPrinter) {
        var $name, $varType, $value, var$8, $list, var$10;
        $name = $removeAllFromStmt.$listName1;
        $varType = tj_Variables_getVariableType($this.$globalVariables, $name);
        $value = tj_Translator_evalExpression($this, $removeAllFromStmt.$value22, $localVariables, $isGlobal);
        tj_JavaishVal$JavaishType_$callClinit();
        if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
            return;
        var$8 = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables, $name)).$list;
        if (var$8 === null) {
            tj_Error_VariableNotDeclared($name, $this.$lineNumber);
            return;
        }
        tj_Translator$Operator_$callClinit();
        $list = tj_Translator_performListOperation($this, tj_Translator$Operator_REMOVEALLFROM, var$8, $value, 0);
        $value = jl_System_out();
        var$10 = $list.$listString();
        $varType = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($varType);
        jl_StringBuilder_append(jl_StringBuilder_append($varType, $rt_s(159)), var$10);
        ji_PrintStream_println($value, jl_AbstractStringBuilder_toString($varType));
        var$8 = tj_Translator_addTabCount($this);
        $value = tj_Translator_translateExpression($this, $removeAllFromStmt.$value22, $localVariables, $isGlobal, $javaPrinter);
        $removeAllFromStmt = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($removeAllFromStmt);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($removeAllFromStmt, var$8), $name), $rt_s(162)), $value), $rt_s(161));
        ju_ArrayList_add($javaPrinter, jl_AbstractStringBuilder_toString($removeAllFromStmt));
        if (tj_Variables_isVariable($localVariables, $name)) {
            tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
            return;
        }
        tj_Variables_setVariableValue($this.$globalVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber);
    }
    function tj_Translator_performListOperation($this, $operation, $list, $val, $index) {
        var $result, $listInnerType, $valType, $booleanListVal, $floatListVal, $intVal, $intListVal, $stringListVal, $booleanVal, $i, $stringVal;
        a: {
            $result = null;
            tj_Translator$1_$callClinit();
            switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal($operation)]) {
                case 7:
                    $listInnerType = $list.$getInnerType();
                    $valType = $val.$getType();
                    if ($listInnerType !== $valType) {
                        tj_Error_TypeMismatch(jl_Enum_toString($listInnerType), jl_Enum_toString($valType), $this.$lineNumber);
                        return null;
                    }
                    $operation = $list.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_add($booleanListVal, $val);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType() !== tj_JavaishVal$JavaishType_INT)
                            ju_ArrayList_add($floatListVal, $val);
                        else {
                            $intVal = $val;
                            ju_ArrayList_add($floatListVal, tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal))));
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_add($intListVal, $val);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_add($stringListVal, $val);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 8:
                case 9:
                case 10:
                    break;
                case 11:
                    $operation = $list.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_remove($booleanListVal, $index);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        ju_ArrayList_remove($floatListVal, $index);
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_remove($intListVal, $index);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_remove($stringListVal, $index);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                case 12:
                    $operation = $list.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        b: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($booleanListVal))
                                    break b;
                                if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($booleanListVal, $i);
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        c: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($floatListVal))
                                    break c;
                                if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($floatListVal, $i);
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType() !== tj_JavaishVal$JavaishType_INTLIST) {
                        if ($list.$getType() !== tj_JavaishVal$JavaishType_STRINGLIST)
                            break a;
                        $stringListVal = tj_JavaishStringList_getList($list);
                        $stringVal = $val;
                        $i = 0;
                        d: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($stringListVal))
                                    break d;
                                if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal)))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($stringListVal, $i);
                        }
                        $result = tj_JavaishStringList__init_($stringListVal);
                        break a;
                    }
                    $intListVal = tj_JavaishIntList_getList($list);
                    $intVal = $val;
                    $i = 0;
                    e: {
                        while (true) {
                            if ($i >= ju_ArrayList_size($intListVal))
                                break e;
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal))
                                break;
                            $i = $i + 1 | 0;
                        }
                        ju_ArrayList_remove($intListVal, $i);
                    }
                    $result = tj_JavaishIntList__init_($intListVal);
                    $operation = jl_System_out();
                    $list = jl_String_valueOf(tj_JavaishInt_getType($intVal));
                    $index = ju_ArrayList_size($intListVal);
                    $val = jl_StringBuilder__init_();
                    jl_StringBuilder_append0(jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append($val, $rt_s(163)), $list), 32), $index);
                    ji_PrintStream_println($operation, jl_StringBuilder_toString($val));
                    break a;
                case 13:
                    $operation = $list.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($booleanListVal)) {
                            if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal)) {
                                ju_ArrayList_remove($booleanListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break a;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        while ($i < ju_ArrayList_size($floatListVal)) {
                            if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation)) {
                                ju_ArrayList_remove($floatListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break a;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        $intVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($intListVal)) {
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal)) {
                                ju_ArrayList_remove($intListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishIntList__init_($intListVal);
                        break a;
                    }
                    if ($list.$getType() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break a;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    $stringVal = $val;
                    $i = 0;
                    while ($i < ju_ArrayList_size($stringListVal)) {
                        if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal))) {
                            ju_ArrayList_remove($stringListVal, $i);
                            $i = $i + (-1) | 0;
                        }
                        $i = $i + 1 | 0;
                    }
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break a;
                default:
            }
            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $list.$typeString(), $this.$lineNumber);
        }
        return $result;
    }
    function tj_Translator_mutationTypeToOperator($this, $type) {
        tj_Translator$1_$callClinit();
        switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[$type.$ordinal0]) {
            case 1:
                tj_Translator$Operator_$callClinit();
                return tj_Translator$Operator_PLUS;
            case 2:
                tj_Translator$Operator_$callClinit();
                return tj_Translator$Operator_MINUS;
            case 3:
                tj_Translator$Operator_$callClinit();
                return tj_Translator$Operator_MULTIPLY;
            case 4:
                tj_Translator$Operator_$callClinit();
                return tj_Translator$Operator_DIVIDE;
            default:
        }
        return null;
    }
    function tj_Translator_typeToString($this, $value) {
        tj_Translator$1_$callClinit();
        switch (tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[$value.$ordinal0]) {
            case 1:
                break;
            case 2:
                return $rt_s(84);
            case 3:
                return $rt_s(31);
            case 4:
                return $rt_s(164);
            case 5:
                return $rt_s(84);
            case 6:
                return $rt_s(86);
            case 7:
                return $rt_s(31);
            case 8:
                return $rt_s(164);
            case 9:
                return $rt_s(101);
            default:
                return null;
        }
        return $rt_s(86);
    }
    function tj_Translator_addTabCount($this) {
        var $tabs, $i, var$3;
        $tabs = $rt_s(10);
        $i = 0;
        while ($i < $this.$tabCount) {
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$3, $tabs), 9);
            $tabs = jl_AbstractStringBuilder_toString(var$3);
            $i = $i + 1 | 0;
        }
        return $tabs;
    }
    function tj_Interpreter() {
        var a = this; jl_Object.call(a);
        a.$lineNumber0 = 0;
        a.$globalVariables0 = null;
    }
    function tj_Interpreter_interpretFunction($this, $statements, $args, $params, $name, $isGlobal) {
        var $localVariables, $i, var$8, $val, $arg, $returnVal, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$returnVal = $thread.pop();$arg = $thread.pop();$val = $thread.pop();var$8 = $thread.pop();$i = $thread.pop();$localVariables = $thread.pop();$isGlobal = $thread.pop();$name = $thread.pop();$params = $thread.pop();$args = $thread.pop();$statements = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                $localVariables = tj_Variables__init_();
                if ($args !== null && $params !== null) {
                    $args = $args.data;
                    $params = $params.data;
                    $i = $args.length;
                    var$8 = $params.length;
                    if ($i != var$8)
                        tj_Error_ArgumentLengthMismatch($name, $this.$lineNumber0, $i, var$8);
                    $i = 0;
                    while (true) {
                        if ($i >= var$8)
                            break a;
                        $val = $params[$i];
                        $arg = $args[$i];
                        if ($arg.$type0 !== $val.$getType())
                            break;
                        tj_Variables_addVariable($localVariables, $arg.$name10, $arg.$type0, $val, $this.$lineNumber0);
                        $i = $i + 1 | 0;
                    }
                    tj_Error_ArgumentTypeMismatch($name, $this.$lineNumber0, $arg.$type0.$name0, $val.$typeString());
                    return null;
                }
            }
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_interpretBody($this, $statements, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $returnVal = $tmp;
            if ($returnVal !== null)
                return $returnVal;
            return null;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $statements, $args, $params, $name, $isGlobal, $localVariables, $i, var$8, $val, $arg, $returnVal, $ptr);
    }
    function tj_Interpreter_interpretBody($this, $statements, $funcVariables, $isGlobal) {
        var $pastResult, $localVariables, $returnVal, $statement, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$statement = $thread.pop();$returnVal = $thread.pop();$localVariables = $thread.pop();$pastResult = $thread.pop();$isGlobal = $thread.pop();$funcVariables = $thread.pop();$statements = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $pastResult = tj_Result__init_(0);
            $localVariables = tj_Variables__init_0($funcVariables);
            $returnVal = tj_Return__init_(0, null);
            $statements = ju_AbstractList_iterator($statements);
            if (!ju_AbstractList$1_hasNext($statements)) {
                if (!$returnVal.$hasReturn)
                    return null;
                return $returnVal.$value12;
            }
            $statement = ju_AbstractList$1_next($statements);
            if ($returnVal.$hasReturn)
                return $returnVal.$value12;
            $ptr = 1;
        case 1:
            tj_Interpreter_interpretStmt($this, $statement, $localVariables, $isGlobal, $pastResult, $returnVal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($statements)) {
                if (!$returnVal.$hasReturn)
                    return null;
                return $returnVal.$value12;
            }
            $statement = ju_AbstractList$1_next($statements);
            if ($returnVal.$hasReturn)
                return $returnVal.$value12;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $statements, $funcVariables, $isGlobal, $pastResult, $localVariables, $returnVal, $statement, $ptr);
    }
    function tj_Interpreter_interpretStmt($this, $stmt, $localVariables, $isGlobal, $pastResult, $returnVal) {
        var $call, var$7, $assignment, var$9, var$10, var$11, var$12, $declaration, $elseifStmt, $elseStmt, $mutationStmt, $returnStmt, $function, $ifStmt, $whileStmt, $foreachStmt, $forwhenStmt, $printStmt, $showMsgBoxStmt, $removeAtStmt, $removeFromStmt, $removeAllFromStmt, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$removeAllFromStmt = $thread.pop();$removeFromStmt = $thread.pop();$removeAtStmt = $thread.pop();$showMsgBoxStmt = $thread.pop();$printStmt = $thread.pop();$forwhenStmt = $thread.pop();$foreachStmt = $thread.pop();$whileStmt = $thread.pop();$ifStmt = $thread.pop();$function = $thread.pop();$returnStmt = $thread.pop();$mutationStmt = $thread.pop();$elseStmt = $thread.pop();$elseifStmt = $thread.pop();$declaration = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();var$10
            = $thread.pop();var$9 = $thread.pop();$assignment = $thread.pop();var$7 = $thread.pop();$call = $thread.pop();$returnVal = $thread.pop();$pastResult = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$stmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                $this.$lineNumber0 = $stmt.$getLine();
                tj_Statements_getTypeT($stmt);
                $call = tj_Statements_getTypeT($stmt);
                var$7 = (-1);
                switch (jl_String_hashCode($call)) {
                    case -2131401768:
                        if (!jl_String_equals($call, $rt_s(165)))
                            break a;
                        var$7 = 8;
                        break a;
                    case -1881067216:
                        if (!jl_String_equals($call, $rt_s(166)))
                            break a;
                        var$7 = 7;
                        break a;
                    case 2333:
                        if (!jl_String_equals($call, $rt_s(167)))
                            break a;
                        var$7 = 9;
                        break a;
                    case 2060894:
                        if (!jl_String_equals($call, $rt_s(168)))
                            break a;
                        var$7 = 2;
                        break a;
                    case 2131257:
                        if (!jl_String_equals($call, $rt_s(169)))
                            break a;
                        var$7 = 4;
                        break a;
                    case 40300074:
                        if (!jl_String_equals($call, $rt_s(170)))
                            break a;
                        var$7 = 11;
                        break a;
                    case 40843107:
                        if (!jl_String_equals($call, $rt_s(171)))
                            break a;
                        var$7 = 12;
                        break a;
                    case 76397197:
                        if (!jl_String_equals($call, $rt_s(172)))
                            break a;
                        var$7 = 13;
                        break a;
                    case 82563857:
                        if (!jl_String_equals($call, $rt_s(173)))
                            break a;
                        var$7 = 10;
                        break a;
                    case 124455258:
                        if (!jl_String_equals($call, $rt_s(174)))
                            break a;
                        var$7 = 3;
                        break a;
                    case 269804471:
                        if (!jl_String_equals($call, $rt_s(175)))
                            break a;
                        var$7 = 15;
                        break a;
                    case 1511355085:
                        if (!jl_String_equals($call, $rt_s(176)))
                            break a;
                        var$7 = 1;
                        break a;
                    case 1584208430:
                        if (!jl_String_equals($call, $rt_s(177)))
                            break a;
                        var$7 = 16;
                        break a;
                    case 1648263849:
                        if (!jl_String_equals($call, $rt_s(178)))
                            break a;
                        var$7 = 6;
                        break a;
                    case 1668381247:
                        if (!jl_String_equals($call, $rt_s(179)))
                            break a;
                        var$7 = 0;
                        break a;
                    case 1735465895:
                        if (!jl_String_equals($call, $rt_s(180)))
                            break a;
                        var$7 = 17;
                        break a;
                    case 2011295719:
                        if (!jl_String_equals($call, $rt_s(181)))
                            break a;
                        var$7 = 14;
                        break a;
                    case 2048140310:
                        if (!jl_String_equals($call, $rt_s(182)))
                            break a;
                        var$7 = 5;
                        break a;
                    default:
                }
            }
            b: {
                switch (var$7) {
                    case 0:
                        break;
                    case 1:
                        $assignment = $stmt;
                        $pastResult = $assignment.$name11;
                        $stmt = $assignment.$value13;
                        $ptr = 1;
                        continue main;
                    case 2:
                        $call = $stmt;
                        $pastResult = $call.$name12;
                        var$9 = $call.$params;
                        if (var$9 === null)
                            var$9 = $rt_createArray(tj_Expression, 0);
                        if (var$9.data[0] === null)
                            var$9 = $rt_createArray(tj_Expression, 0);
                        if (!ju_HashMap_containsKey($this.$globalVariables0.$functions, $pastResult))
                            tj_Error_FunctionNotDeclared($pastResult, $this.$lineNumber0);
                        else {
                            var$10 = tj_Variables_getFunctionArgs($this.$globalVariables0, $pastResult);
                            $returnVal = tj_Variables_getFunctionBody($this.$globalVariables0, $pastResult);
                            if (var$10 !== null) {
                                var$9 = var$9.data;
                                $call = ju_ArrayList__init_();
                                var$11 = var$9.length;
                                var$12 = 0;
                                if (var$12 < var$11) {
                                    $stmt = var$9[var$12];
                                    $ptr = 19;
                                    continue main;
                                }
                                var$9 = ju_AbstractCollection_toArray($call, $rt_createArray(tj_JavaishVal, $call.$size0));
                                $isGlobal = 0;
                                $ptr = 18;
                                continue main;
                            }
                            tj_Error_FunctionNotDeclared($pastResult, $this.$lineNumber0);
                        }
                        break b;
                    case 3:
                        $declaration = $stmt;
                        $ptr = 2;
                        continue main;
                    case 4:
                        $stmt = $stmt.$body;
                        if ($pastResult.$pastResult == 1)
                            break b;
                        $isGlobal = 0;
                        $ptr = 14;
                        continue main;
                    case 5:
                        $elseifStmt = $stmt;
                        $stmt = $elseifStmt.$condition;
                        $elseStmt = $elseifStmt.$body;
                        $ptr = 3;
                        continue main;
                    case 6:
                        $mutationStmt = $stmt;
                        $ptr = 4;
                        continue main;
                    case 7:
                        $returnStmt = $stmt;
                        $pastResult = $returnStmt.$value18;
                        $stmt = null;
                        if (!$returnStmt.$hasReturn0) {
                            $returnVal.$hasReturn = 1;
                            $returnVal.$value12 = $stmt;
                            break b;
                        }
                        $ptr = 15;
                        continue main;
                    case 8:
                        $function = $stmt;
                        $stmt = $function.$name14;
                        var$10 = $function.$args0;
                        $pastResult = $function.$body;
                        if (!$isGlobal)
                            tj_Error_FunctionNotGlobal($stmt, $this.$lineNumber0);
                        else
                            tj_Variables_addFunction($this.$globalVariables0, $stmt, $pastResult, var$10, $this.$lineNumber0);
                        break b;
                    case 9:
                        $ifStmt = $stmt;
                        $stmt = $ifStmt.$condition0;
                        $returnVal = $ifStmt.$body;
                        $ptr = 5;
                        continue main;
                    case 10:
                        $whileStmt = $stmt;
                        $ptr = 6;
                        continue main;
                    case 11:
                        $foreachStmt = $stmt;
                        $ptr = 7;
                        continue main;
                    case 12:
                        $forwhenStmt = $stmt;
                        $ptr = 8;
                        continue main;
                    case 13:
                        $printStmt = $stmt;
                        $ptr = 9;
                        continue main;
                    case 14:
                        $showMsgBoxStmt = $stmt;
                        $ptr = 10;
                        continue main;
                    case 15:
                        $removeAtStmt = $stmt;
                        $ptr = 11;
                        continue main;
                    case 16:
                        $removeFromStmt = $stmt;
                        $ptr = 12;
                        continue main;
                    case 17:
                        $removeAllFromStmt = $stmt;
                        $ptr = 13;
                        continue main;
                    default:
                        break b;
                }
            }
            return;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            if (tj_Variables_isVariable($localVariables, $pastResult))
                tj_Variables_setVariableValue($localVariables, $pastResult, $stmt, $this.$lineNumber0);
            else
                tj_Variables_setVariableValue($this.$globalVariables0, $pastResult, $stmt, $this.$lineNumber0);
            return;
        case 2:
            tj_Interpreter_evalDeclaration($this, $declaration, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 3:
            $tmp = tj_Interpreter_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            $stmt = $stmt;
            $returnVal = jl_System_out();
            $declaration = $stmt.$value23;
            $isGlobal = $pastResult.$pastResult;
            $call = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($call);
            jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($call, $rt_s(183)), $declaration), $rt_s(184)), $isGlobal);
            ji_PrintStream_println($returnVal, jl_AbstractStringBuilder_toString($call));
            if ($pastResult.$pastResult != 1 && $stmt.$value23.$value24 == 1) {
                $pastResult.$pastResult = 1;
                $isGlobal = 0;
                $ptr = 17;
                continue main;
            }
            return;
        case 4:
            tj_Interpreter_evalMutation($this, $mutationStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 5:
            $tmp = tj_Interpreter_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            if ($stmt.$value23.$value24 != 1) {
                $pastResult.$pastResult = 0;
                return;
            }
            $pastResult.$pastResult = 1;
            $isGlobal = 0;
            $ptr = 16;
            continue main;
        case 6:
            tj_Interpreter_evalWhile($this, $whileStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 7:
            tj_Interpreter_evalForEach($this, $foreachStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 8:
            tj_Interpreter_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 9:
            tj_Interpreter_evalPrint($this, $printStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 10:
            tj_Interpreter_evalShowMsgBox($this, $showMsgBoxStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 11:
            tj_Interpreter_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 12:
            tj_Interpreter_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 13:
            tj_Interpreter_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 14:
            tj_Interpreter_interpretBody($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 15:
            $tmp = tj_Interpreter_evalExpression($this, $pastResult, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            $returnVal.$hasReturn = 1;
            $returnVal.$value12 = $stmt;
            return;
        case 16:
            tj_Interpreter_interpretBody($this, $returnVal, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 17:
            tj_Interpreter_interpretBody($this, $elseStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 18:
            tj_Interpreter_interpretFunction($this, $returnVal, var$10, var$9, $pastResult, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 19:
            $tmp = tj_Interpreter_evalExpression($this, $stmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $stmt = $tmp;
            ju_ArrayList_add($call, $stmt);
            var$12 = var$12 + 1 | 0;
            if (var$12 < var$11) {
                $stmt = var$9[var$12];
                continue main;
            }
            var$9 = ju_AbstractCollection_toArray($call, $rt_createArray(tj_JavaishVal, $call.$size0));
            $isGlobal = 0;
            $ptr = 18;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $stmt, $localVariables, $isGlobal, $pastResult, $returnVal, $call, var$7, $assignment, var$9, var$10, var$11, var$12, $declaration, $elseifStmt, $elseStmt, $mutationStmt, $returnStmt, $function, $ifStmt, $whileStmt, $foreachStmt, $forwhenStmt, $printStmt, $showMsgBoxStmt, $removeAtStmt, $removeFromStmt, $removeAllFromStmt, $ptr);
    }
    function tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal) {
        var $total, $operation, $comparison, $compVal, $isComp, var$9, var$10, var$11, $elmt, $listLength, $result, $bool, $valB, $cast, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, var$29, $param, $paramValsArr, $showInputBox, $listVal, $arrayName, $listL, $length, $resultO, $variable, $list, $type, $listExpressions, $listVals, $val, $listExpression, $intList, $listValI, $intListVal, $floatList, $floatListVal, $stringList, $stringListVal, $booleanList, $booleanListVal,
        $newVal, $valNot, $input, $index, $listValVal, $valFunc, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$valFunc = $thread.pop();$listValVal = $thread.pop();$index = $thread.pop();$input = $thread.pop();$valNot = $thread.pop();$newVal = $thread.pop();$booleanListVal = $thread.pop();$booleanList = $thread.pop();$stringListVal = $thread.pop();$stringList = $thread.pop();$floatListVal = $thread.pop();$floatList = $thread.pop();$intListVal = $thread.pop();$listValI = $thread.pop();$intList = $thread.pop();$listExpression = $thread.pop();$val = $thread.pop();$listVals = $thread.pop();$listExpressions
            = $thread.pop();$type = $thread.pop();$list = $thread.pop();$variable = $thread.pop();$resultO = $thread.pop();$length = $thread.pop();$listL = $thread.pop();$arrayName = $thread.pop();$listVal = $thread.pop();$showInputBox = $thread.pop();$paramValsArr = $thread.pop();$param = $thread.pop();var$29 = $thread.pop();$paramVals = $thread.pop();$params = $thread.pop();$args = $thread.pop();$body = $thread.pop();$function = $thread.pop();$valS = $thread.pop();$string = $thread.pop();$valI = $thread.pop();$integer
            = $thread.pop();$valF = $thread.pop();$floatElmt = $thread.pop();$cast = $thread.pop();$valB = $thread.pop();$bool = $thread.pop();$result = $thread.pop();$listLength = $thread.pop();$elmt = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();var$9 = $thread.pop();$isComp = $thread.pop();$compVal = $thread.pop();$comparison = $thread.pop();$operation = $thread.pop();$total = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$expression = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $total = null;
            $operation = null;
            $comparison = null;
            $compVal = null;
            $isComp = 0;
            var$9 = (tj_Expression_getElements($expression)).data;
            var$10 = var$9.length;
            var$11 = 0;
            a: while (true) {
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                b: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(165)))
                                break b;
                            $listLength = 20;
                            break b;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(23)))
                                break b;
                            $listLength = 18;
                            break b;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(185)))
                                break b;
                            $listLength = 9;
                            break b;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(186)))
                                break b;
                            $listLength = 11;
                            break b;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(187)))
                                break b;
                            $listLength = 5;
                            break b;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(188)))
                                break b;
                            $listLength = 10;
                            break b;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(189)))
                                break b;
                            $listLength = 24;
                            break b;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(190)))
                                break b;
                            $listLength = 19;
                            break b;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(191)))
                                break b;
                            $listLength = 16;
                            break b;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(192)))
                                break b;
                            $listLength = 0;
                            break b;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(193)))
                                break b;
                            $listLength = 14;
                            break b;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(194)))
                                break b;
                            $listLength = 1;
                            break b;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(195)))
                                break b;
                            $listLength = 2;
                            break b;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(196)))
                                break b;
                            $listLength = 23;
                            break b;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(197)))
                                break b;
                            $listLength = 17;
                            break b;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(198)))
                                break b;
                            $listLength = 4;
                            break b;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(25)))
                                break b;
                            $listLength = 6;
                            break b;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(199)))
                                break b;
                            $listLength = 12;
                            break b;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(200)))
                                break b;
                            $listLength = 8;
                            break b;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(201)))
                                break b;
                            $listLength = 22;
                            break b;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(202)))
                                break b;
                            $listLength = 7;
                            break b;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(203)))
                                break b;
                            $listLength = 15;
                            break b;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(204)))
                                break b;
                            $listLength = 13;
                            break b;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(205)))
                                break b;
                            $listLength = 21;
                            break b;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(206)))
                                break b;
                            $listLength = 3;
                            break b;
                        default:
                    }
                }
                c: {
                    d: {
                        e: {
                            f: {
                                switch ($listLength) {
                                    case 0:
                                        $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                        if ($result === null)
                                            break a;
                                        if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                        $total = null;
                                        $operation = null;
                                        $comparison = null;
                                        $compVal = null;
                                        $isComp = 0;
                                        break c;
                                    case 1:
                                        $bool = $elmt;
                                        $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                        if (!$isComp) {
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                            break c;
                                        }
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                        break c;
                                    case 2:
                                        $cast = $elmt;
                                        $expression = $cast.$element;
                                        $ptr = 1;
                                        continue main;
                                    case 3:
                                        tj_Interpreter$Operator_$callClinit();
                                        $operation = tj_Interpreter$Operator_DIVIDE;
                                        break c;
                                    case 4:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_EQUAL;
                                        $isComp = 1;
                                        break c;
                                    case 5:
                                        $expression = $elmt.$expression0;
                                        $ptr = 2;
                                        continue main;
                                    case 6:
                                        $floatElmt = $elmt;
                                        $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                        if (!$isComp) {
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                            break c;
                                        }
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                        break c;
                                    case 7:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                        $isComp = 1;
                                        break c;
                                    case 8:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                        $isComp = 1;
                                        break c;
                                    case 9:
                                        $integer = $elmt;
                                        $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                        if (!$isComp) {
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                            break c;
                                        }
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                        break c;
                                    case 10:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_LESS_THAN;
                                        $isComp = 1;
                                        break c;
                                    case 11:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                        $isComp = 1;
                                        break c;
                                    case 12:
                                        tj_Interpreter$Operator_$callClinit();
                                        $operation = tj_Interpreter$Operator_MINUS;
                                        break c;
                                    case 13:
                                        tj_Interpreter$Operator_$callClinit();
                                        $operation = tj_Interpreter$Operator_MULTIPLY;
                                        break c;
                                    case 14:
                                        $expression = $elmt.$expression;
                                        $ptr = 3;
                                        continue main;
                                    case 15:
                                        tj_Interpreter$Operator_$callClinit();
                                        $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                        $isComp = 1;
                                        break c;
                                    case 16:
                                        break f;
                                    case 17:
                                        tj_Interpreter$Operator_$callClinit();
                                        $operation = tj_Interpreter$Operator_PLUS;
                                        break c;
                                    case 18:
                                        $string = $elmt;
                                        $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                        if (!$isComp) {
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                            break c;
                                        }
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                        break c;
                                    case 19:
                                        break e;
                                    case 20:
                                        $function = $elmt;
                                        $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                        $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                        $params = (tj_FunctionElmt_getParams($function)).data;
                                        $paramVals = ju_ArrayList__init_();
                                        $listLength = $params.length;
                                        var$29 = 0;
                                        if (var$29 < $listLength) {
                                            $param = $params[var$29];
                                            $ptr = 7;
                                            continue main;
                                        }
                                        $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                        $expression = tj_FunctionElmt_getName($function);
                                        $listLength = 0;
                                        $ptr = 6;
                                        continue main;
                                    case 21:
                                        $showInputBox = $elmt;
                                        $ptr = 4;
                                        continue main;
                                    case 22:
                                        $listVal = $elmt;
                                        $expression = tj_ListValElmt_getIndex($listVal);
                                        $ptr = 5;
                                        continue main;
                                    case 23:
                                        break d;
                                    case 24:
                                        $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                        if (tj_Variables_isVariable($localVariables, $arrayName))
                                            $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                        else {
                                            if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                                tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                                return null;
                                            }
                                            $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                        }
                                        if (!($expression instanceof tj_JavaishListVal)) {
                                            tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber0);
                                            return null;
                                        }
                                        $listL = tj_JavaishListVal_getValue($expression);
                                        $length = tj_JavaishInt__init_0($listL.$getLength0());
                                        if (!$isComp)
                                            $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                        else
                                            $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                        break c;
                                    default:
                                }
                                break c;
                            }
                            $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                            if ($resultO === null)
                                return null;
                            if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                                return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            $total = null;
                            $operation = null;
                            $compVal = null;
                            $isComp = 0;
                            break c;
                        }
                        $variable = $elmt;
                        if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                            $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                        else {
                            if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                                tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                                return null;
                            }
                            $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                        }
                        if (!$isComp) {
                            $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                            break c;
                        }
                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                        break c;
                    }
                    $list = $elmt;
                    $type = tj_ListElmt_getListType($list);
                    $listExpressions = tj_ListElmt_getList($list);
                    $listVals = ju_ArrayList__init_();
                    $val = ju_AbstractList_iterator($listExpressions);
                    if (ju_AbstractList$1_hasNext($val)) {
                        $listExpression = ju_AbstractList$1_next($val);
                        $ptr = 8;
                        continue main;
                    }
                    g: {
                        $expression = jl_Enum_toString($type);
                        $listLength = (-1);
                        switch (jl_String_hashCode($expression)) {
                            case -1618721555:
                                if (!jl_String_equals($expression, $rt_s(33)))
                                    break g;
                                $listLength = 0;
                                break g;
                            case -1087271889:
                                if (!jl_String_equals($expression, $rt_s(34)))
                                    break g;
                                $listLength = 2;
                                break g;
                            case 318725286:
                                if (!jl_String_equals($expression, $rt_s(35)))
                                    break g;
                                $listLength = 3;
                                break g;
                            case 675960026:
                                if (!jl_String_equals($expression, $rt_s(36)))
                                    break g;
                                $listLength = 1;
                                break g;
                            default:
                        }
                    }
                    h: {
                        switch ($listLength) {
                            case 0:
                                $intList = ju_ArrayList__init_();
                                $expression = ju_AbstractList_iterator($listVals);
                                while (ju_AbstractList$1_hasNext($expression)) {
                                    $listValI = ju_AbstractList$1_next($expression);
                                    if (!($listValI instanceof tj_JavaishInt)) {
                                        tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    ju_ArrayList_add($intList, $listValI);
                                }
                                $intListVal = tj_JavaishIntList__init_($intList);
                                if (!$isComp) {
                                    if ($operation === null) {
                                        $total = tj_JavaishListVal__init_($intListVal);
                                        break h;
                                    }
                                    tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                    break h;
                                }
                                if ($operation === null) {
                                    $compVal = tj_JavaishListVal__init_($intListVal);
                                    break h;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                break h;
                            case 1:
                                $floatList = ju_ArrayList__init_();
                                $expression = ju_AbstractList_iterator($listVals);
                                while (ju_AbstractList$1_hasNext($expression)) {
                                    $listValI = ju_AbstractList$1_next($expression);
                                    if (!($listValI instanceof tj_JavaishFloat)) {
                                        tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    ju_ArrayList_add($floatList, $listValI);
                                }
                                $floatListVal = tj_JavaishFloatList__init_($floatList);
                                if (!$isComp) {
                                    if ($operation === null) {
                                        $total = tj_JavaishListVal__init_($floatListVal);
                                        break h;
                                    }
                                    tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                    break h;
                                }
                                if ($operation === null) {
                                    $compVal = tj_JavaishListVal__init_($floatListVal);
                                    break h;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                break h;
                            case 2:
                                $stringList = ju_ArrayList__init_();
                                $val = ju_AbstractList_iterator($listVals);
                                while (ju_AbstractList$1_hasNext($val)) {
                                    $listValI = ju_AbstractList$1_next($val);
                                    if (!($listValI instanceof tj_JavaishString)) {
                                        tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    ju_ArrayList_add($stringList, $listValI);
                                }
                                $stringListVal = tj_JavaishStringList__init_($stringList);
                                if (!$isComp) {
                                    if ($operation === null) {
                                        $total = tj_JavaishListVal__init_($stringListVal);
                                        break h;
                                    }
                                    tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                    break h;
                                }
                                if ($operation === null) {
                                    $compVal = tj_JavaishListVal__init_($stringListVal);
                                    break h;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                break h;
                            case 3:
                                $booleanList = ju_ArrayList__init_();
                                $expression = ju_AbstractList_iterator($listVals);
                                while (ju_AbstractList$1_hasNext($expression)) {
                                    $listValI = ju_AbstractList$1_next($expression);
                                    if (!($listValI instanceof tj_JavaishBoolean)) {
                                        tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    ju_ArrayList_add($booleanList, $listValI);
                                }
                                $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                                if (!$isComp) {
                                    if ($operation === null) {
                                        $total = tj_JavaishListVal__init_($booleanListVal);
                                        break h;
                                    }
                                    tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                    break h;
                                }
                                if ($operation === null) {
                                    $compVal = tj_JavaishListVal__init_($booleanListVal);
                                    break h;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                break h;
                            default:
                        }
                    }
                }
                var$11 = var$11 + 1 | 0;
            }
            return null;
        case 1:
            i: {
                $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
                if ($rt_suspending()) {
                    break main;
                }
                $val = $tmp;
                $expression = jl_Enum_toString($cast.$castType);
                $listLength = (-1);
                switch (jl_String_hashCode($expression)) {
                    case -1838656495:
                        if (!jl_String_equals($expression, $rt_s(23)))
                            break i;
                        $listLength = 2;
                        break i;
                    case 72655:
                        if (!jl_String_equals($expression, $rt_s(24)))
                            break i;
                        $listLength = 1;
                        break i;
                    case 66988604:
                        if (!jl_String_equals($expression, $rt_s(25)))
                            break i;
                        $listLength = 0;
                        break i;
                    default:
                }
            }
            j: {
                switch ($listLength) {
                    case 0:
                        if ($val instanceof tj_JavaishFloat) {
                            $expression = $val;
                            break j;
                        }
                        try {
                            $listValI = $val;
                            if ($val instanceof tj_JavaishInt) {
                                $listValI = $val;
                                $expression = new tj_JavaishFloat;
                                $listValI = $expression;
                                tj_JavaishFloat__init_0($expression, jl_Integer_intValue(tj_JavaishInt_getValue($val)));
                            } else {
                                $listValI = $val;
                                if (!($val instanceof tj_JavaishString))
                                    $expression = $val;
                                else {
                                    $listValI = $val;
                                    $expression = new tj_JavaishFloat;
                                    $listValI = $expression;
                                    tj_JavaishFloat__init_0($expression, jl_Float_parseFloat(tj_JavaishString_getValue($val)));
                                }
                            }
                            break j;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($listValI.$typeString(), $this.$lineNumber0, $rt_s(86));
                        $expression = $listValI;
                        break j;
                    case 1:
                        if ($val instanceof tj_JavaishInt) {
                            $expression = $val;
                            break j;
                        }
                        try {
                            $listValI = $val;
                            if ($val instanceof tj_JavaishFloat) {
                                $listValI = $val;
                                $expression = new tj_JavaishInt;
                                $listValI = $expression;
                                tj_JavaishInt__init_($expression, jl_Math_round(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                            } else {
                                $listValI = $val;
                                if (!($val instanceof tj_JavaishString))
                                    $expression = $val;
                                else {
                                    $listValI = $val;
                                    $expression = new tj_JavaishInt;
                                    $listValI = $expression;
                                    tj_JavaishInt__init_($expression, jl_Integer_parseInt0(tj_JavaishString_getValue($val)));
                                }
                            }
                            break j;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($rt_s(32), $this.$lineNumber0, $listValI.$typeString());
                        $expression = $listValI;
                        break j;
                    case 2:
                        if ($val instanceof tj_JavaishString) {
                            $expression = $val;
                            break j;
                        }
                        try {
                            $listValI = $val;
                            if ($val instanceof tj_JavaishFloat) {
                                $listValI = $val;
                                $expression = new tj_JavaishString;
                                $listValI = $expression;
                                tj_JavaishString__init_($expression, jl_Float_toString(jl_Float_floatValue(tj_JavaishFloat_getValue($val))));
                            } else {
                                $listValI = $val;
                                if (!($val instanceof tj_JavaishInt))
                                    $expression = $val;
                                else {
                                    $listValI = $val;
                                    $expression = new tj_JavaishString;
                                    $listValI = $expression;
                                    tj_JavaishString__init_($expression, jl_Integer_toString(jl_Integer_intValue(tj_JavaishInt_getValue($val))));
                                }
                            }
                            break j;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        tj_Error_UnableToParse($listValI.$typeString(), $this.$lineNumber0, $rt_s(31));
                        $expression = $listValI;
                        break j;
                    default:
                }
                $expression = $val;
            }
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
            k: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                l: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(165)))
                                break l;
                            $listLength = 20;
                            break l;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(23)))
                                break l;
                            $listLength = 18;
                            break l;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(185)))
                                break l;
                            $listLength = 9;
                            break l;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(186)))
                                break l;
                            $listLength = 11;
                            break l;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(187)))
                                break l;
                            $listLength = 5;
                            break l;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(188)))
                                break l;
                            $listLength = 10;
                            break l;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(189)))
                                break l;
                            $listLength = 24;
                            break l;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(190)))
                                break l;
                            $listLength = 19;
                            break l;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(191)))
                                break l;
                            $listLength = 16;
                            break l;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(192)))
                                break l;
                            $listLength = 0;
                            break l;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(193)))
                                break l;
                            $listLength = 14;
                            break l;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(194)))
                                break l;
                            $listLength = 1;
                            break l;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(195)))
                                break l;
                            $listLength = 2;
                            break l;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(196)))
                                break l;
                            $listLength = 23;
                            break l;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(197)))
                                break l;
                            $listLength = 17;
                            break l;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(198)))
                                break l;
                            $listLength = 4;
                            break l;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(25)))
                                break l;
                            $listLength = 6;
                            break l;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(199)))
                                break l;
                            $listLength = 12;
                            break l;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(200)))
                                break l;
                            $listLength = 8;
                            break l;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(201)))
                                break l;
                            $listLength = 22;
                            break l;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(202)))
                                break l;
                            $listLength = 7;
                            break l;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(203)))
                                break l;
                            $listLength = 15;
                            break l;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(204)))
                                break l;
                            $listLength = 13;
                            break l;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(205)))
                                break l;
                            $listLength = 21;
                            break l;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(206)))
                                break l;
                            $listLength = 3;
                            break l;
                        default:
                    }
                }
                m: {
                    n: {
                        g: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break k;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue k;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue k;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue k;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue k;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue k;
                                case 5:
                                    $expression = $elmt.$expression0;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue k;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue k;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue k;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue k;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue k;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue k;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue k;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue k;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue k;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue k;
                                case 14:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue k;
                                case 16:
                                    break g;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue k;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue k;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue k;
                                case 19:
                                    break n;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break m;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_0($listL.$getLength0());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue k;
                                default:
                            }
                            continue k;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue k;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue k;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue k;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                o: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(33)))
                                break o;
                            $listLength = 0;
                            break o;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(34)))
                                break o;
                            $listLength = 2;
                            break o;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(35)))
                                break o;
                            $listLength = 3;
                            break o;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(36)))
                                break o;
                            $listLength = 1;
                            break o;
                        default:
                    }
                }
                p: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break p;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                break p;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break p;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                            break p;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break p;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                break p;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break p;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                            break p;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break p;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                break p;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break p;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                            break p;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break p;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                break p;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break p;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                            break p;
                        default:
                    }
                }
            }
            return null;
        case 2:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $newVal = $tmp;
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $newVal);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $newVal);
            q: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                r: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(165)))
                                break r;
                            $listLength = 20;
                            break r;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(23)))
                                break r;
                            $listLength = 18;
                            break r;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(185)))
                                break r;
                            $listLength = 9;
                            break r;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(186)))
                                break r;
                            $listLength = 11;
                            break r;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(187)))
                                break r;
                            $listLength = 5;
                            break r;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(188)))
                                break r;
                            $listLength = 10;
                            break r;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(189)))
                                break r;
                            $listLength = 24;
                            break r;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(190)))
                                break r;
                            $listLength = 19;
                            break r;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(191)))
                                break r;
                            $listLength = 16;
                            break r;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(192)))
                                break r;
                            $listLength = 0;
                            break r;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(193)))
                                break r;
                            $listLength = 14;
                            break r;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(194)))
                                break r;
                            $listLength = 1;
                            break r;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(195)))
                                break r;
                            $listLength = 2;
                            break r;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(196)))
                                break r;
                            $listLength = 23;
                            break r;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(197)))
                                break r;
                            $listLength = 17;
                            break r;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(198)))
                                break r;
                            $listLength = 4;
                            break r;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(25)))
                                break r;
                            $listLength = 6;
                            break r;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(199)))
                                break r;
                            $listLength = 12;
                            break r;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(200)))
                                break r;
                            $listLength = 8;
                            break r;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(201)))
                                break r;
                            $listLength = 22;
                            break r;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(202)))
                                break r;
                            $listLength = 7;
                            break r;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(203)))
                                break r;
                            $listLength = 15;
                            break r;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(204)))
                                break r;
                            $listLength = 13;
                            break r;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(205)))
                                break r;
                            $listLength = 21;
                            break r;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(206)))
                                break r;
                            $listLength = 3;
                            break r;
                        default:
                    }
                }
                s: {
                    f: {
                        t: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break q;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue q;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue q;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue q;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 5:
                                    $expression = $elmt.$expression0;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue q;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue q;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue q;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue q;
                                case 14:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 16:
                                    break t;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue q;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue q;
                                case 19:
                                    break f;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break s;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_0($listL.$getLength0());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue q;
                                default:
                            }
                            continue q;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue q;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue q;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue q;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                u: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(33)))
                                break u;
                            $listLength = 0;
                            break u;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(34)))
                                break u;
                            $listLength = 2;
                            break u;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(35)))
                                break u;
                            $listLength = 3;
                            break u;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(36)))
                                break u;
                            $listLength = 1;
                            break u;
                        default:
                    }
                }
                v: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                            break v;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                            break v;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                            break v;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                            break v;
                        default:
                    }
                }
            }
            return null;
        case 3:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $valNot = $tmp;
            if (!($valNot instanceof tj_JavaishBoolean))
                tj_Error_TypeMismatch($rt_s(30), $valNot.$typeString(), $this.$lineNumber0);
            else {
                $expression = jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($valNot)) != 1 ? tj_JavaishBoolean__init_(jl_Boolean_valueOf(1)) : tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                if (!$isComp)
                    $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                else
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
            }
            w: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                x: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(165)))
                                break x;
                            $listLength = 20;
                            break x;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(23)))
                                break x;
                            $listLength = 18;
                            break x;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(185)))
                                break x;
                            $listLength = 9;
                            break x;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(186)))
                                break x;
                            $listLength = 11;
                            break x;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(187)))
                                break x;
                            $listLength = 5;
                            break x;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(188)))
                                break x;
                            $listLength = 10;
                            break x;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(189)))
                                break x;
                            $listLength = 24;
                            break x;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(190)))
                                break x;
                            $listLength = 19;
                            break x;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(191)))
                                break x;
                            $listLength = 16;
                            break x;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(192)))
                                break x;
                            $listLength = 0;
                            break x;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(193)))
                                break x;
                            $listLength = 14;
                            break x;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(194)))
                                break x;
                            $listLength = 1;
                            break x;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(195)))
                                break x;
                            $listLength = 2;
                            break x;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(196)))
                                break x;
                            $listLength = 23;
                            break x;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(197)))
                                break x;
                            $listLength = 17;
                            break x;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(198)))
                                break x;
                            $listLength = 4;
                            break x;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(25)))
                                break x;
                            $listLength = 6;
                            break x;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(199)))
                                break x;
                            $listLength = 12;
                            break x;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(200)))
                                break x;
                            $listLength = 8;
                            break x;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(201)))
                                break x;
                            $listLength = 22;
                            break x;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(202)))
                                break x;
                            $listLength = 7;
                            break x;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(203)))
                                break x;
                            $listLength = 15;
                            break x;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(204)))
                                break x;
                            $listLength = 13;
                            break x;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(205)))
                                break x;
                            $listLength = 21;
                            break x;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(206)))
                                break x;
                            $listLength = 3;
                            break x;
                        default:
                    }
                }
                y: {
                    z: {
                        ba: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break w;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue w;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue w;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue w;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue w;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue w;
                                case 5:
                                    $expression = $elmt.$expression0;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue w;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue w;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue w;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue w;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue w;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue w;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue w;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue w;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue w;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue w;
                                case 14:
                                    $expression = $elmt.$expression;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue w;
                                case 16:
                                    break ba;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue w;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue w;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue w;
                                case 19:
                                    break z;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break y;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_0($listL.$getLength0());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue w;
                                default:
                            }
                            continue w;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue w;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue w;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue w;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                bb: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(33)))
                                break bb;
                            $listLength = 0;
                            break bb;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(34)))
                                break bb;
                            $listLength = 2;
                            break bb;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(35)))
                                break bb;
                            $listLength = 3;
                            break bb;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(36)))
                                break bb;
                            $listLength = 1;
                            break bb;
                        default:
                    }
                }
                bc: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break bc;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                break bc;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break bc;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                            break bc;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break bc;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                break bc;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break bc;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                            break bc;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break bc;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                break bc;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break bc;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                            break bc;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break bc;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                break bc;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break bc;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                            break bc;
                        default:
                    }
                }
            }
            return null;
        case 4:
            $tmp = tj_Interpreter_evalShowInputBox($this, $showInputBox, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $input = $tmp;
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $input);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $input);
            q: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                r: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(165)))
                                break r;
                            $listLength = 20;
                            break r;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(23)))
                                break r;
                            $listLength = 18;
                            break r;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(185)))
                                break r;
                            $listLength = 9;
                            break r;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(186)))
                                break r;
                            $listLength = 11;
                            break r;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(187)))
                                break r;
                            $listLength = 5;
                            break r;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(188)))
                                break r;
                            $listLength = 10;
                            break r;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(189)))
                                break r;
                            $listLength = 24;
                            break r;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(190)))
                                break r;
                            $listLength = 19;
                            break r;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(191)))
                                break r;
                            $listLength = 16;
                            break r;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(192)))
                                break r;
                            $listLength = 0;
                            break r;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(193)))
                                break r;
                            $listLength = 14;
                            break r;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(194)))
                                break r;
                            $listLength = 1;
                            break r;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(195)))
                                break r;
                            $listLength = 2;
                            break r;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(196)))
                                break r;
                            $listLength = 23;
                            break r;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(197)))
                                break r;
                            $listLength = 17;
                            break r;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(198)))
                                break r;
                            $listLength = 4;
                            break r;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(25)))
                                break r;
                            $listLength = 6;
                            break r;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(199)))
                                break r;
                            $listLength = 12;
                            break r;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(200)))
                                break r;
                            $listLength = 8;
                            break r;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(201)))
                                break r;
                            $listLength = 22;
                            break r;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(202)))
                                break r;
                            $listLength = 7;
                            break r;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(203)))
                                break r;
                            $listLength = 15;
                            break r;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(204)))
                                break r;
                            $listLength = 13;
                            break r;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(205)))
                                break r;
                            $listLength = 21;
                            break r;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(206)))
                                break r;
                            $listLength = 3;
                            break r;
                        default:
                    }
                }
                s: {
                    f: {
                        t: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break q;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue q;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue q;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue q;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 5:
                                    $expression = $elmt.$expression0;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue q;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue q;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue q;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue q;
                                case 14:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 16:
                                    break t;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue q;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue q;
                                case 19:
                                    break f;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break s;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_0($listL.$getLength0());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue q;
                                default:
                            }
                            continue q;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue q;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue q;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue q;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                u: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(33)))
                                break u;
                            $listLength = 0;
                            break u;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(34)))
                                break u;
                            $listLength = 2;
                            break u;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(35)))
                                break u;
                            $listLength = 3;
                            break u;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(36)))
                                break u;
                            $listLength = 1;
                            break u;
                        default:
                    }
                }
                v: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                            break v;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                            break v;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                            break v;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                            break v;
                        default:
                    }
                }
            }
            return null;
        case 5:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $index = $tmp;
            if (!($index instanceof tj_JavaishInt)) {
                tj_Error_TypeMismatch($rt_s(32), $index.$typeString(), $this.$lineNumber0);
                return null;
            }
            $expression = $index;
            if (tj_Variables_isVariable($localVariables, tj_ListValElmt_getListName($listVal)))
                $val = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($localVariables, tj_ListValElmt_getListName($listVal)));
            else {
                if (!tj_Variables_isVariable($this.$globalVariables0, tj_ListValElmt_getListName($listVal))) {
                    tj_Error_VariableNotDeclared(tj_ListValElmt_getListName($listVal), $this.$lineNumber0);
                    return null;
                }
                $val = tj_JavaishListVal_getValue(tj_Variables_getVariableValue($this.$globalVariables0, tj_ListValElmt_getListName($listVal)));
            }
            $listLength = $val.$getLength0();
            if (jl_Integer_intValue(tj_JavaishInt_getValue($expression)) >= $listLength) {
                tj_Error_IndexOutOfBounds(jl_Integer_intValue(tj_JavaishInt_getValue($expression)), $this.$lineNumber0, $listLength);
                return null;
            }
            $listValVal = $val.$getValue7(jl_Integer_intValue(tj_JavaishInt_getValue($expression)));
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $listValVal);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $listValVal);
            x: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                bd: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(165)))
                                break bd;
                            $listLength = 20;
                            break bd;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(23)))
                                break bd;
                            $listLength = 18;
                            break bd;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(185)))
                                break bd;
                            $listLength = 9;
                            break bd;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(186)))
                                break bd;
                            $listLength = 11;
                            break bd;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(187)))
                                break bd;
                            $listLength = 5;
                            break bd;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(188)))
                                break bd;
                            $listLength = 10;
                            break bd;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(189)))
                                break bd;
                            $listLength = 24;
                            break bd;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(190)))
                                break bd;
                            $listLength = 19;
                            break bd;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(191)))
                                break bd;
                            $listLength = 16;
                            break bd;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(192)))
                                break bd;
                            $listLength = 0;
                            break bd;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(193)))
                                break bd;
                            $listLength = 14;
                            break bd;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(194)))
                                break bd;
                            $listLength = 1;
                            break bd;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(195)))
                                break bd;
                            $listLength = 2;
                            break bd;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(196)))
                                break bd;
                            $listLength = 23;
                            break bd;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(197)))
                                break bd;
                            $listLength = 17;
                            break bd;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(198)))
                                break bd;
                            $listLength = 4;
                            break bd;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(25)))
                                break bd;
                            $listLength = 6;
                            break bd;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(199)))
                                break bd;
                            $listLength = 12;
                            break bd;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(200)))
                                break bd;
                            $listLength = 8;
                            break bd;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(201)))
                                break bd;
                            $listLength = 22;
                            break bd;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(202)))
                                break bd;
                            $listLength = 7;
                            break bd;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(203)))
                                break bd;
                            $listLength = 15;
                            break bd;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(204)))
                                break bd;
                            $listLength = 13;
                            break bd;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(205)))
                                break bd;
                            $listLength = 21;
                            break bd;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(206)))
                                break bd;
                            $listLength = 3;
                            break bd;
                        default:
                    }
                }
                be: {
                    ba: {
                        bf: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break x;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue x;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue x;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue x;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue x;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue x;
                                case 5:
                                    $expression = $elmt.$expression0;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue x;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue x;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue x;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue x;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue x;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue x;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue x;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue x;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue x;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue x;
                                case 14:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue x;
                                case 16:
                                    break bf;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue x;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue x;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue x;
                                case 19:
                                    break ba;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    continue main;
                                case 23:
                                    break be;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_0($listL.$getLength0());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue x;
                                default:
                            }
                            continue x;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue x;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue x;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue x;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                bg: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(33)))
                                break bg;
                            $listLength = 0;
                            break bg;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(34)))
                                break bg;
                            $listLength = 2;
                            break bg;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(35)))
                                break bg;
                            $listLength = 3;
                            break bg;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(36)))
                                break bg;
                            $listLength = 1;
                            break bg;
                        default:
                    }
                }
                bh: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break bh;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                break bh;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break bh;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                            break bh;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break bh;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                break bh;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break bh;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                            break bh;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break bh;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                break bh;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break bh;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                            break bh;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break bh;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                break bh;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break bh;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                            break bh;
                        default:
                    }
                }
            }
            return null;
        case 6:
            $tmp = tj_Interpreter_interpretFunction($this, $body, $args, $paramValsArr, $expression, $listLength);
            if ($rt_suspending()) {
                break main;
            }
            $valFunc = $tmp;
            if (!$isComp)
                $total = tj_Interpreter_performOperation($this, $operation, $total, $valFunc);
            else
                $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valFunc);
            q: while (true) {
                var$11 = var$11 + 1 | 0;
                if (var$11 >= var$10) {
                    if (!$isComp)
                        return $total;
                    return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                }
                r: {
                    $elmt = var$9[var$11];
                    $expression = tj_Element_getTypeS($elmt);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -2131401768:
                            if (!jl_String_equals($expression, $rt_s(165)))
                                break r;
                            $listLength = 20;
                            break r;
                        case -1838656495:
                            if (!jl_String_equals($expression, $rt_s(23)))
                                break r;
                            $listLength = 18;
                            break r;
                        case -1618932450:
                            if (!jl_String_equals($expression, $rt_s(185)))
                                break r;
                            $listLength = 9;
                            break r;
                        case -1583968932:
                            if (!jl_String_equals($expression, $rt_s(186)))
                                break r;
                            $listLength = 11;
                            break r;
                        case -1310359912:
                            if (!jl_String_equals($expression, $rt_s(187)))
                                break r;
                            $listLength = 5;
                            break r;
                        case -1112834937:
                            if (!jl_String_equals($expression, $rt_s(188)))
                                break r;
                            $listLength = 10;
                            break r;
                        case -715433377:
                            if (!jl_String_equals($expression, $rt_s(189)))
                                break r;
                            $listLength = 24;
                            break r;
                        case -466959748:
                            if (!jl_String_equals($expression, $rt_s(190)))
                                break r;
                            $listLength = 19;
                            break r;
                        case 2531:
                            if (!jl_String_equals($expression, $rt_s(191)))
                                break r;
                            $listLength = 16;
                            break r;
                        case 64951:
                            if (!jl_String_equals($expression, $rt_s(192)))
                                break r;
                            $listLength = 0;
                            break r;
                        case 77491:
                            if (!jl_String_equals($expression, $rt_s(193)))
                                break r;
                            $listLength = 14;
                            break r;
                        case 2044650:
                            if (!jl_String_equals($expression, $rt_s(194)))
                                break r;
                            $listLength = 1;
                            break r;
                        case 2061119:
                            if (!jl_String_equals($expression, $rt_s(195)))
                                break r;
                            $listLength = 2;
                            break r;
                        case 2336926:
                            if (!jl_String_equals($expression, $rt_s(196)))
                                break r;
                            $listLength = 23;
                            break r;
                        case 2459034:
                            if (!jl_String_equals($expression, $rt_s(197)))
                                break r;
                            $listLength = 17;
                            break r;
                        case 66219796:
                            if (!jl_String_equals($expression, $rt_s(198)))
                                break r;
                            $listLength = 4;
                            break r;
                        case 66988604:
                            if (!jl_String_equals($expression, $rt_s(25)))
                                break r;
                            $listLength = 6;
                            break r;
                        case 73363536:
                            if (!jl_String_equals($expression, $rt_s(199)))
                                break r;
                            $listLength = 12;
                            break r;
                        case 360410235:
                            if (!jl_String_equals($expression, $rt_s(200)))
                                break r;
                            $listLength = 8;
                            break r;
                        case 899970467:
                            if (!jl_String_equals($expression, $rt_s(201)))
                                break r;
                            $listLength = 22;
                            break r;
                        case 972152550:
                            if (!jl_String_equals($expression, $rt_s(202)))
                                break r;
                            $listLength = 7;
                            break r;
                        case 1022422664:
                            if (!jl_String_equals($expression, $rt_s(203)))
                                break r;
                            $listLength = 15;
                            break r;
                        case 1436456484:
                            if (!jl_String_equals($expression, $rt_s(204)))
                                break r;
                            $listLength = 13;
                            break r;
                        case 1871384510:
                            if (!jl_String_equals($expression, $rt_s(205)))
                                break r;
                            $listLength = 21;
                            break r;
                        case 2016833657:
                            if (!jl_String_equals($expression, $rt_s(206)))
                                break r;
                            $listLength = 3;
                            break r;
                        default:
                    }
                }
                s: {
                    f: {
                        t: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break q;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue q;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue q;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue q;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 5:
                                    $expression = $elmt.$expression0;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue q;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue q;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue q;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue q;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue q;
                                case 14:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue q;
                                case 16:
                                    break t;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue q;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue q;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue q;
                                case 19:
                                    break f;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break s;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_0($listL.$getLength0());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue q;
                                default:
                            }
                            continue q;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue q;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue q;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                    continue q;
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    $ptr = 8;
                    continue main;
                }
                u: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(33)))
                                break u;
                            $listLength = 0;
                            break u;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(34)))
                                break u;
                            $listLength = 2;
                            break u;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(35)))
                                break u;
                            $listLength = 3;
                            break u;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(36)))
                                break u;
                            $listLength = 1;
                            break u;
                        default:
                    }
                }
                v: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                            break v;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                            break v;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                            break v;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break v;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                break v;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break v;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                            break v;
                        default:
                    }
                }
            }
            return null;
        case 7:
            $tmp = tj_Interpreter_evalExpression($this, $param, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $expression = $tmp;
            ju_ArrayList_add($paramVals, $expression);
            var$29 = var$29 + 1 | 0;
            if (var$29 < $listLength) {
                $param = $params[var$29];
                continue main;
            }
            $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
            $expression = tj_FunctionElmt_getName($function);
            $listLength = 0;
            $ptr = 6;
            continue main;
        case 8:
            $tmp = tj_Interpreter_evalExpression($this, $listExpression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $expression = $tmp;
            ju_ArrayList_add($listVals, $expression);
            a: while (true) {
                if (ju_AbstractList$1_hasNext($val)) {
                    $listExpression = ju_AbstractList$1_next($val);
                    continue main;
                }
                b: {
                    $expression = jl_Enum_toString($type);
                    $listLength = (-1);
                    switch (jl_String_hashCode($expression)) {
                        case -1618721555:
                            if (!jl_String_equals($expression, $rt_s(33)))
                                break b;
                            $listLength = 0;
                            break b;
                        case -1087271889:
                            if (!jl_String_equals($expression, $rt_s(34)))
                                break b;
                            $listLength = 2;
                            break b;
                        case 318725286:
                            if (!jl_String_equals($expression, $rt_s(35)))
                                break b;
                            $listLength = 3;
                            break b;
                        case 675960026:
                            if (!jl_String_equals($expression, $rt_s(36)))
                                break b;
                            $listLength = 1;
                            break b;
                        default:
                    }
                }
                bi: {
                    switch ($listLength) {
                        case 0:
                            $intList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishInt)) {
                                    tj_Error_TypeMismatch($rt_s(32), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($intList, $listValI);
                            }
                            $intListVal = tj_JavaishIntList__init_($intList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($intListVal);
                                    break bi;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                                break bi;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($intListVal);
                                break bi;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(40), $this.$lineNumber0);
                            break bi;
                        case 1:
                            $floatList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishFloat)) {
                                    tj_Error_TypeMismatch($rt_s(29), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($floatList, $listValI);
                            }
                            $floatListVal = tj_JavaishFloatList__init_($floatList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($floatListVal);
                                    break bi;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                                break bi;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($floatListVal);
                                break bi;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(37), $this.$lineNumber0);
                            break bi;
                        case 2:
                            $stringList = ju_ArrayList__init_();
                            $val = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($val)) {
                                $listValI = ju_AbstractList$1_next($val);
                                if (!($listValI instanceof tj_JavaishString)) {
                                    tj_Error_TypeMismatch($rt_s(31), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($stringList, $listValI);
                            }
                            $stringListVal = tj_JavaishStringList__init_($stringList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($stringListVal);
                                    break bi;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                                break bi;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($stringListVal);
                                break bi;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(39), $this.$lineNumber0);
                            break bi;
                        case 3:
                            $booleanList = ju_ArrayList__init_();
                            $expression = ju_AbstractList_iterator($listVals);
                            while (ju_AbstractList$1_hasNext($expression)) {
                                $listValI = ju_AbstractList$1_next($expression);
                                if (!($listValI instanceof tj_JavaishBoolean)) {
                                    tj_Error_TypeMismatch($rt_s(30), $listValI.$typeString(), $this.$lineNumber0);
                                    return null;
                                }
                                ju_ArrayList_add($booleanList, $listValI);
                            }
                            $booleanListVal = tj_JavaishBooleanList__init_($booleanList);
                            if (!$isComp) {
                                if ($operation === null) {
                                    $total = tj_JavaishListVal__init_($booleanListVal);
                                    break bi;
                                }
                                tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                                break bi;
                            }
                            if ($operation === null) {
                                $compVal = tj_JavaishListVal__init_($booleanListVal);
                                break bi;
                            }
                            tj_Error_CantPerformOperation(jl_Enum_toString($operation), $rt_s(38), $this.$lineNumber0);
                            break bi;
                        default:
                    }
                }
                bj: while (true) {
                    var$11 = var$11 + 1 | 0;
                    if (var$11 >= var$10) {
                        if (!$isComp)
                            return $total;
                        return tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                    }
                    bk: {
                        $elmt = var$9[var$11];
                        $expression = tj_Element_getTypeS($elmt);
                        $listLength = (-1);
                        switch (jl_String_hashCode($expression)) {
                            case -2131401768:
                                if (!jl_String_equals($expression, $rt_s(165)))
                                    break bk;
                                $listLength = 20;
                                break bk;
                            case -1838656495:
                                if (!jl_String_equals($expression, $rt_s(23)))
                                    break bk;
                                $listLength = 18;
                                break bk;
                            case -1618932450:
                                if (!jl_String_equals($expression, $rt_s(185)))
                                    break bk;
                                $listLength = 9;
                                break bk;
                            case -1583968932:
                                if (!jl_String_equals($expression, $rt_s(186)))
                                    break bk;
                                $listLength = 11;
                                break bk;
                            case -1310359912:
                                if (!jl_String_equals($expression, $rt_s(187)))
                                    break bk;
                                $listLength = 5;
                                break bk;
                            case -1112834937:
                                if (!jl_String_equals($expression, $rt_s(188)))
                                    break bk;
                                $listLength = 10;
                                break bk;
                            case -715433377:
                                if (!jl_String_equals($expression, $rt_s(189)))
                                    break bk;
                                $listLength = 24;
                                break bk;
                            case -466959748:
                                if (!jl_String_equals($expression, $rt_s(190)))
                                    break bk;
                                $listLength = 19;
                                break bk;
                            case 2531:
                                if (!jl_String_equals($expression, $rt_s(191)))
                                    break bk;
                                $listLength = 16;
                                break bk;
                            case 64951:
                                if (!jl_String_equals($expression, $rt_s(192)))
                                    break bk;
                                $listLength = 0;
                                break bk;
                            case 77491:
                                if (!jl_String_equals($expression, $rt_s(193)))
                                    break bk;
                                $listLength = 14;
                                break bk;
                            case 2044650:
                                if (!jl_String_equals($expression, $rt_s(194)))
                                    break bk;
                                $listLength = 1;
                                break bk;
                            case 2061119:
                                if (!jl_String_equals($expression, $rt_s(195)))
                                    break bk;
                                $listLength = 2;
                                break bk;
                            case 2336926:
                                if (!jl_String_equals($expression, $rt_s(196)))
                                    break bk;
                                $listLength = 23;
                                break bk;
                            case 2459034:
                                if (!jl_String_equals($expression, $rt_s(197)))
                                    break bk;
                                $listLength = 17;
                                break bk;
                            case 66219796:
                                if (!jl_String_equals($expression, $rt_s(198)))
                                    break bk;
                                $listLength = 4;
                                break bk;
                            case 66988604:
                                if (!jl_String_equals($expression, $rt_s(25)))
                                    break bk;
                                $listLength = 6;
                                break bk;
                            case 73363536:
                                if (!jl_String_equals($expression, $rt_s(199)))
                                    break bk;
                                $listLength = 12;
                                break bk;
                            case 360410235:
                                if (!jl_String_equals($expression, $rt_s(200)))
                                    break bk;
                                $listLength = 8;
                                break bk;
                            case 899970467:
                                if (!jl_String_equals($expression, $rt_s(201)))
                                    break bk;
                                $listLength = 22;
                                break bk;
                            case 972152550:
                                if (!jl_String_equals($expression, $rt_s(202)))
                                    break bk;
                                $listLength = 7;
                                break bk;
                            case 1022422664:
                                if (!jl_String_equals($expression, $rt_s(203)))
                                    break bk;
                                $listLength = 15;
                                break bk;
                            case 1436456484:
                                if (!jl_String_equals($expression, $rt_s(204)))
                                    break bk;
                                $listLength = 13;
                                break bk;
                            case 1871384510:
                                if (!jl_String_equals($expression, $rt_s(205)))
                                    break bk;
                                $listLength = 21;
                                break bk;
                            case 2016833657:
                                if (!jl_String_equals($expression, $rt_s(206)))
                                    break bk;
                                $listLength = 3;
                                break bk;
                            default:
                        }
                    }
                    bl: {
                        bm: {
                            switch ($listLength) {
                                case 0:
                                    $result = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                                    if ($result === null)
                                        break a;
                                    if (!jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($result)))
                                        return tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    $total = null;
                                    $operation = null;
                                    $comparison = null;
                                    $compVal = null;
                                    $isComp = 0;
                                    continue bj;
                                case 1:
                                    $bool = $elmt;
                                    $valB = tj_JavaishBoolean__init_(jl_Boolean_valueOf(tj_BoolElmt_getValue($bool)));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valB);
                                        continue bj;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valB);
                                    continue bj;
                                case 2:
                                    $cast = $elmt;
                                    $expression = $cast.$element;
                                    $ptr = 1;
                                    continue main;
                                case 3:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_DIVIDE;
                                    continue bj;
                                case 4:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_EQUAL;
                                    $isComp = 1;
                                    continue bj;
                                case 5:
                                    $expression = $elmt.$expression0;
                                    $ptr = 2;
                                    continue main;
                                case 6:
                                    $floatElmt = $elmt;
                                    $valF = tj_JavaishFloat__init_(tj_FloatElmt_getValue($floatElmt));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valF);
                                        continue bj;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valF);
                                    continue bj;
                                case 7:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN;
                                    $isComp = 1;
                                    continue bj;
                                case 8:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_GREATER_THAN_EQUAL;
                                    $isComp = 1;
                                    continue bj;
                                case 9:
                                    $integer = $elmt;
                                    $valI = tj_JavaishInt__init_0(tj_IntElmt_getValue($integer));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valI);
                                        continue bj;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valI);
                                    continue bj;
                                case 10:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN;
                                    $isComp = 1;
                                    continue bj;
                                case 11:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_LESS_THAN_EQUAL;
                                    $isComp = 1;
                                    continue bj;
                                case 12:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MINUS;
                                    continue bj;
                                case 13:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_MULTIPLY;
                                    continue bj;
                                case 14:
                                    $expression = $elmt.$expression;
                                    $ptr = 3;
                                    continue main;
                                case 15:
                                    tj_Interpreter$Operator_$callClinit();
                                    $comparison = tj_Interpreter$Operator_NOT_EQUAL;
                                    $isComp = 1;
                                    continue bj;
                                case 16:
                                    break bm;
                                case 17:
                                    tj_Interpreter$Operator_$callClinit();
                                    $operation = tj_Interpreter$Operator_PLUS;
                                    continue bj;
                                case 18:
                                    $string = $elmt;
                                    $valS = tj_JavaishString__init_0(tj_StringElmt_getValue($string));
                                    if (!$isComp) {
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $valS);
                                        continue bj;
                                    }
                                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $valS);
                                    continue bj;
                                case 19:
                                    break bl;
                                case 20:
                                    $function = $elmt;
                                    $body = tj_Variables_getFunctionBody($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $args = tj_Variables_getFunctionArgs($this.$globalVariables0, tj_FunctionElmt_getName($function));
                                    $params = (tj_FunctionElmt_getParams($function)).data;
                                    $paramVals = ju_ArrayList__init_();
                                    $listLength = $params.length;
                                    var$29 = 0;
                                    if (var$29 < $listLength) {
                                        $param = $params[var$29];
                                        $ptr = 7;
                                        continue main;
                                    }
                                    $paramValsArr = ju_AbstractCollection_toArray($paramVals, $rt_createArray(tj_JavaishVal, ju_ArrayList_size($paramVals)));
                                    $expression = tj_FunctionElmt_getName($function);
                                    $listLength = 0;
                                    $ptr = 6;
                                    continue main;
                                case 21:
                                    $showInputBox = $elmt;
                                    $ptr = 4;
                                    continue main;
                                case 22:
                                    $listVal = $elmt;
                                    $expression = tj_ListValElmt_getIndex($listVal);
                                    $ptr = 5;
                                    continue main;
                                case 23:
                                    break bj;
                                case 24:
                                    $arrayName = tj_ArrayLengthElmt_getArrayName($elmt);
                                    if (tj_Variables_isVariable($localVariables, $arrayName))
                                        $expression = tj_Variables_getVariableValue($localVariables, $arrayName);
                                    else {
                                        if (!tj_Variables_isVariable($this.$globalVariables0, $arrayName)) {
                                            tj_Error_VariableNotDeclared($arrayName, $this.$lineNumber0);
                                            return null;
                                        }
                                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, $arrayName);
                                    }
                                    if (!($expression instanceof tj_JavaishListVal)) {
                                        tj_Error_TypeMismatch($rt_s(101), $expression.$typeString(), $this.$lineNumber0);
                                        return null;
                                    }
                                    $listL = tj_JavaishListVal_getValue($expression);
                                    $length = tj_JavaishInt__init_0($listL.$getLength0());
                                    if (!$isComp)
                                        $total = tj_Interpreter_performOperation($this, $operation, $total, $length);
                                    else
                                        $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $length);
                                    continue bj;
                                default:
                            }
                            continue bj;
                        }
                        $resultO = tj_Interpreter_performComparision($this, $comparison, $total, $compVal);
                        if ($resultO === null)
                            return null;
                        if (jl_Boolean_booleanValue(tj_JavaishBoolean_getValue($resultO)) == 1)
                            return tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        $total = null;
                        $operation = null;
                        $compVal = null;
                        $isComp = 0;
                        continue bj;
                    }
                    $variable = $elmt;
                    if (tj_Variables_isVariable($localVariables, tj_VariableElmt_getName($variable)))
                        $expression = tj_Variables_getVariableValue($localVariables, tj_VariableElmt_getName($variable));
                    else {
                        if (!tj_Variables_isVariable($this.$globalVariables0, tj_VariableElmt_getName($variable))) {
                            tj_Error_VariableNotDeclared(tj_VariableElmt_getName($variable), $this.$lineNumber0);
                            return null;
                        }
                        $expression = tj_Variables_getVariableValue($this.$globalVariables0, tj_VariableElmt_getName($variable));
                    }
                    if (!$isComp) {
                        $total = tj_Interpreter_performOperation($this, $operation, $total, $expression);
                        continue;
                    }
                    $compVal = tj_Interpreter_performOperation($this, $operation, $compVal, $expression);
                }
                $list = $elmt;
                $type = tj_ListElmt_getListType($list);
                $listExpressions = tj_ListElmt_getList($list);
                $listVals = ju_ArrayList__init_();
                $val = ju_AbstractList_iterator($listExpressions);
            }
            return null;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $expression, $localVariables, $isGlobal, $total, $operation, $comparison, $compVal, $isComp, var$9, var$10, var$11, $elmt, $listLength, $result, $bool, $valB, $cast, $floatElmt, $valF, $integer, $valI, $string, $valS, $function, $body, $args, $params, $paramVals, var$29, $param, $paramValsArr, $showInputBox, $listVal, $arrayName, $listL, $length, $resultO, $variable, $list, $type, $listExpressions, $listVals, $val, $listExpression, $intList, $listValI, $intListVal, $floatList,
        $floatListVal, $stringList, $stringListVal, $booleanList, $booleanListVal, $newVal, $valNot, $input, $index, $listValVal, $valFunc, $ptr);
    }
    function tj_Interpreter_performComparision($this, $comparison, $left, $right) {
        var $result, var$5, var$6;
        a: {
            $result = null;
            var$5 = jl_Enum_toString($comparison);
            var$6 = (-1);
            switch (jl_String_hashCode(var$5)) {
                case -1583968932:
                    if (!jl_String_equals(var$5, $rt_s(186)))
                        break a;
                    var$6 = 4;
                    break a;
                case -1112834937:
                    if (!jl_String_equals(var$5, $rt_s(188)))
                        break a;
                    var$6 = 2;
                    break a;
                case 66219796:
                    if (!jl_String_equals(var$5, $rt_s(198)))
                        break a;
                    var$6 = 0;
                    break a;
                case 360410235:
                    if (!jl_String_equals(var$5, $rt_s(200)))
                        break a;
                    var$6 = 5;
                    break a;
                case 972152550:
                    if (!jl_String_equals(var$5, $rt_s(202)))
                        break a;
                    var$6 = 3;
                    break a;
                case 1022422664:
                    if (!jl_String_equals(var$5, $rt_s(203)))
                        break a;
                    var$6 = 1;
                    break a;
                default:
            }
        }
        b: {
            switch (var$6) {
                case 0:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType() === tj_JavaishVal$JavaishType_STRING) {
                        if (!jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break b;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break b;
                    }
                    if ($left.$getType() !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) !== tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) !== tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) !== jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) !== jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (tj_JavaishFloat_getValue($left) !== tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(30), $rt_s(102), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(31), $rt_s(103), $this.$lineNumber0);
                    return null;
                case 1:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison === tj_JavaishVal$JavaishType_STRING && $right.$getType() === tj_JavaishVal$JavaishType_STRING) {
                        if (jl_String_equals(tj_JavaishString_getValue($left), tj_JavaishString_getValue($right))) {
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                            break b;
                        }
                        $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                        break b;
                    }
                    if ($left.$getType() !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() === tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() === tj_JavaishVal$JavaishType_BOOLEAN) {
                            if (tj_JavaishBoolean_getValue($left) === tj_JavaishBoolean_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (tj_JavaishInt_getValue($left) === tj_JavaishInt_getValue($right)) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) === jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) === jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (tj_JavaishFloat_getValue($left) === tj_JavaishFloat_getValue($right)) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(30), $rt_s(102), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(31), $rt_s(103), $this.$lineNumber0);
                    return null;
                case 2:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) >= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(104), $rt_s(30), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber0);
                    return null;
                case 3:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) <= jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(104), $rt_s(30), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber0);
                    return null;
                case 4:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) > jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(104), $rt_s(30), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber0);
                    return null;
                case 5:
                    $comparison = $left.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($comparison !== tj_JavaishVal$JavaishType_STRING && $right.$getType() !== tj_JavaishVal$JavaishType_STRING) {
                        if ($left.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN && $right.$getType() !== tj_JavaishVal$JavaishType_BOOLEAN) {
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_INT && $right.$getType() === tj_JavaishVal$JavaishType_FLOAT) {
                                if (jl_Integer_intValue(tj_JavaishInt_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if ($left.$getType() === tj_JavaishVal$JavaishType_FLOAT && $right.$getType() === tj_JavaishVal$JavaishType_INT) {
                                if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Integer_intValue(tj_JavaishInt_getValue($right))) {
                                    $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                    break b;
                                }
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                                break b;
                            }
                            if (jl_Float_floatValue(tj_JavaishFloat_getValue($left)) < jl_Float_floatValue(tj_JavaishFloat_getValue($right))) {
                                $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(0));
                                break b;
                            }
                            $result = tj_JavaishBoolean__init_(jl_Boolean_valueOf(1));
                            break b;
                        }
                        tj_Error_TypeMismatch($rt_s(104), $rt_s(30), $this.$lineNumber0);
                        return null;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber0);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_Interpreter_performOperation($this, $operation, $total, $val2) {
        var $result, var$5, var$6;
        $result = null;
        if ($operation === null)
            return $val2;
        a: {
            var$5 = jl_Enum_toString($operation);
            var$6 = (-1);
            switch (jl_String_hashCode(var$5)) {
                case 2459034:
                    if (!jl_String_equals(var$5, $rt_s(197)))
                        break a;
                    var$6 = 0;
                    break a;
                case 73363536:
                    if (!jl_String_equals(var$5, $rt_s(199)))
                        break a;
                    var$6 = 3;
                    break a;
                case 1436456484:
                    if (!jl_String_equals(var$5, $rt_s(204)))
                        break a;
                    var$6 = 1;
                    break a;
                case 2016833657:
                    if (!jl_String_equals(var$5, $rt_s(206)))
                        break a;
                    var$6 = 2;
                    break a;
                default:
            }
        }
        b: {
            switch (var$6) {
                case 0:
                    var$6 = $total instanceof tj_JavaishString;
                    if (var$6) {
                        if (!($val2 instanceof tj_JavaishString)) {
                            tj_Error_TypeMismatch($rt_s(31), $val2.$typeString(), $this.$lineNumber0);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_($result, jl_StringBuilder_toString($val2));
                        break b;
                    }
                    if ($val2 instanceof tj_JavaishString) {
                        if (!var$6) {
                            tj_Error_TypeMismatch($rt_s(31), $total.$typeString(), $this.$lineNumber0);
                            return null;
                        }
                        $result = new tj_JavaishString;
                        $operation = tj_JavaishString_getValue($total);
                        $total = tj_JavaishString_getValue($val2);
                        $val2 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($val2, $operation), $total);
                        tj_JavaishString__init_($result, jl_StringBuilder_toString($val2));
                        break b;
                    }
                    if ($total instanceof tj_JavaishFloat) {
                        if (!($val2 instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break b;
                        }
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                        break b;
                    }
                    if (!($val2 instanceof tj_JavaishFloat)) {
                        $result = tj_JavaishInt__init_0(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                        break b;
                    }
                    if (!($total instanceof tj_JavaishInt)) {
                        $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break b;
                    }
                    $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) + jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                    break b;
                case 1:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break b;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break b;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_0($rt_imul(jl_Integer_intValue(tj_JavaishInt_getValue($total)), jl_Integer_intValue(tj_JavaishInt_getValue($val2))));
                            break b;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break b;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) * jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break b;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber0);
                    return null;
                case 2:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break b;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break b;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_0(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break b;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break b;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) / jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break b;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber0);
                    return null;
                case 3:
                    if (!($total instanceof tj_JavaishString) && !($val2 instanceof tj_JavaishString)) {
                        if ($total instanceof tj_JavaishFloat) {
                            if (!($val2 instanceof tj_JavaishInt)) {
                                $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                                break b;
                            }
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)));
                            break b;
                        }
                        if (!($val2 instanceof tj_JavaishFloat)) {
                            $result = tj_JavaishInt__init_0(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Integer_intValue(tj_JavaishInt_getValue($val2)) | 0);
                            break b;
                        }
                        if (!($total instanceof tj_JavaishInt)) {
                            $result = tj_JavaishFloat__init_(jl_Float_floatValue(tj_JavaishFloat_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                            break b;
                        }
                        $result = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($total)) - jl_Float_floatValue(tj_JavaishFloat_getValue($val2)));
                        break b;
                    }
                    tj_Error_TypeMismatch($rt_s(104), $rt_s(31), $this.$lineNumber0);
                    return null;
                default:
            }
        }
        return $result;
    }
    function tj_Interpreter_evalDeclaration($this, $declaration, $localVariables, $isGlobal) {
        var $type, $listVal, $list, var$7, $value, var$9, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$9 = $thread.pop();$value = $thread.pop();var$7 = $thread.pop();$list = $thread.pop();$listVal = $thread.pop();$type = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$declaration = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $type = $declaration.$varType;
            $listVal = jl_System_out();
            $list = jl_String_valueOf($declaration.$varType);
            var$7 = $declaration.$name13;
            $value = jl_String_valueOf($declaration.$value15);
            var$9 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$9);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$9, $rt_s(132)), $list), $rt_s(133)), var$7), $rt_s(134)), $value);
            ji_PrintStream_println($listVal, jl_AbstractStringBuilder_toString(var$9));
            $value = $declaration.$value15;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $value, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            if ($type === $value.$getType()) {
                if (!$isGlobal) {
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($type !== tj_JavaishVal$JavaishType_LIST)
                        tj_Variables_addVariable($localVariables, $declaration.$name13, $type, $value, $this.$lineNumber0);
                    else {
                        $listVal = $value.$getValue8();
                        tj_Variables_addList($localVariables, $declaration.$name13, $type, $listVal.$list, $this.$lineNumber0);
                    }
                } else {
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($type !== tj_JavaishVal$JavaishType_LIST)
                        tj_Variables_addVariable($this.$globalVariables0, $declaration.$name13, $type, $value, $this.$lineNumber0);
                    else {
                        $listVal = $value.$getValue8();
                        tj_Variables_addList($this.$globalVariables0, $declaration.$name13, $type, $listVal.$list, $this.$lineNumber0);
                    }
                }
                return;
            }
            tj_JavaishVal$JavaishType_$callClinit();
            if ($type === tj_JavaishVal$JavaishType_FLOAT && $value.$getType() === tj_JavaishVal$JavaishType_INT) {
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $declaration.$name13, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber0);
                else
                    tj_Variables_addVariable($this.$globalVariables0, $declaration.$name13, $type, tj_JavaishFloat__init_((tj_JavaishInt_getValue($value)).$value), $this.$lineNumber0);
                return;
            }
            if ($value.$getType() === tj_JavaishVal$JavaishType_LIST) {
                $list = $value.$list;
                if ($list.$getType() === $type) {
                    if (!$isGlobal)
                        tj_Variables_addList($localVariables, $declaration.$name13, $type, $list, $this.$lineNumber0);
                    else
                        tj_Variables_addList($this.$globalVariables0, $declaration.$name13, $type, $list, $this.$lineNumber0);
                    return;
                }
            }
            tj_Error_TypeMismatch($type.$name0, $value.$typeString(), $this.$lineNumber0);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $declaration, $localVariables, $isGlobal, $type, $listVal, $list, var$7, $value, var$9, $ptr);
    }
    function tj_Interpreter_evalPrint($this, $printStmt, $localVariables, $isGlobal) {
        var $expression, $value, $message, $consoleLog, var$8, var$9, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();$consoleLog = $thread.pop();$message = $thread.pop();$value = $thread.pop();$expression = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$printStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $expression = $printStmt.$value14;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            if ($value === null)
                return;
            $printStmt = jl_System_out();
            $localVariables = $value.$getValue8();
            jl_AbstractStringBuilder_append(jl_StringBuilder_append($printStmt.$sb, $localVariables), 10);
            ji_PrintStream_printSB($printStmt);
            $message = ($value.$getValue8()).$toString();
            $consoleLog = $rt_createArray(jl_String, 2);
            var$8 = $consoleLog.data;
            var$8[0] = $message;
            var$9 = $this.$lineNumber0;
            $printStmt = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($printStmt);
            jl_StringBuilder_append0($printStmt, var$9);
            var$8[1] = jl_AbstractStringBuilder_toString($printStmt);
            $rt_globals.addConsoleLog(otji_JS_wrap($consoleLog));
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $printStmt, $localVariables, $isGlobal, $expression, $value, $message, $consoleLog, var$8, var$9, $ptr);
    }
    function tj_Interpreter_evalWhile($this, $whileStmt, $localVariables, $isGlobal) {
        var $condition, $result, var$6, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$6 = $thread.pop();$result = $thread.pop();$condition = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$whileStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $condition = $whileStmt.$condition1;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result.$value23.$value24 != 1)
                return;
            $result = $whileStmt.$body;
            var$6 = 0;
            $ptr = 2;
        case 2:
            tj_Interpreter_interpretBody($this, $result, $localVariables, var$6);
            if ($rt_suspending()) {
                break main;
            }
            $ptr = 3;
        case 3:
            $tmp = tj_Interpreter_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result.$value23.$value24 != 1)
                return;
            $result = $whileStmt.$body;
            var$6 = 0;
            $ptr = 2;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $whileStmt, $localVariables, $isGlobal, $condition, $result, var$6, $ptr);
    }
    function tj_Interpreter_evalForEach($this, $foreachStmt, $localVariables, $isGlobal) {
        var $tempVarName, $listName, $intList, $listValI, $list, $listVals, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$listVals = $thread.pop();$list = $thread.pop();$listValI = $thread.pop();$intList = $thread.pop();$listName = $thread.pop();$tempVarName = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$foreachStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $tempVarName = $foreachStmt.$tempVar;
            $listName = $foreachStmt.$listVar;
            if (tj_Variables_isVariable($localVariables, $listName))
                $intList = tj_Variables_getVariableValue($localVariables, $listName);
            else {
                if (!tj_Variables_isVariable($this.$globalVariables0, $listName)) {
                    tj_Error_VariableNotDeclared($listName, $this.$lineNumber0);
                    return;
                }
                $intList = tj_Variables_getVariableValue($this.$globalVariables0, $listName);
            }
            $listValI = $intList.$getType();
            tj_JavaishVal$JavaishType_$callClinit();
            if ($listValI !== tj_JavaishVal$JavaishType_LIST) {
                tj_Error_TypeMismatch($rt_s(101), $intList.$typeString(), $this.$lineNumber0);
                return;
            }
            a: {
                $list = $intList.$list;
                if ($list.$getType() === tj_JavaishVal$JavaishType_STRINGLIST) {
                    $listVals = $list.$value9;
                    if ($listVals === null) {
                        tj_Error_ListEmpty($this.$lineNumber0, $listName);
                        return;
                    }
                    if (!$isGlobal)
                        tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_0($rt_s(10)), $this.$lineNumber0);
                    else
                        tj_Variables_addVariable($this.$globalVariables0, $tempVarName, tj_JavaishVal$JavaishType_STRING, tj_JavaishString__init_0($rt_s(10)), $this.$lineNumber0);
                    $intList = ju_AbstractList_iterator($listVals);
                    if (!ju_AbstractList$1_hasNext($intList))
                        break a;
                    $listValI = ju_AbstractList$1_next($intList);
                    if (tj_Variables_isVariable($localVariables, $tempVarName))
                        tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber0);
                    else
                        tj_Variables_setVariableValue($this.$globalVariables0, $tempVarName, $listValI, $this.$lineNumber0);
                    $listValI = $foreachStmt.$body;
                    $isGlobal = 0;
                    $ptr = 1;
                    continue main;
                }
                if ($list.$getType() === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                    $listVals = $list.$value7;
                    if ($listVals === null) {
                        tj_Error_ListEmpty($this.$lineNumber0, $listName);
                        return;
                    }
                    if (!$isGlobal)
                        tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber0);
                    else
                        tj_Variables_addVariable($this.$globalVariables0, $tempVarName, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishBoolean__init_(jl_Boolean_valueOf(0)), $this.$lineNumber0);
                    $intList = ju_AbstractList_iterator($listVals);
                    if (!ju_AbstractList$1_hasNext($intList))
                        break a;
                    $listValI = ju_AbstractList$1_next($intList);
                    if (tj_Variables_isVariable($localVariables, $tempVarName))
                        tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber0);
                    else
                        tj_Variables_setVariableValue($this.$globalVariables0, $tempVarName, $listValI, $this.$lineNumber0);
                    $listValI = $foreachStmt.$body;
                    $isGlobal = 0;
                    $ptr = 2;
                    continue main;
                }
                if ($list.$getType() === tj_JavaishVal$JavaishType_INTLIST) {
                    $listVals = $list.$value11;
                    if ($listVals === null) {
                        tj_Error_ListEmpty($this.$lineNumber0, $listName);
                        return;
                    }
                    if (!$isGlobal)
                        tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_0(0), $this.$lineNumber0);
                    else
                        tj_Variables_addVariable($this.$globalVariables0, $tempVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_0(0), $this.$lineNumber0);
                    $intList = ju_AbstractList_iterator($listVals);
                    if (!ju_AbstractList$1_hasNext($intList))
                        break a;
                    $listValI = ju_AbstractList$1_next($intList);
                    if (tj_Variables_isVariable($localVariables, $tempVarName))
                        tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber0);
                    else
                        tj_Variables_setVariableValue($this.$globalVariables0, $tempVarName, $listValI, $this.$lineNumber0);
                    $listValI = $foreachStmt.$body;
                    $isGlobal = 0;
                    $ptr = 3;
                    continue main;
                }
                if ($list.$getType() !== tj_JavaishVal$JavaishType_FLOATLIST) {
                    tj_Error_TypeMismatch($rt_s(101), $intList.$typeString(), $this.$lineNumber0);
                    return;
                }
                $listVals = $list.$value5;
                if ($listVals === null) {
                    tj_Error_ListEmpty($this.$lineNumber0, $listName);
                    return;
                }
                if (!$isGlobal)
                    tj_Variables_addVariable($localVariables, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber0);
                else
                    tj_Variables_addVariable($this.$globalVariables0, $tempVarName, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishFloat__init_(0.0), $this.$lineNumber0);
                $intList = ju_AbstractList_iterator($listVals);
                if (ju_AbstractList$1_hasNext($intList)) {
                    $listValI = ju_AbstractList$1_next($intList);
                    if (tj_Variables_isVariable($localVariables, $tempVarName))
                        tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber0);
                    else
                        tj_Variables_setVariableValue($this.$globalVariables0, $tempVarName, $listValI, $this.$lineNumber0);
                    $listValI = $foreachStmt.$body;
                    $isGlobal = 0;
                    $ptr = 4;
                    continue main;
                }
            }
            return;
        case 1:
            tj_Interpreter_interpretBody($this, $listValI, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($intList))
                return;
            $listValI = ju_AbstractList$1_next($intList);
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber0);
            else
                tj_Variables_setVariableValue($this.$globalVariables0, $tempVarName, $listValI, $this.$lineNumber0);
            $listValI = $foreachStmt.$body;
            $isGlobal = 0;
            continue main;
        case 2:
            tj_Interpreter_interpretBody($this, $listValI, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($intList))
                return;
            $listValI = ju_AbstractList$1_next($intList);
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber0);
            else
                tj_Variables_setVariableValue($this.$globalVariables0, $tempVarName, $listValI, $this.$lineNumber0);
            $listValI = $foreachStmt.$body;
            $isGlobal = 0;
            continue main;
        case 3:
            tj_Interpreter_interpretBody($this, $listValI, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($intList))
                return;
            $listValI = ju_AbstractList$1_next($intList);
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber0);
            else
                tj_Variables_setVariableValue($this.$globalVariables0, $tempVarName, $listValI, $this.$lineNumber0);
            $listValI = $foreachStmt.$body;
            $isGlobal = 0;
            continue main;
        case 4:
            tj_Interpreter_interpretBody($this, $listValI, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            if (!ju_AbstractList$1_hasNext($intList))
                return;
            $listValI = ju_AbstractList$1_next($intList);
            if (tj_Variables_isVariable($localVariables, $tempVarName))
                tj_Variables_setVariableValue($localVariables, $tempVarName, $listValI, $this.$lineNumber0);
            else
                tj_Variables_setVariableValue($this.$globalVariables0, $tempVarName, $listValI, $this.$lineNumber0);
            $listValI = $foreachStmt.$body;
            $isGlobal = 0;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $foreachStmt, $localVariables, $isGlobal, $tempVarName, $listName, $intList, $listValI, $list, $listVals, $ptr);
    }
    function tj_Interpreter_evalForWhen($this, $forwhenStmt, $localVariables, $isGlobal) {
        var $incVarName, $condition, $result, $incVal2, var$8, $incVal, $incExpression, $incResult, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$incResult = $thread.pop();$incExpression = $thread.pop();$incVal = $thread.pop();var$8 = $thread.pop();$incVal2 = $thread.pop();$result = $thread.pop();$condition = $thread.pop();$incVarName = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$forwhenStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $incVarName = $forwhenStmt.$incVar;
            if (!tj_Variables_isVariable($localVariables, $incVarName)) {
                tj_JavaishVal$JavaishType_$callClinit();
                tj_Variables_addVariable($localVariables, $incVarName, tj_JavaishVal$JavaishType_INT, tj_JavaishInt__init_0(0), $this.$lineNumber0);
            }
            $condition = $forwhenStmt.$condition2;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result.$value23.$value24 != 1)
                return;
            $incVal2 = $forwhenStmt.$body;
            var$8 = 0;
            $ptr = 2;
        case 2:
            tj_Interpreter_interpretBody($this, $incVal2, $localVariables, var$8);
            if ($rt_suspending()) {
                break main;
            }
            $incVal = tj_Variables_getVariableValue($localVariables, $incVarName);
            if ($incVal === null)
                return;
            $incExpression = $forwhenStmt.$increment;
            $ptr = 3;
        case 3:
            $tmp = tj_Interpreter_evalExpression($this, $incExpression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $incVal2 = $tmp;
            tj_Interpreter$Operator_$callClinit();
            $incResult = tj_Interpreter_performOperation($this, tj_Interpreter$Operator_PLUS, $incVal, $incVal2);
            $incVal2 = $incResult.$getType();
            tj_JavaishVal$JavaishType_$callClinit();
            if ($incVal2 !== tj_JavaishVal$JavaishType_INT) {
                tj_Error_TypeMismatch($rt_s(32), $incResult.$typeString(), $this.$lineNumber0);
                return;
            }
            tj_Variables_setVariableValue($localVariables, $incVarName, $incResult, $this.$lineNumber0);
            $ptr = 4;
        case 4:
            $tmp = tj_Interpreter_evalExpression($this, $condition, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $result = $tmp;
            if ($result === null)
                return;
            if ($result.$value23.$value24 != 1)
                return;
            $incVal2 = $forwhenStmt.$body;
            var$8 = 0;
            $ptr = 2;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $forwhenStmt, $localVariables, $isGlobal, $incVarName, $condition, $result, $incVal2, var$8, $incVal, $incExpression, $incResult, $ptr);
    }
    function tj_Interpreter_evalShowMsgBox($this, $showMsgStmt, $localVariables, $isGlobal) {
        var $expression, $value, var$6, $e, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$e = $thread.pop();var$6 = $thread.pop();$value = $thread.pop();$expression = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$showMsgStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $expression = $showMsgStmt.$value16;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            if ($value === null)
                return;
            try {
                juc_TimeUnit_$callClinit();
                $showMsgStmt = juc_TimeUnit_MILLISECONDS;
                var$6 = Long_fromInt(100);
                $ptr = 2;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            $rt_globals.alert($rt_ustr(($value.$getValue8()).$toString()));
            return;
        case 2:
            a: {
                try {
                    juc_TimeUnit_sleep($showMsgStmt, var$6);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            $rt_globals.alert($rt_ustr(($value.$getValue8()).$toString()));
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $showMsgStmt, $localVariables, $isGlobal, $expression, $value, var$6, $e, $ptr);
    }
    function tj_Interpreter_evalShowInputBox($this, $showInputBoxElmt, $localVariables, $isGlobal) {
        var $value, $expression, var$6, $e, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$e = $thread.pop();var$6 = $thread.pop();$expression = $thread.pop();$value = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$showInputBoxElmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $value = null;
            $expression = $showInputBoxElmt.$value17;
            if ($expression === null) {
                try {
                    juc_TimeUnit_$callClinit();
                    $showInputBoxElmt = juc_TimeUnit_MILLISECONDS;
                    var$6 = Long_fromInt(100);
                    $ptr = 2;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
                return tj_JavaishString__init_0($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue8()).$toString()))));
            }
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $expression, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            try {
                juc_TimeUnit_$callClinit();
                $showInputBoxElmt = juc_TimeUnit_MILLISECONDS;
                var$6 = Long_fromInt(100);
                $ptr = 2;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            return tj_JavaishString__init_0($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue8()).$toString()))));
        case 2:
            a: {
                try {
                    juc_TimeUnit_sleep($showInputBoxElmt, var$6);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            return tj_JavaishString__init_0($rt_str($rt_globals.prompt($rt_ustr(($value.$getValue8()).$toString()))));
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $showInputBoxElmt, $localVariables, $isGlobal, $value, $expression, var$6, $e, $ptr);
    }
    function tj_Interpreter_evalMutation($this, $mutationStmt, $localVariables, $isGlobal) {
        var $type, $name, $varType, $value, $newVal, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$newVal = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$type = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$mutationStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $type = $mutationStmt.$mutationType;
            $name = $mutationStmt.$varName;
            $varType = tj_Variables_getVariableType($this.$globalVariables0, $name);
            $mutationStmt = $mutationStmt.$value19;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $mutationStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
                $mutationStmt = tj_Variables_isVariable($localVariables, $name) ? tj_Variables_getVariableValue($localVariables, $name) : tj_Variables_getVariableValue($this.$globalVariables0, $name);
                if ($mutationStmt === null) {
                    tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
                    return;
                }
                if ($mutationStmt.$getType() === tj_JavaishVal$JavaishType_STRING) {
                    tj_Statements$MutationType_$callClinit();
                    if ($type !== tj_Statements$MutationType_ADD) {
                        tj_Error_CantPerformMutation($mutationStmt.$typeString(), $this.$lineNumber0);
                        return;
                    }
                }
                $newVal = tj_Interpreter_performOperation($this, tj_Interpreter_mutationTypeToOperator($this, $type), $mutationStmt, $value);
                if (tj_Variables_isVariable($localVariables, $name)) {
                    tj_Variables_setVariableValue($localVariables, $name, $newVal, $this.$lineNumber0);
                    return;
                }
                tj_Variables_setVariableValue($this.$globalVariables0, $name, $newVal, $this.$lineNumber0);
                return;
            }
            $mutationStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables0, $name)).$list;
            if ($mutationStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
                return;
            }
            $list = tj_Interpreter_performListOperation($this, tj_Interpreter_mutationTypeToOperator($this, $type), $mutationStmt, $value, 0);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables0, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $mutationStmt, $localVariables, $isGlobal, $type, $name, $varType, $value, $newVal, $list, $ptr);
    }
    function tj_Interpreter_evalRemoveAt($this, $removeAtStmt, $localVariables, $isGlobal) {
        var $name, $varType, $index, $indexVal, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$indexVal = $thread.pop();$index = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeAtStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeAtStmt.$listName;
            $varType = tj_Variables_getVariableType($this.$globalVariables0, $name);
            $removeAtStmt = $removeAtStmt.$location;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $removeAtStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $index = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST) {
                tj_Error_TypeMismatch($rt_s(101), $varType.$name0, $this.$lineNumber0);
                return;
            }
            $varType = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables0, $name)).$list;
            if ($varType === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
                return;
            }
            if ($index.$getType() !== tj_JavaishVal$JavaishType_INT) {
                tj_Error_TypeMismatch($rt_s(32), $index.$typeString(), $this.$lineNumber0);
                return;
            }
            $indexVal = (tj_JavaishInt_getValue($index)).$value;
            tj_Interpreter$Operator_$callClinit();
            $list = tj_Interpreter_performListOperation($this, tj_Interpreter$Operator_REMOVEAT, $varType, null, $indexVal);
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables0, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeAtStmt, $localVariables, $isGlobal, $name, $varType, $index, $indexVal, $list, $ptr);
    }
    function tj_Interpreter_evalRemoveFrom($this, $removeFromStmt, $localVariables, $isGlobal) {
        var $name, $varType, $value, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeFromStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeFromStmt.$listName0;
            $varType = tj_Variables_getVariableType($this.$globalVariables0, $name);
            $removeFromStmt = $removeFromStmt.$value21;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $removeFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
                return;
            $removeFromStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables0, $name)).$list;
            if ($removeFromStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
                return;
            }
            tj_Interpreter$Operator_$callClinit();
            $list = tj_Interpreter_performListOperation($this, tj_Interpreter$Operator_REMOVEFROM, $removeFromStmt, $value, 0);
            $removeFromStmt = jl_System_out();
            $varType = $list.$listString();
            $value = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($value);
            jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(159)), $varType);
            ji_PrintStream_println($removeFromStmt, jl_AbstractStringBuilder_toString($value));
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables0, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeFromStmt, $localVariables, $isGlobal, $name, $varType, $value, $list, $ptr);
    }
    function tj_Interpreter_evalRemoveAllFrom($this, $removeAllFromStmt, $localVariables, $isGlobal) {
        var $name, $varType, $value, $list, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$list = $thread.pop();$value = $thread.pop();$varType = $thread.pop();$name = $thread.pop();$isGlobal = $thread.pop();$localVariables = $thread.pop();$removeAllFromStmt = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $name = $removeAllFromStmt.$listName1;
            $varType = tj_Variables_getVariableType($this.$globalVariables0, $name);
            $removeAllFromStmt = $removeAllFromStmt.$value22;
            $ptr = 1;
        case 1:
            $tmp = tj_Interpreter_evalExpression($this, $removeAllFromStmt, $localVariables, $isGlobal);
            if ($rt_suspending()) {
                break main;
            }
            $value = $tmp;
            tj_JavaishVal$JavaishType_$callClinit();
            if ($varType !== tj_JavaishVal$JavaishType_STRINGLIST && $varType !== tj_JavaishVal$JavaishType_BOOLEANLIST && $varType !== tj_JavaishVal$JavaishType_INTLIST && $varType !== tj_JavaishVal$JavaishType_FLOATLIST)
                return;
            $removeAllFromStmt = tj_Variables_isVariable($localVariables, $name) ? (tj_Variables_getList($localVariables, $name)).$list : (tj_Variables_getList($this.$globalVariables0, $name)).$list;
            if ($removeAllFromStmt === null) {
                tj_Error_VariableNotDeclared($name, $this.$lineNumber0);
                return;
            }
            tj_Interpreter$Operator_$callClinit();
            $list = tj_Interpreter_performListOperation($this, tj_Interpreter$Operator_REMOVEALLFROM, $removeAllFromStmt, $value, 0);
            $removeAllFromStmt = jl_System_out();
            $varType = $list.$listString();
            $value = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($value);
            jl_StringBuilder_append(jl_StringBuilder_append($value, $rt_s(159)), $varType);
            ji_PrintStream_println($removeAllFromStmt, jl_AbstractStringBuilder_toString($value));
            if (tj_Variables_isVariable($localVariables, $name)) {
                tj_Variables_setVariableValue($localVariables, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
                return;
            }
            tj_Variables_setVariableValue($this.$globalVariables0, $name, tj_JavaishListVal__init_($list), $this.$lineNumber0);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $removeAllFromStmt, $localVariables, $isGlobal, $name, $varType, $value, $list, $ptr);
    }
    function tj_Interpreter_performListOperation($this, $operation, $list, $val, $index) {
        var $result, $listInnerType, $i, $valType, $booleanListVal, $floatListVal, $intVal, $intListVal, $stringListVal, $booleanVal, $stringVal;
        a: {
            $result = null;
            $listInnerType = jl_Enum_toString($operation);
            $i = (-1);
            switch (jl_String_hashCode($listInnerType)) {
                case 2459034:
                    if (!jl_String_equals($listInnerType, $rt_s(197)))
                        break a;
                    $i = 0;
                    break a;
                case 269804471:
                    if (!jl_String_equals($listInnerType, $rt_s(175)))
                        break a;
                    $i = 1;
                    break a;
                case 1584208430:
                    if (!jl_String_equals($listInnerType, $rt_s(177)))
                        break a;
                    $i = 2;
                    break a;
                case 1735465895:
                    if (!jl_String_equals($listInnerType, $rt_s(180)))
                        break a;
                    $i = 3;
                    break a;
                default:
            }
        }
        b: {
            switch ($i) {
                case 0:
                    $listInnerType = $list.$getInnerType();
                    $valType = $val.$getType();
                    if ($listInnerType !== $valType) {
                        tj_Error_TypeMismatch(jl_Enum_toString($listInnerType), jl_Enum_toString($valType), $this.$lineNumber0);
                        return null;
                    }
                    $operation = $list.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_add($booleanListVal, $val);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break b;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType() !== tj_JavaishVal$JavaishType_INT)
                            ju_ArrayList_add($floatListVal, $val);
                        else {
                            $intVal = $val;
                            ju_ArrayList_add($floatListVal, tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal))));
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break b;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_add($intListVal, $val);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break b;
                    }
                    if ($list.$getType() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break b;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_add($stringListVal, $val);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break b;
                case 1:
                    $operation = $list.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        ju_ArrayList_remove($booleanListVal, $index);
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break b;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        ju_ArrayList_remove($floatListVal, $index);
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break b;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        ju_ArrayList_remove($intListVal, $index);
                        $result = tj_JavaishIntList__init_($intListVal);
                        break b;
                    }
                    if ($list.$getType() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break b;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    ju_ArrayList_remove($stringListVal, $index);
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break b;
                case 2:
                    $operation = $list.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        c: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($booleanListVal))
                                    break c;
                                if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($booleanListVal, $i);
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break b;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        d: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($floatListVal))
                                    break d;
                                if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($floatListVal, $i);
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break b;
                    }
                    if ($list.$getType() !== tj_JavaishVal$JavaishType_INTLIST) {
                        if ($list.$getType() !== tj_JavaishVal$JavaishType_STRINGLIST)
                            break b;
                        $stringListVal = tj_JavaishStringList_getList($list);
                        $stringVal = $val;
                        $i = 0;
                        e: {
                            while (true) {
                                if ($i >= ju_ArrayList_size($stringListVal))
                                    break e;
                                if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal)))
                                    break;
                                $i = $i + 1 | 0;
                            }
                            ju_ArrayList_remove($stringListVal, $i);
                        }
                        $result = tj_JavaishStringList__init_($stringListVal);
                        break b;
                    }
                    $intListVal = tj_JavaishIntList_getList($list);
                    $intVal = $val;
                    $i = 0;
                    f: {
                        while (true) {
                            if ($i >= ju_ArrayList_size($intListVal))
                                break f;
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal))
                                break;
                            $i = $i + 1 | 0;
                        }
                        ju_ArrayList_remove($intListVal, $i);
                    }
                    $result = tj_JavaishIntList__init_($intListVal);
                    $operation = jl_System_out();
                    $list = jl_String_valueOf(tj_JavaishInt_getType($intVal));
                    $index = ju_ArrayList_size($intListVal);
                    $val = jl_StringBuilder__init_();
                    jl_StringBuilder_append0(jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append($val, $rt_s(163)), $list), 32), $index);
                    ji_PrintStream_println($operation, jl_StringBuilder_toString($val));
                    break b;
                case 3:
                    $operation = $list.$getType();
                    tj_JavaishVal$JavaishType_$callClinit();
                    if ($operation === tj_JavaishVal$JavaishType_BOOLEANLIST) {
                        $booleanListVal = tj_JavaishBooleanList_getList($list);
                        $booleanVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($booleanListVal)) {
                            if (tj_JavaishBoolean_getValue(ju_ArrayList_get($booleanListVal, $i)) === tj_JavaishBoolean_getValue($booleanVal)) {
                                ju_ArrayList_remove($booleanListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishBooleanList__init_($booleanListVal);
                        break b;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_FLOATLIST) {
                        $floatListVal = tj_JavaishFloatList_getList($list);
                        if ($val.$getType() !== tj_JavaishVal$JavaishType_INT)
                            $operation = $val;
                        else {
                            $intVal = $val;
                            $operation = tj_JavaishFloat__init_(jl_Integer_intValue(tj_JavaishInt_getValue($intVal)));
                        }
                        $i = 0;
                        while ($i < ju_ArrayList_size($floatListVal)) {
                            if (tj_JavaishFloat_getValue(ju_ArrayList_get($floatListVal, $i)) === tj_JavaishFloat_getValue($operation)) {
                                ju_ArrayList_remove($floatListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishFloatList__init_($floatListVal);
                        break b;
                    }
                    if ($list.$getType() === tj_JavaishVal$JavaishType_INTLIST) {
                        $intListVal = tj_JavaishIntList_getList($list);
                        $intVal = $val;
                        $i = 0;
                        while ($i < ju_ArrayList_size($intListVal)) {
                            if (tj_JavaishInt_getValue(ju_ArrayList_get($intListVal, $i)) === tj_JavaishInt_getValue($intVal)) {
                                ju_ArrayList_remove($intListVal, $i);
                                $i = $i + (-1) | 0;
                            }
                            $i = $i + 1 | 0;
                        }
                        $result = tj_JavaishIntList__init_($intListVal);
                        break b;
                    }
                    if ($list.$getType() !== tj_JavaishVal$JavaishType_STRINGLIST)
                        break b;
                    $stringListVal = tj_JavaishStringList_getList($list);
                    $stringVal = $val;
                    $i = 0;
                    while ($i < ju_ArrayList_size($stringListVal)) {
                        if (jl_String_equals(tj_JavaishString_getValue(ju_ArrayList_get($stringListVal, $i)), tj_JavaishString_getValue($stringVal))) {
                            ju_ArrayList_remove($stringListVal, $i);
                            $i = $i + (-1) | 0;
                        }
                        $i = $i + 1 | 0;
                    }
                    $result = tj_JavaishStringList__init_($stringListVal);
                    break b;
                default:
            }
        }
        return $result;
    }
    function tj_Interpreter_mutationTypeToOperator($this, $type) {
        var var$2, var$3;
        a: {
            var$2 = $type.$name0;
            var$3 = (-1);
            switch (jl_String_hashCode(var$2)) {
                case -1277621484:
                    if (!jl_String_equals(var$2, $rt_s(207)))
                        break a;
                    var$3 = 1;
                    break a;
                case 64641:
                    if (!jl_String_equals(var$2, $rt_s(208)))
                        break a;
                    var$3 = 0;
                    break a;
                case 1436456484:
                    if (!jl_String_equals(var$2, $rt_s(204)))
                        break a;
                    var$3 = 2;
                    break a;
                case 2016833657:
                    if (!jl_String_equals(var$2, $rt_s(206)))
                        break a;
                    var$3 = 3;
                    break a;
                default:
            }
        }
        switch (var$3) {
            case 0:
                tj_Interpreter$Operator_$callClinit();
                return tj_Interpreter$Operator_PLUS;
            case 1:
                tj_Interpreter$Operator_$callClinit();
                return tj_Interpreter$Operator_MINUS;
            case 2:
                tj_Interpreter$Operator_$callClinit();
                return tj_Interpreter$Operator_MULTIPLY;
            case 3:
                tj_Interpreter$Operator_$callClinit();
                return tj_Interpreter$Operator_DIVIDE;
            default:
        }
        return null;
    }
    var ju_Comparator = $rt_classWithoutFields(0);
    var jl_String$_clinit_$lambda$_89_0 = $rt_classWithoutFields();
    var jl_IndexOutOfBoundsException = $rt_classWithoutFields(jl_RuntimeException);
    var jlr_Array = $rt_classWithoutFields();
    function jlr_Array_getLength(var$1) {
        if (var$1 === null || var$1.constructor.$meta.item === undefined) {
            $rt_throw(jl_IllegalArgumentException__init_());
        }
        return var$1.data.length;
    }
    function jlr_Array_newInstance($componentType, $length) {
        if ($componentType === null) {
            $componentType = new jl_NullPointerException;
            jl_Exception__init_($componentType);
            $rt_throw($componentType);
        }
        if ($componentType === $rt_cls($rt_voidcls())) {
            $componentType = new jl_IllegalArgumentException;
            jl_Exception__init_($componentType);
            $rt_throw($componentType);
        }
        if ($length >= 0)
            return jlr_Array_newInstanceImpl($componentType.$platformClass, $length);
        $componentType = new jl_NegativeArraySizeException;
        jl_Exception__init_($componentType);
        $rt_throw($componentType);
    }
    function jlr_Array_newInstanceImpl(var$1, var$2) {
        if (var$1.$meta.primitive) {
            if (var$1 == $rt_bytecls()) {
                return $rt_createByteArray(var$2);
            }
            if (var$1 == $rt_shortcls()) {
                return $rt_createShortArray(var$2);
            }
            if (var$1 == $rt_charcls()) {
                return $rt_createCharArray(var$2);
            }
            if (var$1 == $rt_intcls()) {
                return $rt_createIntArray(var$2);
            }
            if (var$1 == $rt_longcls()) {
                return $rt_createLongArray(var$2);
            }
            if (var$1 == $rt_floatcls()) {
                return $rt_createFloatArray(var$2);
            }
            if (var$1 == $rt_doublecls()) {
                return $rt_createDoubleArray(var$2);
            }
            if (var$1 == $rt_booleancls()) {
                return $rt_createBooleanArray(var$2);
            }
        } else {
            return $rt_createArray(var$1, var$2)
        }
    }
    var jl_NullPointerException = $rt_classWithoutFields(jl_RuntimeException);
    var jl_ArrayStoreException = $rt_classWithoutFields(jl_RuntimeException);
    var jl_Character = $rt_classWithoutFields();
    var jl_Character_TYPE = null;
    var jl_Character_digitMapping = null;
    var jl_Character_upperCaseMapping = null;
    var jl_Character_lowerCaseMapping = null;
    var jl_Character_classMapping = null;
    var jl_Character_characterCache = null;
    var jl_Character_$$metadata$$0 = null;
    var jl_Character_$$metadata$$1 = null;
    var jl_Character_$$metadata$$3 = null;
    var jl_Character_$$metadata$$4 = null;
    function jl_Character_toString($c) {
        var var$2, var$3;
        var$2 = new jl_String;
        var$3 = $rt_createCharArray(1);
        var$3.data[0] = $c;
        jl_String__init_0(var$2, var$3);
        return var$2;
    }
    function jl_Character_isSupplementaryCodePoint($codePoint) {
        return $codePoint >= 65536 && $codePoint <= 1114111 ? 1 : 0;
    }
    function jl_Character_isHighSurrogate($ch) {
        return ($ch & 64512) != 55296 ? 0 : 1;
    }
    function jl_Character_isLowSurrogate($ch) {
        return ($ch & 64512) != 56320 ? 0 : 1;
    }
    function jl_Character_isSurrogate($ch) {
        return !jl_Character_isHighSurrogate($ch) && !jl_Character_isLowSurrogate($ch) ? 0 : 1;
    }
    function jl_Character_isSurrogatePair($high, $low) {
        return jl_Character_isHighSurrogate($high) && jl_Character_isLowSurrogate($low) ? 1 : 0;
    }
    function jl_Character_toCodePoint($high, $low) {
        return (($high & 1023) << 10 | $low & 1023) + 65536 | 0;
    }
    function jl_Character_highSurrogate($codePoint) {
        return (55296 | ($codePoint - 65536 | 0) >> 10 & 1023) & 65535;
    }
    function jl_Character_lowSurrogate($codePoint) {
        return (56320 | $codePoint & 1023) & 65535;
    }
    function jl_Character_toLowerCase($ch) {
        return jl_Character_toLowerCase0($ch) & 65535;
    }
    function jl_Character_toLowerCase0($ch) {
        if (jl_Character_lowerCaseMapping === null) {
            if (jl_Character_$$metadata$$0 === null)
                jl_Character_$$metadata$$0 = jl_Character_acquireLowerCaseMapping$$create();
            jl_Character_lowerCaseMapping = otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$0.value !== null ? $rt_str(jl_Character_$$metadata$$0.value) : null));
        }
        return jl_Character_mapChar(jl_Character_lowerCaseMapping, $ch);
    }
    function jl_Character_toUpperCase($ch) {
        return jl_Character_toUpperCase0($ch) & 65535;
    }
    function jl_Character_toUpperCase0($codePoint) {
        if (jl_Character_upperCaseMapping === null) {
            if (jl_Character_$$metadata$$1 === null)
                jl_Character_$$metadata$$1 = jl_Character_acquireUpperCaseMapping$$create();
            jl_Character_upperCaseMapping = otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$1.value !== null ? $rt_str(jl_Character_$$metadata$$1.value) : null));
        }
        return jl_Character_mapChar(jl_Character_upperCaseMapping, $codePoint);
    }
    function jl_Character_mapChar($table, $codePoint) {
        var var$3, var$4, var$5, $index, var$7;
        $table = $table.data;
        var$3 = 0;
        var$4 = $table.length / 2 | 0;
        var$5 = var$4 - 1 | 0;
        a: {
            while (true) {
                $index = (var$3 + var$5 | 0) / 2 | 0;
                var$7 = $rt_compare($table[$index * 2 | 0], $codePoint);
                if (!var$7)
                    break;
                if (var$7 <= 0) {
                    var$3 = $index + 1 | 0;
                    if (var$3 > var$5)
                        break a;
                } else {
                    $index = $index - 1 | 0;
                    if ($index < var$3)
                        break a;
                    var$5 = $index;
                }
            }
        }
        if ($index >= 0 && $index < var$4)
            return $codePoint + $table[($index * 2 | 0) + 1 | 0] | 0;
        return 0;
    }
    function jl_Character_digit($ch, $radix) {
        if ($radix >= 2 && $radix <= 36) {
            $ch = jl_Character_getNumericValue($ch);
            if ($ch >= $radix)
                $ch = (-1);
        } else
            $ch = (-1);
        return $ch;
    }
    function jl_Character_getNumericValue($codePoint) {
        var var$2, var$3, var$4, var$5, $digitMapping, $u, $idx, $val, var$10, $l;
        if (jl_Character_digitMapping === null) {
            if (jl_Character_$$metadata$$3 === null)
                jl_Character_$$metadata$$3 = jl_Character_obtainDigitMapping$$create();
            var$2 = (jl_Character_$$metadata$$3.value !== null ? $rt_str(jl_Character_$$metadata$$3.value) : null);
            var$3 = otci_CharFlow__init_(jl_String_toCharArray(var$2));
            var$4 = otci_Base46_decodeUnsigned(var$3);
            var$5 = $rt_createIntArray(var$4 * 2 | 0);
            $digitMapping = var$5.data;
            $u = 0;
            $idx = 0;
            $val = 0;
            var$10 = 0;
            while (var$10 < var$4) {
                $idx = $idx + otci_Base46_decode(var$3) | 0;
                $val = $val + otci_Base46_decode(var$3) | 0;
                $l = $u + 1 | 0;
                $digitMapping[$u] = $idx;
                $u = $l + 1 | 0;
                $digitMapping[$l] = $val;
                var$10 = var$10 + 1 | 0;
            }
            jl_Character_digitMapping = var$5;
        }
        $digitMapping = jl_Character_digitMapping.data;
        $l = 0;
        $u = ($digitMapping.length / 2 | 0) - 1 | 0;
        while ($u >= $l) {
            $idx = ($l + $u | 0) / 2 | 0;
            var$4 = $idx * 2 | 0;
            $val = $rt_compare($codePoint, $digitMapping[var$4]);
            if ($val > 0)
                $l = $idx + 1 | 0;
            else {
                if ($val >= 0)
                    return $digitMapping[var$4 + 1 | 0];
                $u = $idx - 1 | 0;
            }
        }
        return (-1);
    }
    function jl_Character_forDigit($digit, $radix) {
        if ($radix >= 2 && $radix <= 36 && $digit < $radix)
            return $digit < 10 ? (48 + $digit | 0) & 65535 : ((97 + $digit | 0) - 10 | 0) & 65535;
        return 0;
    }
    function jl_Character_toChars($codePoint) {
        var var$2;
        if ($codePoint < 65536) {
            var$2 = $rt_createCharArray(1);
            var$2.data[0] = $codePoint & 65535;
            return var$2;
        }
        return $rt_createCharArrayFromData([jl_Character_highSurrogate($codePoint), jl_Character_lowSurrogate($codePoint)]);
    }
    function jl_Character_getType($codePoint) {
        var $u, $range, $classes, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, $l, $i;
        $u = $codePoint > 0 && $codePoint <= 65535 ? 1 : 0;
        if ($u && jl_Character_isSurrogate($codePoint & 65535))
            return 19;
        if (jl_Character_classMapping === null) {
            if (jl_Character_$$metadata$$4 === null)
                jl_Character_$$metadata$$4 = jl_Character_obtainClasses$$create();
            $range = (jl_Character_$$metadata$$4.value !== null ? $rt_str(jl_Character_$$metadata$$4.value) : null);
            $classes = $rt_createArray(otciu_UnicodeHelper$Range, 16384);
            var$5 = $classes.data;
            var$6 = $rt_createByteArray(16384);
            var$7 = var$6.data;
            var$8 = 0;
            var$9 = 0;
            var$10 = 0;
            var$11 = 0;
            while (var$11 < jl_String_length($range)) {
                var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                if (var$12 == 64) {
                    var$11 = var$11 + 1 | 0;
                    var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                    var$13 = 0;
                    $u = 1;
                    $l = 0;
                    while ($l < 3) {
                        var$11 = var$11 + 1 | 0;
                        var$13 = var$13 | $rt_imul($u, otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11)));
                        $u = $u * 64 | 0;
                        $l = $l + 1 | 0;
                    }
                } else if (var$12 < 32)
                    var$13 = 1;
                else {
                    var$12 = (var$12 - 32 | 0) << 24 >> 24;
                    var$11 = var$11 + 1 | 0;
                    var$13 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                }
                if (!var$12 && var$13 >= 128) {
                    if (var$8 > 0) {
                        $u = var$9 + 1 | 0;
                        var$5[var$9] = otciu_UnicodeHelper$Range__init_(var$10, var$10 + var$8 | 0, ju_Arrays_copyOf0(var$6, var$8));
                        var$9 = $u;
                    }
                    var$10 = var$10 + (var$8 + var$13 | 0) | 0;
                    var$8 = 0;
                } else {
                    $u = var$8 + var$13 | 0;
                    if ($u < var$7.length)
                        $l = var$9;
                    else {
                        $l = var$9 + 1 | 0;
                        var$5[var$9] = otciu_UnicodeHelper$Range__init_(var$10, var$10 + var$8 | 0, ju_Arrays_copyOf0(var$6, var$8));
                        var$10 = var$10 + $u | 0;
                        var$8 = 0;
                    }
                    while (true) {
                        $u = var$13 + (-1) | 0;
                        if (var$13 <= 0)
                            break;
                        $i = var$8 + 1 | 0;
                        var$7[var$8] = var$12;
                        var$8 = $i;
                        var$13 = $u;
                    }
                    var$9 = $l;
                }
                var$11 = var$11 + 1 | 0;
            }
            jl_Character_classMapping = ju_Arrays_copyOf1($classes, var$9);
        }
        $classes = jl_Character_classMapping.data;
        $l = 0;
        $u = $classes.length - 1 | 0;
        while ($l <= $u) {
            $i = ($l + $u | 0) / 2 | 0;
            $range = $classes[$i];
            if ($codePoint >= $range.$end0)
                $l = $i + 1 | 0;
            else {
                $u = $range.$start2;
                if ($codePoint >= $u)
                    return $range.$data.data[$codePoint - $u | 0];
                $u = $i - 1 | 0;
            }
        }
        return 0;
    }
    function jl_Character_isLetter($codePoint) {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                return 0;
        }
        return 1;
    }
    function jl_Character_isLetterOrDigit($codePoint) {
        a: {
            switch (jl_Character_getType($codePoint)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 9:
                    break;
                case 6:
                case 7:
                case 8:
                    break a;
                default:
                    break a;
            }
            return 1;
        }
        return 0;
    }
    function jl_Character_isIdentifierIgnorable($codePoint) {
        a: {
            if (!($codePoint >= 0 && $codePoint <= 8) && !($codePoint >= 14 && $codePoint <= 27)) {
                if ($codePoint < 127)
                    break a;
                if ($codePoint > 159)
                    break a;
            }
            return 1;
        }
        return jl_Character_getType($codePoint) != 16 ? 0 : 1;
    }
    function jl_Character_isSpaceChar($codePoint) {
        switch (jl_Character_getType($codePoint)) {
            case 12:
            case 13:
            case 14:
                break;
            default:
                return 0;
        }
        return 1;
    }
    function jl_Character_isWhitespace($codePoint) {
        switch ($codePoint) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 28:
            case 29:
            case 30:
            case 31:
                break;
            case 160:
            case 8199:
            case 8239:
                return 0;
            default:
                return jl_Character_isSpaceChar($codePoint);
        }
        return 1;
    }
    function jl_Character__clinit_() {
        jl_Character_TYPE = $rt_cls($rt_charcls());
        jl_Character_characterCache = $rt_createArray(jl_Character, 128);
    }
    function jl_Character_acquireLowerCaseMapping$$create() {
        return {"value" : ">W  H#F#U 4%F#O #F#/ d%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a1# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #<+#%# #%# #%# \'.3#%# #%# #{1#%# #w1%%# %J\'#k1#o1#%# #w1#!3# #23#*3#%# \'23#:3# #>3#%# #%# #%# #N3#%# #N3# %%# #N3#%# #J3%%# #%# #R3#%# \'%# /)#%# #)#%# #)#%# #%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# %)#%# #%# #8)#L%#%# #%# #%# #"
        + "%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a+# #%# #%# #%# #%# #%# #%# #%# #%# #%# /B45#%# #,/#645# %%# #P1#!\'#*\'#%# #%# #%# #%# #%# <-%# #%# \'%# 1&++ %_## #Z#)k%%g%% #F#W hA# 1%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# +]%# %%# #?#%# %a+\'N\'AF#b &#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #^#%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%"
        + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# %*%r iB#oq-&# _?gejg#A1 o$#mo%&# {-%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3,4/# #%# #%# #%"
        + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3C1 1C1 1C1 1C1 1C1 3C/ 1C1 QC1 1C1 1C1 1C%8\'%G# 7i\')G# 7C%D)\' 7C%u)%?# 7X+%P+%G# L-q*/# \'Pw/#8m/# -6## |bA G%# kC.#U !r*%&# &#%# #,05#qX\'#H.5# %%# #%# #%# #e25#D05#q25#m25# #%# %%# 1865%%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# "
        + "#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 1%# #%# )%# (a=%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# G%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# y%%# #%# #%# #%# #%# #%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 5%# #%# #4Fd#%# #%# #%# #%# #%# )%# #<{p# %%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #P}p#}}p#m}p#D}p#P}p# #@yp#D{p#Lyp#Br#%# #%# #%# #%"
        + "# #%# #%# #%# #%# #,%#L}p#LJd#%# #%# -%# +%# #%# Y%# ,T5F#U TUg#r {%g#r >\'c#p Lnk%F# *J#F#b o@5F#b Jo=N#f "};
    }
    function jl_Character_acquireUpperCaseMapping$$create() {
        return {"value" : "<Y  ,%H#U :#>b# v
        + " #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# %665% #\'# )\'# #\'# #\'# #\'# #\'#o25#c25#k25#03#}1# #y1% #m1# #q1#{}p# \'y1#k}p# #$3# #:{p#N}p# #,3#43#N}p#*05#B}p# %43# #B05#<3# %@3# /F.5# %P3# #J}p#P3# \'B{p#P3#$\'#L3%,\'# +T3# 5Jyp#>yp# Z\'_\'# x\'# #\'# \'\'\' #_+\' !#a##]#\' #H#CD##H#3m%#i%% #e%#P%# \'(%#D%#C# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#i\'#P\'#=#(+# #4)# %\'# %\'# .#H#bP\'A #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 3\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# "
        + "#\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'#`# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'% &#,%n mB#ko%x %ko%\' RAC1 >$#yu+#uu+#Pu+#Hu+%Lu+#0u+#io+#>@d1 (+2Fd# \'oX\'# AJJd# N%\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #"
        + "\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# +X%# +\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#A1 1A1 1A1 1A1 1A1 3A# #A# #A# #A% /A1 16\'%g\')B)%V+%s)%N+)A1 1A1 1A1 1A% #E# 5<m-# )E# 9A% =A% \'=# ;E# R/8## ddA )\'# @E0#U Nr,%&# #\'# \'D45#845# #\'# #\'# #\'# -"
        + "\'# %\'# 5\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# #\'# )\'- /qq-&# i]=\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# G\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# y%\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
        + " #\'# #\'# #\'# #\'# 5\'# #\'# %\'# #\'# #\'# #\'# #\'# )\'# )\'# #\'#*%# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 7\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# )\'# #\'- #\'% )\'# #\'S )\'# cEDr# Yiejg# e*5H#U eUi#r {%i#r <\'e#<% Vlm%:# RH#H#b o@5H#b No=P#f "};
    }
    function jl_Character_obtainDigitMapping$$create() {
        return {"value" : "&C*% %%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_H#T#%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%{CG%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%6)G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%!i#G"
        + "%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%*;G%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%:/G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%{/G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%R@dG%%%%%%%%%%%%%%%%%%R[G%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%!#G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%cCG%%%%%%%%%%%%%%%%%%o*IG%%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%c:#T#%%%%%%%%%%%%%%%%%%w&%G%%%%%"
        + "%%%%%%%%%%%%%BhG%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%_%G%%%%%%%%%%%%%%%%%%>-G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%w=G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%>AG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%!dG%%%%%%%%%%%%%%%%%%g5G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%*0EG%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%28UG%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%"
        + "%%%!8%G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%sKG%%%%%%%%%%%%%%%%%%>&#G%%%%%%%%%%%%%%%%%%wN)G%%%%%%%%%%%%%%%%%%"};
    }
    function jl_Character_obtainClasses$$create() {
        return {"value" : "PA-Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:PB-9[%=9<=&>:1=<=:L#<#Y#<,&?L$9B8:B(C9:C)!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!C$B##!#B##B$C#B%#B##B$C$B##B##!#!#B##!C#!#B##B$#!#B#C#&!C$F%!$#!$#!$#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!C#!$#!#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C(B##B#C#!#B%#!#!#!#!Cg&C<E3]%E-]/E&](%<%]2b\'Q! !#!#%<!#A#%C$9!A%]#!9B$ ! B##B2 B*CD!C#B$C$!#!#!#!#!#!#!#!#!#!#!#!C&!#:!#B#C#BTCQ!#!#!#!#"
        + "!#!#!#!#!#!#!#!#!#!#!#!#!#=G&H#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!# BGA#%Y\'CJ95A#^#; GN5\'9G#9G#9\'A)F<A%F%Y#A,Q\'Z$Y#;Y#^#G,91Y$FA%F+G6J+Y%F#\'b&D! 9&G(1=G\'E#G#=G%F#J+F$^#&Y/ 1&\'F?G<A#b&:! G,&A/J+FBG*E#=Y$%A#\'[#F7G%%G*%G$%G&A#Y0 F:G$A#9 F,A&F9<F\' Q#A\'G)FJ%G91GA)FW\')\'&I$G)I%\'I#&G(F+G#Y#J+9%F0\'I# F)A#F#A#F7 F( &A$F%A#\'&I$G%A#I#A#I#\'&A))A%F# F$G#A#J+F#[#L\'=;&9\'A#G#) F\'A%F#A#F7 F( F# F#"

        + "L+=\'=\'=\'6767I#F) FEA%G/)G&9G#F&G, GE ^)\'^\' ^#Y&^%Y#AFFLI#G%)G\')G#I#G#&J+Y\'F\'I#G#F%G$&I$F#I(F$G%F.\'I#G#I\'\'&)J+I$\'^#BG !A&!A#CL9%C$b&*&  F%A#F( & F%A#FJ F%A#FB F%A#F( & F%A#F0 FZ F%A#FeA#G$Y*L5A$F1^+A\'b!7! A#C\'A#5b&M* =9F2-F;67A$FmY$K$F)A(F3G$)A*F4G#)Y#A*F3G#A-F. F$ G#A-FUG#)G(I)\'I#G,Y$%Y$;&\'A#J+A\'L+A\'Y\'5Y%G$1\'J+A\'FD%FVA(F&G#FC\'&A&FhA+F@ G$I%G#I$A%I#\'I\'G$A%=A$Y#J+F?A#F&A,FMA%F;A\'J+,A$^CF8G#I#\'A#Y#FV)\')G( \')\'I#G)I\'G+A#\'J+A\'J+A\'Y(%Y\'A#G/(G1ARG%)FP\')G&)\'I&\'I#F)A$J+Y(^+G*^*Y# G#)F?)G%I#G#)G$F#J+FM\')G#I$\')G$I#A)Y%"
        + "FEI)G)I#G#A$Y&J+A$F$J+F?E\'Y#C*A(BLA#B$Y)A)G$9G.)G(F%\'F\'\'F#)G#&A&CMEaC.%CCEFGb!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*B)C\'A#B\'A#C)B)C)B)C\'A#B\'A#C) ! ! ! !C)B)C/A#C)D)C)D)C)D)C& C#B%$<#]$C$ C#B%$]$C%A#C#B% ]$C)B&]$A#C$ C#B%$]# M,Q&U\'Y#>?6_#?6>Y)./Q&-Y*>?Y%X#Y$:67Y,:98Y+-Q& Q+,%A#L\'Z$67%L+Z$67 E.A$[BA0G."
        + "H%\'H$G-A0^#!^%!^##B$C#B$#=!^#:B&^\'!=!=!=B%=#B%#F%#^#C#B#Z&!C%=:^##=L1KD!#K%,^#A%Z&^&Z#^%:^#:^#:^(:^@Z#^#:=:^@b:-% ^)6767^5Z#^(67b=2! :^?Z:^IZ\'^gA:^,A6L^^pL7b=X# :^*:^WZ)b=P! :b=Y$ 67676767676767L?^MZ&67Z@6767676767Z1b= % b:$# 6767676767676767676767Za6767ZA67b:#% ^QZ6^#Z\'^HA#^A b=J! BQCQ!#B$C#!#!#!#B%#!C#!C\'E#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#^\'!#!#G$!#A&Y%,Y#CG #A&#A#FYA(%9A/\'F8A*F( F( F( F( F( F( F( F( GAY#>?>?Y$>?9>?Y*5Y#59>?Y#>?67676767Y"
        + "&%Y+U#Y%596Y.^#Y$676767675AC^; b=:! A-b=7$ A;^-A%-Y$=%&+6767676767^#6767676756W#=K*G%I#5E&^#K$%&9^# b&7! A#G#]#E#&5b&;! 9E$&A&FL b&?!  ^#L%^+FA^EA-F1^@ L+^?L)=L0^AL+^HL0b= & &b `G!&^b&b   %b `(!F7%b&X2 A$^XA*FIE\'Y#b&-% %Y$F1J+F#A5!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#&\'H$9G+9%!#!#!#!#!#!#!#!#!#!#!#!#!#!#E#G#FhK+G#Y\'A)]8E*]#!#!#!#!#!#!#!C$!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#%C)!#!#B##!#!#!#!#%]#!#!#&!#!C$!#!#!#!#!#!#!#!#!#!#B&#B&#!#!#!#!#!#!#!#B%#!#A&!# # #!#!#A9E$!#&E##F(\'F"
        + "$\'F%\'F8I#G#)^%\'A$L\'^#;=A\'FUY%A)I#FSI1G#A)Y#J+A\'G3F\'Y$&9F#\'J+F=G)Y#F8G,I#A,9F>A$G$)FP\'I#G%I#G#I$Y. %J+A%Y#F&\'%F*J+F& FJG\'I#G#I#G#A*F$\'F)\')A#J+A#Y%F1%F\'^$&)\')FS\'&G$F#G#F&G#&\'&A9F#%Y#F,)G#I#Y#&E#)\'A+F\'A#F\'A#F\'A*F( F( CL<E%C*%]#A%b#1! FDI#\'I#\'I#9)\'A#J+A\'&b CO#&A-F8A%FRA%4b `. T#b `! T#b `0 43b `D!3b&O& A#b&K! AGC(A-C&A&&\'F+:F. F& & F# F# b&M! ]2A1b&L& 76^1FbA#FWA(=AAF-;^$G1Y(679A\'G19U#X#6767676767676767Y#67Y%X$Y$ Y%5676767Y$:5Z$ 9;Y#A%F& b&(# A#1 Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:67967Y#F+%FNE#F@A$F\'A#F\'A#F\'A#"
        + "F$A$[#:<=[# =Z%^#A+Q$^#A#F- F; F4 F# F0A#F/ACb&]! A&Y$A%LNA$^*KVL%^2L#^$ ^.A$=AP^N\'b ## F>A$FRA0\'L<A%FAL%A*F5+F)+A&FGG&A&F? 9FEA%F)9K&AKBICIFpA#J+A\'BEA%CEA%FIA)FUA,9B, B0 B( B# C, C0 C( C#Aeb&X% A*F7A+F)A9E\' EK E*AgF\'A#& FM F#A$&A#F8 9L)F8^#L(F@A)L*AQF4 F#A&L&F7L\'A$9F;A&9AbFYA%L#F#L1A#LO&G$ G#A&G%F% F$ F>A#G$A%\'L*A(Y*A(F>L#9F>L$AAF)=F=G#A%L&Y(A*FWA$Y(F7A#L)F4A&L)F3A(Y%A-L(b 1! FkAXBTA.CTA(L\'FEG%A)J+b G% L@ FK G#5A#F#AmG$F>L+&A)F7G,L%Y&A7F3G%Y%AGF6L(A5F8A*)\')FVG0Y(A%L5J+\'F#G#&A*G$)FNI$G%I#G#Y#1Y%\'A+1A#F:A(J+"
        + "A\'G$FEG&)G) J+Y%&I#&A)FD\'Y#&A*G#)FQI$G*I#F%Y%G%9)\'J+&9&Y$ L5A,F3 F:I$G$I#\')G#Y\'\'F#\'A`F( & F% F0 F+9A\'FP\'I$G)A&J+A\'G#I# F)A#F#A#F7 F( F# F& G#&I#\'I%A#I#A#I$A#&A\')A&F&I#A#G(A$G&b ,# FVI$G)I#G$)\'F%Y&J+Y# 9\'F$A?FQI$G\')\'I%G#)G#F#9&A)J+b G# FPI$G%A#I%G#)G#Y8F%G#ACFQI$G)I#\')G#Y$&A,J+A\'Y.A4FL\')\'I#G\')\'&9A\'J+AWF<A#G$I#G%)G&A%J+L#Y$=F(b Z# FMI$G*)G#9b E! BACAJ+L*A-F)A#&A#F) F# F9I\' I#A#G#)\'&)&)\'Y$A*J+AhF)A#FHI$G%A#G#I%\'&9&)A<&G+FIG\')&G%Y)\'A)&G\'I#G$FOG.)G#Y$&Y&A.FkA(Y+b W$ F* FF)G( G\')\'&Y&A+J+L4A$Y#F?A#G7 )G()G#)G#AkF("
        + " F# FGG\'A$\' G# G(&\'A)J+A\'F\' F# FAI& G# I#\')\'&A(J+b W% F4G#I#Y#A(G#&)F. FCI#G&A$I#\')\'Y.J+b 7! &A0L6^)[%^2A.9b&;/ b G! b+P!  Y&A,b&%$ b -J b&B! Y#A.b&Q1 Q1\'F\'G0b K` b&(* b Z\'#b&Z) A(F@ J+A%Y#Fq J+A\'F?A#G&9A+FQG(Y&^%E%9=A+J+ L( F6A&F4b Q+ BACAL8Y%b F! FmA%\'&IXA(G%E.AbE#9%\'A,I#A/&b W@!&A)b&74 AK&A(&b H,#E% E( E# b&D% A0&A>F$A#&A/F%A)b&-\' b %E b&L! A&F.A$F*A(F+A#=G#9Q%b =*!GOA#G8A*b=U! A^b=W$ A+^HA#^^I#G$^$I\'Q)G)^#G(^?G%^_A6^dG$=b [! L5A-L5A-b=8! A*L:b (# B;C;B;C( C3B;C;! B#A#!A#B#A#B% B)C% # C( C,B;C;B# B%A#B) "
        + "B( C;B# B% B& !A$B( C;B;C;B;C;B;C;B;C;B;C;B;C=A#B::C::C\'B::C::C\'B::C::C\'B::C::C\'B::C::C\'!#A#JSb= ) GX^%GS^)\'^/\'^#Y&A0G& G0b 12 C+&C5A\'C\'b 6$ G( G2A#G( G# G&A&E`AB\'b Q! FNA$G(E(A#J+A%&=b  & F?\'A2FMG%J+A&;b 1( F<%G%J+b G, F( F% F# F0 b&&$ A#L*G(AJBCCCG(%A%J+A%Y#b 2- L]=L$;L%AnLN=L0b #$ F% F< F# &A#& F+ F% & &A\'&A%& & & F$ F# &A#& & & & & F# &A#F% F( F% F% & F+ F2A&F$ F& F2AUZ#b /% ^MA%b=E! A-^0A#^0 ^0 ^FA+L.b=B# AY^>A.^MA%^*A(^#A/^\'b ;# b=]$ ]&b=9, A%^2A$^.A$b=X! A%b=@! A\'^-A%=A0^-A%^YA)^+A\'^IA)^?A#^#Apb=5& A"
        + "-^/A#^.A$^*A(^O ^(A)^/A%^*A(^*A(b=4#  ^XAFJ+b \'1 &b   %b   %b ?<#&AA&b Y !&A\'&b =$ &A#&b  ;!&A/&b PU!&b @Q b&?) b C8 &b *.!&A&&b ?!!&b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b 2R!1A?b1A! b  # b\'Q$ b   %b   %b   %b 1Y$3b   %b   %b   %b ^a$3A#3b   %b   %b   %b ^a$3"};
    }
    var ju_Map = $rt_classWithoutFields(0);
    var ju_AbstractMap = $rt_classWithoutFields();
    var jl_Cloneable = $rt_classWithoutFields(0);
    function ju_HashMap() {
        var a = this; ju_AbstractMap.call(a);
        a.$elementCount = 0;
        a.$elementData = null;
        a.$modCount = 0;
        a.$loadFactor = 0.0;
        a.$threshold = 0;
    }
    function ju_HashMap__init_() {
        var var_0 = new ju_HashMap();
        ju_HashMap__init_0(var_0);
        return var_0;
    }
    function ju_HashMap__init_0($this) {
        var var$1;
        var$1 = ju_HashMap_calculateCapacity(16);
        $this.$elementCount = 0;
        $this.$elementData = $rt_createArray(ju_HashMap$HashEntry, var$1);
        $this.$loadFactor = 0.75;
        ju_HashMap_computeThreshold($this);
    }
    function ju_HashMap_calculateCapacity($x) {
        var var$2;
        if ($x >= 1073741824)
            return 1073741824;
        if (!$x)
            return 16;
        var$2 = $x - 1 | 0;
        $x = var$2 | var$2 >> 1;
        $x = $x | $x >> 2;
        $x = $x | $x >> 4;
        $x = $x | $x >> 8;
        return ($x | $x >> 16) + 1 | 0;
    }
    function ju_HashMap_computeThreshold($this) {
        $this.$threshold = $this.$elementData.data.length * $this.$loadFactor | 0;
    }
    function ju_HashMap_containsKey($this, $key) {
        return ju_HashMap_getEntry($this, $key) === null ? 0 : 1;
    }
    function ju_HashMap_get($this, $key) {
        var $m;
        $m = ju_HashMap_getEntry($this, $key);
        if ($m === null)
            return null;
        return $m.$value25;
    }
    function ju_HashMap_getEntry($this, $key) {
        var $m, $hash;
        if ($key === null)
            $m = ju_HashMap_findNullKeyEntry($this);
        else {
            $hash = jl_String_hashCode($key);
            $m = ju_HashMap_findNonNullKeyEntry($this, $key, $hash & ($this.$elementData.data.length - 1 | 0), $hash);
        }
        return $m;
    }
    function ju_HashMap_findNonNullKeyEntry($this, $key, $index, $keyHash) {
        var $m, var$5;
        $m = $this.$elementData.data[$index];
        while ($m !== null) {
            if ($m.$origKeyHash == $keyHash) {
                var$5 = $m.$key;
                if ($key !== var$5 && !jl_String_equals($key, var$5) ? 0 : 1)
                    break;
            }
            $m = $m.$next0;
        }
        return $m;
    }
    function ju_HashMap_findNullKeyEntry($this) {
        var $m;
        $m = $this.$elementData.data[0];
        while ($m !== null && $m.$key !== null) {
            $m = $m.$next0;
        }
        return $m;
    }
    function ju_HashMap_put($this, $key, $value) {
        var var$3, var$4, var$5;
        if ($key === null) {
            var$3 = ju_HashMap_findNullKeyEntry($this);
            if (var$3 === null) {
                $this.$modCount = $this.$modCount + 1 | 0;
                var$3 = ju_HashMap_createHashedEntry($this, null, 0, 0);
                var$4 = $this.$elementCount + 1 | 0;
                $this.$elementCount = var$4;
                if (var$4 > $this.$threshold)
                    ju_HashMap_rehash($this);
            }
        } else {
            var$4 = jl_String_hashCode($key);
            var$5 = var$4 & ($this.$elementData.data.length - 1 | 0);
            var$3 = ju_HashMap_findNonNullKeyEntry($this, $key, var$5, var$4);
            if (var$3 === null) {
                $this.$modCount = $this.$modCount + 1 | 0;
                var$3 = ju_HashMap_createHashedEntry($this, $key, var$5, var$4);
                var$4 = $this.$elementCount + 1 | 0;
                $this.$elementCount = var$4;
                if (var$4 > $this.$threshold)
                    ju_HashMap_rehash($this);
            }
        }
        $key = var$3.$value25;
        var$3.$value25 = $value;
        return $key;
    }
    function ju_HashMap_createHashedEntry($this, $key, $index, $hash) {
        var $entry, var$5, var$6;
        $entry = new ju_HashMap$HashEntry;
        var$5 = null;
        $entry.$key = $key;
        $entry.$value25 = var$5;
        $entry.$origKeyHash = $hash;
        var$6 = $this.$elementData.data;
        $entry.$next0 = var$6[$index];
        var$6[$index] = $entry;
        return $entry;
    }
    function ju_HashMap_rehash($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8;
        var$1 = $this.$elementData.data.length;
        var$1 = ju_HashMap_calculateCapacity(!var$1 ? 1 : var$1 << 1);
        var$2 = $rt_createArray(ju_HashMap$HashEntry, var$1);
        var$3 = var$2.data;
        var$4 = 0;
        var$5 = var$1 - 1 | 0;
        while (true) {
            var$6 = $this.$elementData.data;
            if (var$4 >= var$6.length)
                break;
            var$7 = var$6[var$4];
            var$6[var$4] = null;
            while (var$7 !== null) {
                var$1 = var$7.$origKeyHash & var$5;
                var$8 = var$7.$next0;
                var$7.$next0 = var$3[var$1];
                var$3[var$1] = var$7;
                var$7 = var$8;
            }
            var$4 = var$4 + 1 | 0;
        }
        $this.$elementData = var$2;
        ju_HashMap_computeThreshold($this);
    }
    var jl_Iterable = $rt_classWithoutFields(0);
    var ju_Collection = $rt_classWithoutFields(0);
    var ju_AbstractCollection = $rt_classWithoutFields();
    function ju_AbstractCollection_contains($this, $o) {
        var $iter, $e;
        $iter = ju_AbstractList_iterator($this);
        while (ju_AbstractList$1_hasNext($iter)) {
            $e = ju_AbstractList$1_next($iter);
            if ($e === $o ? 1 : $e !== null ? $e.$equals($o) : $o !== null ? 0 : 1)
                return 1;
        }
        return 0;
    }
    function ju_AbstractCollection_toArray($this, $a) {
        var var$2, $i, $i_0, $iter, var$6, var$7;
        var$2 = $a.data;
        $i = $this.$size0;
        $i_0 = var$2.length;
        if ($i_0 < $i)
            $a = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($a)), $i);
        else
            while ($i < $i_0) {
                var$2[$i] = null;
                $i = $i + 1 | 0;
            }
        $i_0 = 0;
        $iter = ju_AbstractList_iterator($this);
        while (ju_AbstractList$1_hasNext($iter)) {
            var$6 = $a.data;
            var$7 = $i_0 + 1 | 0;
            var$6[$i_0] = ju_AbstractList$1_next($iter);
            $i_0 = var$7;
        }
        return $a;
    }
    var ju_SequencedCollection = $rt_classWithoutFields(0);
    var ju_List = $rt_classWithoutFields(0);
    function ju_AbstractList() {
        ju_AbstractCollection.call(this);
        this.$modCount0 = 0;
    }
    function ju_AbstractList_iterator($this) {
        var var$1;
        var$1 = new ju_AbstractList$1;
        var$1.$this$0 = $this;
        var$1.$modCount1 = $this.$modCount0;
        var$1.$size1 = $this.$size0;
        var$1.$removeIndex = (-1);
        return var$1;
    }
    var ju_RandomAccess = $rt_classWithoutFields(0);
    function ju_ArrayList() {
        var a = this; ju_AbstractList.call(a);
        a.$array = null;
        a.$size0 = 0;
    }
    function ju_ArrayList__init_() {
        var var_0 = new ju_ArrayList();
        ju_ArrayList__init_0(var_0);
        return var_0;
    }
    function ju_ArrayList__init_0($this) {
        $this.$array = $rt_createArray(jl_Object, 10);
    }
    function ju_ArrayList_ensureCapacity($this, $minCapacity) {
        var var$2, $newLength;
        var$2 = $this.$array.data.length;
        if (var$2 < $minCapacity) {
            $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($minCapacity, jl_Math_max(var$2 * 2 | 0, 5));
            $this.$array = ju_Arrays_copyOf1($this.$array, $newLength);
        }
    }
    function ju_ArrayList_get($this, $index) {
        ju_ArrayList_checkIndex($this, $index);
        return $this.$array.data[$index];
    }
    function ju_ArrayList_size($this) {
        return $this.$size0;
    }
    function ju_ArrayList_add($this, $element) {
        var var$2, var$3;
        ju_ArrayList_ensureCapacity($this, $this.$size0 + 1 | 0);
        var$2 = $this.$array.data;
        var$3 = $this.$size0;
        $this.$size0 = var$3 + 1 | 0;
        var$2[var$3] = $element;
        $this.$modCount0 = $this.$modCount0 + 1 | 0;
        return 1;
    }
    function ju_ArrayList_remove($this, $i) {
        var var$2, $old, var$4, $i_0;
        ju_ArrayList_checkIndex($this, $i);
        var$2 = $this.$array.data;
        $old = var$2[$i];
        var$4 = $this.$size0 - 1 | 0;
        $this.$size0 = var$4;
        while ($i < var$4) {
            $i_0 = $i + 1 | 0;
            var$2[$i] = var$2[$i_0];
            $i = $i_0;
        }
        var$2[var$4] = null;
        $this.$modCount0 = $this.$modCount0 + 1 | 0;
        return $old;
    }
    function ju_ArrayList_checkIndex($this, $index) {
        var var$2;
        if ($index >= 0 && $index < $this.$size0)
            return;
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    function tj_Statements() {
        var a = this; jl_Object.call(a);
        a.$type = null;
        a.$line = 0;
        a.$isBlock = 0;
        a.$body = null;
    }
    function tj_Statements__init_0() {
        var var_0 = new tj_Statements();
        tj_Statements__init_(var_0);
        return var_0;
    }
    function tj_Statements__init_($this) {
        $this.$isBlock = 0;
        $this.$body = ju_ArrayList__init_();
    }
    function tj_Statements_getBody($this) {
        return $this.$body;
    }
    function tj_Statements_getLine($this) {
        return $this.$line;
    }
    function tj_Statements_getType($this) {
        return $this.$type;
    }
    function tj_Statements_getTypeT($this) {
        return $this.$type.$name0;
    }
    function tj_Statements_addStatement($this, $stmt) {
        ju_ArrayList_add($this.$body, $stmt);
    }
    var tj_ClassStmt = $rt_classWithoutFields(tj_Statements);
    function tj_ClassStmt_getLine($this) {
        return $this.$line;
    }
    function otji_JSWrapper() {
        jl_Object.call(this);
        this.$js = null;
    }
    var otji_JSWrapper_hashCodes = null;
    var otji_JSWrapper_wrappers = null;
    var otji_JSWrapper_stringWrappers = null;
    var otji_JSWrapper_numberWrappers = null;
    var otji_JSWrapper_stringFinalizationRegistry = null;
    var otji_JSWrapper_numberFinalizationRegistry = null;
    function otji_JSWrapper_$callClinit() {
        otji_JSWrapper_$callClinit = $rt_eraseClinit(otji_JSWrapper);
        otji_JSWrapper__clinit_();
    }
    function otji_JSWrapper__init_(var_0) {
        var var_1 = new otji_JSWrapper();
        otji_JSWrapper__init_0(var_1, var_0);
        return var_1;
    }
    function otji_JSWrapper__init_0($this, $js) {
        otji_JSWrapper_$callClinit();
        $this.$js = $js;
    }
    function otji_JSWrapper_unwrap($o) {
        otji_JSWrapper_$callClinit();
        if ($o !== null)
            return $o.$js;
        return null;
    }
    function otji_JSWrapper_javaToJs($o) {
        otji_JSWrapper_$callClinit();
        if ($o === null)
            return null;
        return $o instanceof $rt_objcls() && $o instanceof otji_JSWrapper ? otji_JSWrapper_unwrap($o) : $o;
    }
    function otji_JSWrapper_jsToJava($o) {
        var var$2, var$3;
        otji_JSWrapper_$callClinit();
        if ($o === null)
            return null;
        if ($o instanceof $rt_objcls())
            $o = $o;
        else
            a: {
                $o = $o;
                if ($o === null)
                    $o = null;
                else {
                    b: {
                        var$2 = $o;
                        if (otji_JSWrapper_wrappers !== null) {
                            var$3 = $rt_str(typeof otji_JSWrapper_javaToJs(var$2));
                            if (!jl_String_equals(var$3, $rt_s(209)) && !jl_String_equals(var$3, $rt_s(58))) {
                                if (jl_String_equals(var$3, $rt_s(210))) {
                                    $o = otji_JSWrapper_stringWrappers.get(var$2);
                                    $o = (typeof otji_JSWrapper_javaToJs($o) === 'undefined' ? 1 : 0) ? void 0 : $o.deref();
                                    if (!(typeof otji_JSWrapper_javaToJs($o) === 'undefined' ? 1 : 0)) {
                                        $o = $o;
                                        break a;
                                    }
                                    $o = otji_JSWrapper__init_(var$2);
                                    var$3 = $o;
                                    otji_JSWrapper_stringWrappers.set(var$2, new $rt_globals.WeakRef(var$3));
                                    otji_JSWrapper_register$js_body$_4(otji_JSWrapper_stringFinalizationRegistry, var$3, var$2);
                                    break a;
                                }
                                if (!jl_String_equals(var$3, $rt_s(211)))
                                    break b;
                                else {
                                    $o = otji_JSWrapper_numberWrappers.get(var$2);
                                    $o = (typeof otji_JSWrapper_javaToJs($o) === 'undefined' ? 1 : 0) ? void 0 : $o.deref();
                                    if (!(typeof otji_JSWrapper_javaToJs($o) === 'undefined' ? 1 : 0)) {
                                        $o = $o;
                                        break a;
                                    }
                                    $o = otji_JSWrapper__init_(var$2);
                                    var$3 = $o;
                                    otji_JSWrapper_numberWrappers.set(var$2, new $rt_globals.WeakRef(var$3));
                                    otji_JSWrapper_register$js_body$_4(otji_JSWrapper_numberFinalizationRegistry, var$3, var$2);
                                    break a;
                                }
                            }
                            $o = otji_JSWrapper_wrappers.get(var$2);
                            $o = (typeof otji_JSWrapper_javaToJs($o) === 'undefined' ? 1 : 0) ? void 0 : $o.deref();
                            if (!(typeof otji_JSWrapper_javaToJs($o) === 'undefined' ? 1 : 0)) {
                                $o = $o;
                                break a;
                            }
                            $o = otji_JSWrapper__init_(var$2);
                            otji_JSWrapper_wrappers.set(var$2, new $rt_globals.WeakRef($o));
                            break a;
                        }
                    }
                    $o = otji_JSWrapper__init_(var$2);
                }
            }
        return $o;
    }
    function otji_JSWrapper__clinit_() {
        otji_JSWrapper_hashCodes = new $rt_globals.WeakMap();
        otji_JSWrapper_wrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.WeakMap();
        otji_JSWrapper_stringWrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.Map();
        otji_JSWrapper_numberWrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.Map();
        otji_JSWrapper_stringFinalizationRegistry = otji_JSWrapper_stringWrappers === null ? null : new $rt_globals.FinalizationRegistry(otji_JS_function(new otji_JSWrapper$_clinit_$lambda$_29_0, "accept"));
        otji_JSWrapper_numberFinalizationRegistry = otji_JSWrapper_numberWrappers === null ? null : new $rt_globals.FinalizationRegistry(otji_JS_function(new otji_JSWrapper$_clinit_$lambda$_29_1, "accept"));
    }
    function otji_JSWrapper_register$js_body$_4(var$1, var$2, var$3) {
        return var$1.register(var$2, var$3);
    }
    function jl_Enum() {
        var a = this; jl_Object.call(a);
        a.$name0 = null;
        a.$ordinal0 = 0;
    }
    function jl_Enum__init_($this, $name, $ordinal) {
        $this.$name0 = $name;
        $this.$ordinal0 = $ordinal;
    }
    function jl_Enum_ordinal($this) {
        return $this.$ordinal0;
    }
    function jl_Enum_toString($this) {
        return $this.$name0;
    }
    var tj_Statements$StmtType = $rt_classWithoutFields(jl_Enum);
    var tj_Statements$StmtType_FUNCTION = null;
    var tj_Statements$StmtType_IF = null;
    var tj_Statements$StmtType_WHILE = null;
    var tj_Statements$StmtType_FOREACH = null;
    var tj_Statements$StmtType_RETURN = null;
    var tj_Statements$StmtType_CALL = null;
    var tj_Statements$StmtType_ASSIGNMENT = null;
    var tj_Statements$StmtType_DECLARATION = null;
    var tj_Statements$StmtType_VARIABLE = null;
    var tj_Statements$StmtType_MUTATION = null;
    var tj_Statements$StmtType_END = null;
    var tj_Statements$StmtType_ELSE = null;
    var tj_Statements$StmtType_CLASS = null;
    var tj_Statements$StmtType_ELSEIF = null;
    var tj_Statements$StmtType_FORWHEN = null;
    var tj_Statements$StmtType_PRINT = null;
    var tj_Statements$StmtType_SHOWMSGBOX = null;
    var tj_Statements$StmtType_REMOVEAT = null;
    var tj_Statements$StmtType_REMOVEFROM = null;
    var tj_Statements$StmtType_REMOVEALLFROM = null;
    var tj_Statements$StmtType_COMMENT = null;
    var tj_Statements$StmtType_$VALUES = null;
    function tj_Statements$StmtType_$callClinit() {
        tj_Statements$StmtType_$callClinit = $rt_eraseClinit(tj_Statements$StmtType);
        tj_Statements$StmtType__clinit_();
    }
    function tj_Statements$StmtType__init_(var_0, var_1) {
        var var_2 = new tj_Statements$StmtType();
        tj_Statements$StmtType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Statements$StmtType_values() {
        tj_Statements$StmtType_$callClinit();
        return tj_Statements$StmtType_$VALUES.$clone();
    }
    function tj_Statements$StmtType__init_0($this, var$1, var$2) {
        tj_Statements$StmtType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Statements$StmtType__clinit_() {
        var var$1;
        tj_Statements$StmtType_FUNCTION = tj_Statements$StmtType__init_($rt_s(165), 0);
        tj_Statements$StmtType_IF = tj_Statements$StmtType__init_($rt_s(167), 1);
        tj_Statements$StmtType_WHILE = tj_Statements$StmtType__init_($rt_s(173), 2);
        tj_Statements$StmtType_FOREACH = tj_Statements$StmtType__init_($rt_s(170), 3);
        tj_Statements$StmtType_RETURN = tj_Statements$StmtType__init_($rt_s(166), 4);
        tj_Statements$StmtType_CALL = tj_Statements$StmtType__init_($rt_s(168), 5);
        tj_Statements$StmtType_ASSIGNMENT = tj_Statements$StmtType__init_($rt_s(176), 6);
        tj_Statements$StmtType_DECLARATION = tj_Statements$StmtType__init_($rt_s(174), 7);
        tj_Statements$StmtType_VARIABLE = tj_Statements$StmtType__init_($rt_s(190), 8);
        tj_Statements$StmtType_MUTATION = tj_Statements$StmtType__init_($rt_s(178), 9);
        tj_Statements$StmtType_END = tj_Statements$StmtType__init_($rt_s(212), 10);
        tj_Statements$StmtType_ELSE = tj_Statements$StmtType__init_($rt_s(169), 11);
        tj_Statements$StmtType_CLASS = tj_Statements$StmtType__init_($rt_s(213), 12);
        tj_Statements$StmtType_ELSEIF = tj_Statements$StmtType__init_($rt_s(182), 13);
        tj_Statements$StmtType_FORWHEN = tj_Statements$StmtType__init_($rt_s(171), 14);
        tj_Statements$StmtType_PRINT = tj_Statements$StmtType__init_($rt_s(172), 15);
        tj_Statements$StmtType_SHOWMSGBOX = tj_Statements$StmtType__init_($rt_s(181), 16);
        tj_Statements$StmtType_REMOVEAT = tj_Statements$StmtType__init_($rt_s(175), 17);
        tj_Statements$StmtType_REMOVEFROM = tj_Statements$StmtType__init_($rt_s(177), 18);
        tj_Statements$StmtType_REMOVEALLFROM = tj_Statements$StmtType__init_($rt_s(180), 19);
        var$1 = tj_Statements$StmtType__init_($rt_s(179), 20);
        tj_Statements$StmtType_COMMENT = var$1;
        tj_Statements$StmtType_$VALUES = $rt_createArrayFromData(tj_Statements$StmtType, [tj_Statements$StmtType_FUNCTION, tj_Statements$StmtType_IF, tj_Statements$StmtType_WHILE, tj_Statements$StmtType_FOREACH, tj_Statements$StmtType_RETURN, tj_Statements$StmtType_CALL, tj_Statements$StmtType_ASSIGNMENT, tj_Statements$StmtType_DECLARATION, tj_Statements$StmtType_VARIABLE, tj_Statements$StmtType_MUTATION, tj_Statements$StmtType_END, tj_Statements$StmtType_ELSE, tj_Statements$StmtType_CLASS, tj_Statements$StmtType_ELSEIF,
        tj_Statements$StmtType_FORWHEN, tj_Statements$StmtType_PRINT, tj_Statements$StmtType_SHOWMSGBOX, tj_Statements$StmtType_REMOVEAT, tj_Statements$StmtType_REMOVEFROM, tj_Statements$StmtType_REMOVEALLFROM, var$1]);
    }
    var otjc_JSWeakMap = $rt_classWithoutFields();
    var otjc_JSWeakRef = $rt_classWithoutFields();
    var otjc_JSMap = $rt_classWithoutFields();
    var otjc_JSFinalizationRegistryConsumer = $rt_classWithoutFields(0);
    var otji_JSWrapper$_clinit_$lambda$_29_0 = $rt_classWithoutFields();
    function otji_JSWrapper$_clinit_$lambda$_29_0_accept$exported$0(var$0, var$1) {
        var var$2;
        var$1 = otji_JSWrapper_jsToJava(var$1);
        var$2 = otji_JSWrapper_stringWrappers;
        var$1 = otji_JSWrapper_unwrap(var$1);
        var$2.delete(var$1);
    }
    var otjc_JSFinalizationRegistry = $rt_classWithoutFields();
    var otji_JSWrapper$_clinit_$lambda$_29_1 = $rt_classWithoutFields();
    function otji_JSWrapper$_clinit_$lambda$_29_1_accept$exported$0(var$0, var$1) {
        var var$2;
        var$1 = otji_JSWrapper_jsToJava(var$1);
        var$2 = otji_JSWrapper_numberWrappers;
        var$1 = otji_JSWrapper_unwrap(var$1);
        var$2.delete(var$1);
    }
    var jl_IllegalArgumentException = $rt_classWithoutFields(jl_RuntimeException);
    var otjc_JSObjects = $rt_classWithoutFields();
    var jl_StringIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException);
    function jur_Pattern() {
        var a = this; jl_Object.call(a);
        a.$lexemes = null;
        a.$flags0 = 0;
        a.$backRefs = null;
        a.$needsBackRefReplacement = 0;
        a.$globalGroupIndex = 0;
        a.$compCount = 0;
        a.$consCount = 0;
        a.$start = null;
    }
    function jur_Pattern_pattern($this) {
        return $this.$lexemes.$orig;
    }
    function jur_Pattern_processExpression($this, $ch, $newFlags, $last) {
        var $children, $saveFlags, $saveChangedFlags, $fSet, $child, var$9;
        $children = ju_ArrayList__init_();
        $saveFlags = $this.$flags0;
        $saveChangedFlags = 0;
        if ($newFlags != $saveFlags)
            $this.$flags0 = $newFlags;
        a: {
            switch ($ch) {
                case -1073741784:
                    $fSet = new jur_NonCapFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                case -536870872:
                case -268435416:
                    break;
                case -134217688:
                case -67108824:
                    $fSet = new jur_BehindFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                case -33554392:
                    $fSet = new jur_AtomicFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                default:
                    $newFlags = $this.$globalGroupIndex + 1 | 0;
                    $this.$globalGroupIndex = $newFlags;
                    if ($last !== null)
                        $fSet = jur_FSet__init_0($newFlags);
                    else {
                        $fSet = new jur_FinalSet;
                        jur_FSet__init_($fSet, 0);
                        $saveChangedFlags = 1;
                    }
                    $newFlags = $this.$globalGroupIndex;
                    if ($newFlags <= (-1))
                        break a;
                    if ($newFlags >= 10)
                        break a;
                    $this.$backRefs.data[$newFlags] = $fSet;
                    break a;
            }
            $fSet = new jur_AheadFSet;
            jur_FSet__init_($fSet, (-1));
        }
        while (true) {
            if (jur_Lexer_isLetter($this.$lexemes) && $this.$lexemes.$lookAhead == (-536870788)) {
                $last = jur_CharClass__init_(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
                while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
                    $child = $this.$lexemes;
                    var$9 = $child.$lookAhead;
                    if (var$9 && var$9 != (-536870788) && var$9 != (-536870871))
                        break;
                    jur_CharClass_add($last, jur_Lexer_next($child));
                    $child = $this.$lexemes;
                    if ($child.$ch != (-536870788))
                        continue;
                    jur_Lexer_next($child);
                }
                $child = jur_Pattern_processRangeSet($this, $last);
                $child.$setNext($fSet);
            } else if ($this.$lexemes.$ch == (-536870788)) {
                $child = jur_EmptySet__init_($fSet);
                jur_Lexer_next($this.$lexemes);
            } else {
                $child = jur_Pattern_processSubExpression($this, $fSet);
                $last = $this.$lexemes;
                if ($last.$ch == (-536870788))
                    jur_Lexer_next($last);
            }
            if ($child !== null)
                ju_ArrayList_add($children, $child);
            if (jur_Lexer_isEmpty($this.$lexemes))
                break;
            if ($this.$lexemes.$ch == (-536870871))
                break;
        }
        if ($this.$lexemes.$lookBack == (-536870788))
            ju_ArrayList_add($children, jur_EmptySet__init_($fSet));
        if ($this.$flags0 != $saveFlags && !$saveChangedFlags) {
            $this.$flags0 = $saveFlags;
            $last = $this.$lexemes;
            $last.$flags = $saveFlags;
            $last.$lookAhead = $last.$ch;
            $last.$lookAheadST = $last.$curST;
            var$9 = $last.$curToc;
            $last.$index = var$9 + 1 | 0;
            $last.$lookAheadToc = var$9;
            jur_Lexer_movePointer($last);
        }
        switch ($ch) {
            case -1073741784:
                break;
            case -536870872:
                $last = new jur_PositiveLookAhead;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -268435416:
                $last = new jur_NegativeLookAhead;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -134217688:
                $last = new jur_PositiveLookBehind;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -67108824:
                $last = new jur_NegativeLookBehind;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -33554392:
                $last = new jur_AtomicJointSet;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            default:
                switch ($children.$size0) {
                    case 0:
                        break;
                    case 1:
                        return jur_SingleSet__init_(ju_ArrayList_get($children, 0), $fSet);
                    default:
                        return jur_JointSet__init_0($children, $fSet);
                }
                return jur_EmptySet__init_($fSet);
        }
        $last = new jur_NonCapJointSet;
        jur_JointSet__init_($last, $children, $fSet);
        return $last;
    }
    function jur_Pattern_processDecomposedChar($this) {
        var $codePoints, $curSymb, $curSymbIndex, $codePointsHangul, var$5, var$6, $readCodePoints;
        $codePoints = $rt_createIntArray(4);
        $curSymb = (-1);
        $curSymbIndex = (-1);
        if (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
            $codePointsHangul = $codePoints.data;
            $curSymb = jur_Lexer_next($this.$lexemes);
            $codePointsHangul[0] = $curSymb;
            $curSymbIndex = $curSymb - 4352 | 0;
        }
        if ($curSymbIndex >= 0 && $curSymbIndex < 19) {
            $codePointsHangul = $rt_createCharArray(3);
            $codePoints = $codePointsHangul.data;
            $codePoints[0] = $curSymb & 65535;
            var$5 = $this.$lexemes;
            var$6 = var$5.$ch;
            $readCodePoints = var$6 - 4449 | 0;
            if ($readCodePoints >= 0 && $readCodePoints < 21) {
                $codePoints[1] = var$6 & 65535;
                jur_Lexer_next(var$5);
                var$5 = $this.$lexemes;
                var$6 = var$5.$ch;
                $curSymb = var$6 - 4519 | 0;
                if ($curSymb >= 0 && $curSymb < 28) {
                    $codePoints[2] = var$6 & 65535;
                    jur_Lexer_next(var$5);
                    return jur_HangulDecomposedCharSet__init_($codePointsHangul, 3);
                }
                return jur_HangulDecomposedCharSet__init_($codePointsHangul, 2);
            }
            if (!jur_Pattern_hasFlag($this, 2))
                return jur_CharSet__init_($codePoints[0]);
            if (jur_Pattern_hasFlag($this, 64))
                return jur_UCICharSet__init_($codePoints[0]);
            return jur_CICharSet__init_($codePoints[0]);
        }
        $codePointsHangul = $codePoints.data;
        $curSymb = 1;
        while ($curSymb < 4 && !jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
            $readCodePoints = $curSymb + 1 | 0;
            $codePointsHangul[$curSymb] = jur_Lexer_next($this.$lexemes);
            $curSymb = $readCodePoints;
        }
        if ($curSymb == 1) {
            $readCodePoints = $codePointsHangul[0];
            if (!(jur_Lexer_singleDecompTable.$get1($readCodePoints) == jur_Lexer_singleDecompTableSize ? 0 : 1))
                return jur_Pattern_processCharSet($this, $codePointsHangul[0]);
        }
        if (!jur_Pattern_hasFlag($this, 2))
            return jur_DecomposedCharSet__init_($codePoints, $curSymb);
        if (jur_Pattern_hasFlag($this, 64)) {
            var$5 = new jur_UCIDecomposedCharSet;
            jur_DecomposedCharSet__init_0(var$5, $codePoints, $curSymb);
            return var$5;
        }
        var$5 = new jur_CIDecomposedCharSet;
        jur_DecomposedCharSet__init_0(var$5, $codePoints, $curSymb);
        return var$5;
    }
    function jur_Pattern_processSubExpression($this, $last) {
        var $cur, $term, var$4, $next, var$6, var$7, var$8;
        if (jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead)) {
            if (jur_Pattern_hasFlag($this, 128)) {
                $cur = jur_Pattern_processDecomposedChar($this);
                if (!jur_Lexer_isEmpty($this.$lexemes)) {
                    $term = $this.$lexemes;
                    var$4 = $term.$ch;
                    if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788) && !jur_Lexer_isLetter($term))
                        $cur = jur_Pattern_processQuantifier($this, $last, $cur);
                }
            } else if (!jur_Lexer_isHighSurrogate($this.$lexemes) && !jur_Lexer_isLowSurrogate($this.$lexemes)) {
                $next = new jl_StringBuffer;
                jl_AbstractStringBuilder__init_($next);
                while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isHighSurrogate($this.$lexemes) && !jur_Lexer_isLowSurrogate($this.$lexemes)) {
                    if (!(!jur_Lexer_isNextSpecial($this.$lexemes) && !$this.$lexemes.$lookAhead) && !(!jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead))) {
                        var$6 = $this.$lexemes.$lookAhead;
                        if (var$6 != (-536870871) && (var$6 & (-2147418113)) != (-2147483608) && var$6 != (-536870788) && var$6 != (-536870876))
                            break;
                    }
                    var$4 = jur_Lexer_next($this.$lexemes);
                    if (!jl_Character_isSupplementaryCodePoint(var$4))
                        jl_AbstractStringBuilder_append($next, var$4 & 65535);
                    else
                        jl_AbstractStringBuilder_append2($next, jl_Character_toChars(var$4));
                }
                if (!jur_Pattern_hasFlag($this, 2)) {
                    $cur = new jur_SequenceSet;
                    jur_LeafSet__init_($cur);
                    $cur.$string0 = jl_AbstractStringBuilder_toString($next);
                    var$4 = $next.$length0;
                    $cur.$charCount = var$4;
                    $cur.$leftToRight = jur_SequenceSet$IntHash__init_(var$4);
                    $cur.$rightToLeft = jur_SequenceSet$IntHash__init_($cur.$charCount);
                    var$7 = 0;
                    while (var$7 < ($cur.$charCount - 1 | 0)) {
                        jur_SequenceSet$IntHash_put($cur.$leftToRight, jl_String_charAt($cur.$string0, var$7), ($cur.$charCount - var$7 | 0) - 1 | 0);
                        jur_SequenceSet$IntHash_put($cur.$rightToLeft, jl_String_charAt($cur.$string0, ($cur.$charCount - var$7 | 0) - 1 | 0), ($cur.$charCount - var$7 | 0) - 1 | 0);
                        var$7 = var$7 + 1 | 0;
                    }
                } else if (jur_Pattern_hasFlag($this, 64))
                    $cur = jur_UCISequenceSet__init_($next);
                else {
                    $cur = new jur_CISequenceSet;
                    jur_LeafSet__init_($cur);
                    $cur.$string1 = jl_AbstractStringBuilder_toString($next);
                    $cur.$charCount = $next.$length0;
                }
            } else
                $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
        } else {
            $term = $this.$lexemes;
            if ($term.$ch != (-536870871))
                $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
            else {
                if ($last instanceof jur_FinalSet)
                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $term.$orig, jur_Lexer_getIndex($term)));
                $cur = jur_EmptySet__init_($last);
            }
        }
        a: {
            if (!jur_Lexer_isEmpty($this.$lexemes)) {
                var$4 = $this.$lexemes.$ch;
                if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788)) {
                    $next = jur_Pattern_processSubExpression($this, $last);
                    if ($cur instanceof jur_LeafQuantifierSet && !($cur instanceof jur_CompositeQuantifierSet) && !($cur instanceof jur_GroupQuantifierSet) && !($cur instanceof jur_AltQuantifierSet)) {
                        var$8 = $cur;
                        if (!$next.$first(var$8.$innerSet)) {
                            $cur = new jur_UnifiedQuantifierSet;
                            jur_LeafQuantifierSet__init_($cur, var$8.$innerSet, var$8.$next2, var$8.$type2);
                            $cur.$innerSet.$setNext($cur);
                        }
                    }
                    if (($next.$getType3() & 65535) != 43)
                        $cur.$setNext($next);
                    else
                        $cur.$setNext($next.$innerSet);
                    break a;
                }
            }
            if ($cur === null)
                return null;
            $cur.$setNext($last);
        }
        if (($cur.$getType3() & 65535) != 43)
            return $cur;
        return $cur.$innerSet;
    }
    function jur_Pattern_processQuantifier($this, $last, $term) {
        var $q, $quant, $leaf, var$6, $q_0;
        $q = $this.$lexemes;
        $quant = $q.$ch;
        if ($term !== null && !($term instanceof jur_LeafSet)) {
            switch ($quant) {
                case -2147483606:
                    jur_Lexer_next($q);
                    $q = new jur_PossessiveGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483605:
                    jur_Lexer_next($q);
                    $q = new jur_PosPlusGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-2147483606));
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483585:
                    jur_Lexer_next($q);
                    $q = new jur_PosAltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483525:
                    $leaf = new jur_PosCompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    var$6 = $this.$compCount + 1 | 0;
                    $this.$compCount = var$6;
                    jur_CompositeGroupQuantifierSet__init_($leaf, $q, $term, $last, (-536870849), var$6);
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $leaf;
                case -1073741782:
                case -1073741781:
                    jur_Lexer_next($q);
                    $q = new jur_ReluctantGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    $term.$setNext($q);
                    return $q;
                case -1073741761:
                    jur_Lexer_next($q);
                    $q = new jur_RelAltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    $term.$setNext($last);
                    return $q;
                case -1073741701:
                    $q_0 = new jur_RelCompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    $quant = $this.$compCount + 1 | 0;
                    $this.$compCount = $quant;
                    jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                    $term.$setNext($q_0);
                    return $q_0;
                case -536870870:
                case -536870869:
                    jur_Lexer_next($q);
                    if ($term.$getType3() != (-2147483602)) {
                        $q = new jur_GroupQuantifierSet;
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                    } else if (jur_Pattern_hasFlag($this, 32)) {
                        $q = new jur_DotAllQuantifierSet;
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                    } else {
                        $q = new jur_DotQuantifierSet;
                        $leaf = jur_AbstractLineTerminator_getInstance($this.$flags0);
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                        $q.$lt = $leaf;
                    }
                    $term.$setNext($q);
                    return $q;
                case -536870849:
                    jur_Lexer_next($q);
                    $q = new jur_AltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    $term.$setNext($last);
                    return $q;
                case -536870789:
                    $q_0 = new jur_CompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    $quant = $this.$compCount + 1 | 0;
                    $this.$compCount = $quant;
                    jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                    $term.$setNext($q_0);
                    return $q_0;
                default:
            }
            return $term;
        }
        $leaf = null;
        if ($term !== null)
            $leaf = $term;
        switch ($quant) {
            case -2147483606:
            case -2147483605:
                jur_Lexer_next($q);
                $q = new jur_PossessiveQuantifierSet;
                jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
                $leaf.$next2 = $q;
                return $q;
            case -2147483585:
                jur_Lexer_next($q);
                $term = new jur_PossessiveAltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-2147483585));
                return $term;
            case -2147483525:
                $term = new jur_PossessiveCompositeQuantifierSet;
                jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-2147483525));
                return $term;
            case -1073741782:
            case -1073741781:
                jur_Lexer_next($q);
                $q = new jur_ReluctantQuantifierSet;
                jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
                $leaf.$next2 = $q;
                return $q;
            case -1073741761:
                jur_Lexer_next($q);
                $term = new jur_ReluctantAltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-1073741761));
                return $term;
            case -1073741701:
                $term = new jur_ReluctantCompositeQuantifierSet;
                jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-1073741701));
                return $term;
            case -536870870:
            case -536870869:
                jur_Lexer_next($q);
                $q = jur_LeafQuantifierSet__init_0($leaf, $last, $quant);
                $leaf.$next2 = $q;
                return $q;
            case -536870849:
                jur_Lexer_next($q);
                $term = new jur_AltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-536870849));
                return $term;
            case -536870789:
                return jur_CompositeQuantifierSet__init_0(jur_Lexer_nextSpecial($q), $leaf, $last, (-536870789));
            default:
        }
        return $term;
    }
    function jur_Pattern_processTerminal($this, $last) {
        var $term, var$3, var$4, $ch, $newFlags, $number, $negative, $cc;
        $term = null;
        var$3 = $last instanceof jur_FinalSet;
        while (true) {
            a: {
                var$4 = $this.$lexemes;
                $ch = var$4.$ch;
                if (($ch & (-2147418113)) == (-2147483608)) {
                    jur_Lexer_next(var$4);
                    $newFlags = ($ch & 16711680) >> 16;
                    $ch = $ch & (-16711681);
                    if ($ch == (-16777176))
                        $this.$flags0 = $newFlags;
                    else {
                        if ($ch != (-1073741784))
                            $newFlags = $this.$flags0;
                        $term = jur_Pattern_processExpression($this, $ch, $newFlags, $last);
                        var$4 = $this.$lexemes;
                        if (var$4.$ch != (-536870871))
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), var$4.$orig, var$4.$curToc));
                        jur_Lexer_next(var$4);
                    }
                } else {
                    b: {
                        c: {
                            switch ($ch) {
                                case -2147483599:
                                case -2147483598:
                                case -2147483597:
                                case -2147483596:
                                case -2147483595:
                                case -2147483594:
                                case -2147483593:
                                case -2147483592:
                                case -2147483591:
                                    break c;
                                case -2147483583:
                                    break;
                                case -2147483582:
                                    jur_Lexer_next(var$4);
                                    $term = jur_WordBoundary__init_(0);
                                    break a;
                                case -2147483577:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_PreviousMatch;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                case -2147483558:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_EOLSet;
                                    $number = $this.$consCount + 1 | 0;
                                    $this.$consCount = $number;
                                    jur_EOLSet__init_($term, $number);
                                    break a;
                                case -2147483550:
                                    jur_Lexer_next(var$4);
                                    $term = jur_WordBoundary__init_(1);
                                    break a;
                                case -2147483526:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_EOISet;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                case -536870876:
                                    jur_Lexer_next(var$4);
                                    $this.$consCount = $this.$consCount + 1 | 0;
                                    if (jur_Pattern_hasFlag($this, 8)) {
                                        if (jur_Pattern_hasFlag($this, 1)) {
                                            $term = jur_UMultiLineEOLSet__init_($this.$consCount);
                                            break a;
                                        }
                                        $term = jur_MultiLineEOLSet__init_($this.$consCount);
                                        break a;
                                    }
                                    if (jur_Pattern_hasFlag($this, 1)) {
                                        $term = jur_UEOLSet__init_($this.$consCount);
                                        break a;
                                    }
                                    $term = jur_EOLSet__init_0($this.$consCount);
                                    break a;
                                case -536870866:
                                    jur_Lexer_next(var$4);
                                    if (jur_Pattern_hasFlag($this, 32)) {
                                        $term = jur_DotAllSet__init_();
                                        break a;
                                    }
                                    $term = jur_DotSet__init_(jur_AbstractLineTerminator_getInstance($this.$flags0));
                                    break a;
                                case -536870821:
                                    jur_Lexer_next(var$4);
                                    $negative = 0;
                                    $term = $this.$lexemes;
                                    if ($term.$ch == (-536870818)) {
                                        $negative = 1;
                                        jur_Lexer_next($term);
                                    }
                                    $term = jur_Pattern_processRangeSet($this, jur_Pattern_processRangeExpression($this, $negative));
                                    $term.$setNext($last);
                                    var$4 = $this.$lexemes;
                                    if (var$4.$ch != (-536870819))
                                        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), var$4.$orig, var$4.$curToc));
                                    jur_Lexer_setMode(var$4, 1);
                                    jur_Lexer_next($this.$lexemes);
                                    break a;
                                case -536870818:
                                    jur_Lexer_next(var$4);
                                    $this.$consCount = $this.$consCount + 1 | 0;
                                    if (!jur_Pattern_hasFlag($this, 8)) {
                                        $term = new jur_SOLSet;
                                        jur_AbstractSet__init_($term);
                                        break a;
                                    }
                                    $term = new jur_MultiLineSOLSet;
                                    var$4 = jur_AbstractLineTerminator_getInstance($this.$flags0);
                                    jur_AbstractSet__init_($term);
                                    $term.$lt0 = var$4;
                                    break a;
                                case 0:
                                    $cc = var$4.$curST;
                                    if ($cc !== null)
                                        $term = jur_Pattern_processRangeSet($this, $cc);
                                    else {
                                        if (jur_Lexer_isEmpty(var$4)) {
                                            $term = jur_EmptySet__init_($last);
                                            break a;
                                        }
                                        $term = jur_CharSet__init_($ch & 65535);
                                    }
                                    jur_Lexer_next($this.$lexemes);
                                    break a;
                                default:
                                    break b;
                            }
                            jur_Lexer_next(var$4);
                            $term = new jur_SOLSet;
                            jur_AbstractSet__init_($term);
                            break a;
                        }
                        $number = ($ch & 2147483647) - 48 | 0;
                        if ($this.$globalGroupIndex < $number)
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Lexer_toString(var$4), jur_Lexer_getIndex($this.$lexemes)));
                        jur_Lexer_next(var$4);
                        $this.$consCount = $this.$consCount + 1 | 0;
                        $term = !jur_Pattern_hasFlag($this, 2) ? jur_BackReferenceSet__init_($number, $this.$consCount) : jur_Pattern_hasFlag($this, 64) ? jur_UCIBackReferenceSet__init_($number, $this.$consCount) : jur_CIBackReferenceSet__init_($number, $this.$consCount);
                        $this.$backRefs.data[$number].$isBackReferenced = 1;
                        $this.$needsBackRefReplacement = 1;
                        break a;
                    }
                    if ($ch >= 0 && !jur_Lexer_isSpecial(var$4)) {
                        $term = jur_Pattern_processCharSet($this, $ch);
                        jur_Lexer_next($this.$lexemes);
                    } else if ($ch == (-536870788))
                        $term = jur_EmptySet__init_($last);
                    else {
                        if ($ch != (-536870871)) {
                            $last = new jur_PatternSyntaxException;
                            $term = !jur_Lexer_isSpecial($this.$lexemes) ? jl_Character_toString($ch & 65535) : $this.$lexemes.$curST.$toString();
                            var$4 = $this.$lexemes;
                            jur_PatternSyntaxException__init_($last, $term, var$4.$orig, var$4.$curToc);
                            $rt_throw($last);
                        }
                        if (var$3) {
                            $last = new jur_PatternSyntaxException;
                            var$4 = $this.$lexemes;
                            jur_PatternSyntaxException__init_($last, $rt_s(10), var$4.$orig, var$4.$curToc);
                            $rt_throw($last);
                        }
                        $term = jur_EmptySet__init_($last);
                    }
                }
            }
            if ($ch != (-16777176))
                break;
        }
        return $term;
    }
    function jur_Pattern_processRangeExpression($this, $alt) {
        var $res, $buffer, $intersection, $notClosed, $firstInClass, $cs, $cur, $negative, $$je;
        $res = jur_CharClass__init_(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
        jur_AbstractCharClass_setNegative($res, $alt);
        $buffer = (-1);
        $intersection = 0;
        $notClosed = 0;
        $firstInClass = 1;
        a: {
            b: {
                c: while (true) {
                    if (jur_Lexer_isEmpty($this.$lexemes))
                        break a;
                    $cs = $this.$lexemes;
                    $alt = $cs.$ch;
                    $notClosed = $alt == (-536870819) && !$firstInClass ? 0 : 1;
                    if (!$notClosed)
                        break a;
                    d: {
                        switch ($alt) {
                            case -536870874:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = jur_Lexer_next($this.$lexemes);
                                $cs = $this.$lexemes;
                                if ($cs.$ch != (-536870874)) {
                                    $buffer = 38;
                                    break d;
                                }
                                if ($cs.$lookAhead == (-536870821)) {
                                    jur_Lexer_next($cs);
                                    $intersection = 1;
                                    $buffer = (-1);
                                    break d;
                                }
                                jur_Lexer_next($cs);
                                if ($firstInClass) {
                                    $res = jur_Pattern_processRangeExpression($this, 0);
                                    break d;
                                }
                                if ($this.$lexemes.$ch == (-536870819))
                                    break d;
                                jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, 0));
                                break d;
                            case -536870867:
                                if (!$firstInClass) {
                                    $alt = $cs.$lookAhead;
                                    if ($alt != (-536870819) && $alt != (-536870821) && $buffer >= 0) {
                                        jur_Lexer_next($cs);
                                        $cs = $this.$lexemes;
                                        $cur = $cs.$ch;
                                        if (jur_Lexer_isSpecial($cs))
                                            break c;
                                        if ($cur < 0) {
                                            $negative = $this.$lexemes.$lookAhead;
                                            if ($negative != (-536870819) && $negative != (-536870821) && $buffer >= 0)
                                                break c;
                                        }
                                        e: {
                                            try {
                                                if (jur_Lexer_isLetter0($cur))
                                                    break e;
                                                $cur = $cur & 65535;
                                                break e;
                                            } catch ($$e) {
                                                $$je = $rt_wrapException($$e);
                                                if ($$je instanceof jl_Exception) {
                                                    break b;
                                                } else {
                                                    throw $$e;
                                                }
                                            }
                                        }
                                        try {
                                            jur_CharClass_add0($res, $buffer, $cur);
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_Exception) {
                                                break b;
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                        jur_Lexer_next($this.$lexemes);
                                        $buffer = (-1);
                                        break d;
                                    }
                                }
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 45;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870821:
                                if ($buffer >= 0) {
                                    jur_CharClass_add($res, $buffer);
                                    $buffer = (-1);
                                }
                                jur_Lexer_next($this.$lexemes);
                                $negative = 0;
                                $cs = $this.$lexemes;
                                if ($cs.$ch == (-536870818)) {
                                    jur_Lexer_next($cs);
                                    $negative = 1;
                                }
                                if (!$intersection)
                                    jur_CharClass_union($res, jur_Pattern_processRangeExpression($this, $negative));
                                else
                                    jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, $negative));
                                $intersection = 0;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870819:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 93;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870818:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 94;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case 0:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $cs = $this.$lexemes.$curST;
                                if ($cs === null)
                                    $buffer = 0;
                                else {
                                    jur_CharClass_add1($res, $cs);
                                    $buffer = (-1);
                                }
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            default:
                        }
                        if ($buffer >= 0)
                            jur_CharClass_add($res, $buffer);
                        $buffer = jur_Lexer_next($this.$lexemes);
                    }
                    $firstInClass = 0;
                }
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
            }
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
        }
        if (!$notClosed) {
            if ($buffer >= 0)
                jur_CharClass_add($res, $buffer);
            return $res;
        }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Pattern_pattern($this), $this.$lexemes.$curToc - 1 | 0));
    }
    function jur_Pattern_processCharSet($this, $ch) {
        var $isSupplCodePoint, var$3, var$4;
        $isSupplCodePoint = jl_Character_isSupplementaryCodePoint($ch);
        if (jur_Pattern_hasFlag($this, 2)) {
            a: {
                if (!($ch >= 97 && $ch <= 122)) {
                    if ($ch < 65)
                        break a;
                    if ($ch > 90)
                        break a;
                }
                return jur_CICharSet__init_($ch & 65535);
            }
            if (jur_Pattern_hasFlag($this, 64) && $ch > 128) {
                if ($isSupplCodePoint) {
                    var$3 = new jur_UCISupplCharSet;
                    jur_LeafSet__init_(var$3);
                    var$3.$charCount = 2;
                    var$3.$ch0 = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
                    return var$3;
                }
                if (jur_Lexer_isLowSurrogate0($ch))
                    return jur_LowSurrogateCharSet__init_($ch & 65535);
                if (!jur_Lexer_isHighSurrogate0($ch))
                    return jur_UCICharSet__init_($ch & 65535);
                return jur_HighSurrogateCharSet__init_($ch & 65535);
            }
        }
        if (!$isSupplCodePoint) {
            if (jur_Lexer_isLowSurrogate0($ch))
                return jur_LowSurrogateCharSet__init_($ch & 65535);
            if (!jur_Lexer_isHighSurrogate0($ch))
                return jur_CharSet__init_($ch & 65535);
            return jur_HighSurrogateCharSet__init_($ch & 65535);
        }
        var$3 = new jur_SupplCharSet;
        jur_LeafSet__init_(var$3);
        var$3.$charCount = 2;
        var$3.$ch1 = $ch;
        var$4 = (jl_Character_toChars($ch)).data;
        var$3.$high = var$4[0];
        var$3.$low = var$4[1];
        return var$3;
    }
    function jur_Pattern_processRangeSet($this, $charClass) {
        var $surrogates, $lowHighSurrRangeSet, var$4;
        if (!jur_AbstractCharClass_hasLowHighSurrogates($charClass)) {
            if (!$charClass.$mayContainSupplCodepoints) {
                if ($charClass.$hasUCI())
                    return jur_UCIRangeSet__init_($charClass);
                return jur_RangeSet__init_($charClass);
            }
            if (!$charClass.$hasUCI())
                return jur_SupplRangeSet__init_($charClass);
            $surrogates = new jur_UCISupplRangeSet;
            jur_SupplRangeSet__init_0($surrogates, $charClass);
            return $surrogates;
        }
        $surrogates = jur_AbstractCharClass_getSurrogates($charClass);
        $lowHighSurrRangeSet = new jur_LowHighSurrogateRangeSet;
        jur_AbstractSet__init_($lowHighSurrRangeSet);
        $lowHighSurrRangeSet.$surrChars = $surrogates;
        $lowHighSurrRangeSet.$alt = $surrogates.$alt0;
        if (!$charClass.$mayContainSupplCodepoints) {
            if ($charClass.$hasUCI())
                return jur_CompositeRangeSet__init_(jur_UCIRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
            return jur_CompositeRangeSet__init_(jur_RangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        }
        if (!$charClass.$hasUCI())
            return jur_CompositeRangeSet__init_(jur_SupplRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        $surrogates = new jur_CompositeRangeSet;
        var$4 = new jur_UCISupplRangeSet;
        jur_SupplRangeSet__init_0(var$4, jur_AbstractCharClass_getWithoutSurrogates($charClass));
        jur_CompositeRangeSet__init_0($surrogates, var$4, $lowHighSurrRangeSet);
        return $surrogates;
    }
    function jur_Pattern_getSupplement($ch) {
        if ($ch >= 97 && $ch <= 122)
            $ch = ($ch - 32 | 0) & 65535;
        else if ($ch >= 65 && $ch <= 90)
            $ch = ($ch + 32 | 0) & 65535;
        return $ch;
    }
    function jur_Pattern_hasFlag($this, $flag) {
        return ($this.$flags0 & $flag) != $flag ? 0 : 1;
    }
    function tj_CommentStmt() {
        tj_Statements.call(this);
        this.$comment = null;
    }
    function tj_CommentStmt__init_(var_0, var_1) {
        var var_2 = new tj_CommentStmt();
        tj_CommentStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_CommentStmt__init_0($this, $line, $comment) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$comment = $comment;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_COMMENT;
    }
    function tj_CommentStmt_getLine($this) {
        return $this.$line;
    }
    var tj_Expression$ExpressionReturnType = $rt_classWithoutFields(jl_Enum);
    var tj_Expression$ExpressionReturnType_INT = null;
    var tj_Expression$ExpressionReturnType_FLOAT = null;
    var tj_Expression$ExpressionReturnType_STRING = null;
    var tj_Expression$ExpressionReturnType_BOOL = null;
    var tj_Expression$ExpressionReturnType_NUMBER = null;
    var tj_Expression$ExpressionReturnType_INTLIST = null;
    var tj_Expression$ExpressionReturnType_FLOATLIST = null;
    var tj_Expression$ExpressionReturnType_STRINGLIST = null;
    var tj_Expression$ExpressionReturnType_BOOLEANLIST = null;
    var tj_Expression$ExpressionReturnType_$VALUES = null;
    function tj_Expression$ExpressionReturnType_$callClinit() {
        tj_Expression$ExpressionReturnType_$callClinit = $rt_eraseClinit(tj_Expression$ExpressionReturnType);
        tj_Expression$ExpressionReturnType__clinit_();
    }
    function tj_Expression$ExpressionReturnType__init_(var_0, var_1) {
        var var_2 = new tj_Expression$ExpressionReturnType();
        tj_Expression$ExpressionReturnType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Expression$ExpressionReturnType__init_0($this, var$1, var$2) {
        tj_Expression$ExpressionReturnType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Expression$ExpressionReturnType__clinit_() {
        var var$1;
        tj_Expression$ExpressionReturnType_INT = tj_Expression$ExpressionReturnType__init_($rt_s(24), 0);
        tj_Expression$ExpressionReturnType_FLOAT = tj_Expression$ExpressionReturnType__init_($rt_s(25), 1);
        tj_Expression$ExpressionReturnType_STRING = tj_Expression$ExpressionReturnType__init_($rt_s(23), 2);
        tj_Expression$ExpressionReturnType_BOOL = tj_Expression$ExpressionReturnType__init_($rt_s(194), 3);
        tj_Expression$ExpressionReturnType_NUMBER = tj_Expression$ExpressionReturnType__init_($rt_s(214), 4);
        tj_Expression$ExpressionReturnType_INTLIST = tj_Expression$ExpressionReturnType__init_($rt_s(33), 5);
        tj_Expression$ExpressionReturnType_FLOATLIST = tj_Expression$ExpressionReturnType__init_($rt_s(36), 6);
        tj_Expression$ExpressionReturnType_STRINGLIST = tj_Expression$ExpressionReturnType__init_($rt_s(34), 7);
        var$1 = tj_Expression$ExpressionReturnType__init_($rt_s(35), 8);
        tj_Expression$ExpressionReturnType_BOOLEANLIST = var$1;
        tj_Expression$ExpressionReturnType_$VALUES = $rt_createArrayFromData(tj_Expression$ExpressionReturnType, [tj_Expression$ExpressionReturnType_INT, tj_Expression$ExpressionReturnType_FLOAT, tj_Expression$ExpressionReturnType_STRING, tj_Expression$ExpressionReturnType_BOOL, tj_Expression$ExpressionReturnType_NUMBER, tj_Expression$ExpressionReturnType_INTLIST, tj_Expression$ExpressionReturnType_FLOATLIST, tj_Expression$ExpressionReturnType_STRINGLIST, var$1]);
    }
    var tj_Parser$1 = $rt_classWithoutFields();
    var tj_Parser$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = null;
    function tj_Parser$1_$callClinit() {
        tj_Parser$1_$callClinit = $rt_eraseClinit(tj_Parser$1);
        tj_Parser$1__clinit_();
    }
    function tj_Parser$1__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createIntArray((tj_JavaishVal$JavaishType_values()).data.length);
        var$2 = var$1.data;
        tj_Parser$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = var$1;
        var$2[tj_JavaishVal$JavaishType_STRING.$ordinal0] = 1;
        var$2[tj_JavaishVal$JavaishType_INT.$ordinal0] = 2;
        var$2[tj_JavaishVal$JavaishType_FLOAT.$ordinal0] = 3;
        var$2[tj_JavaishVal$JavaishType_BOOLEAN.$ordinal0] = 4;
        var$2[tj_JavaishVal$JavaishType_INTLIST.$ordinal0] = 5;
        var$2[tj_JavaishVal$JavaishType_FLOATLIST.$ordinal0] = 6;
        var$2[tj_JavaishVal$JavaishType_STRINGLIST.$ordinal0] = 7;
        var$2[tj_JavaishVal$JavaishType_BOOLEANLIST.$ordinal0] = 8;
    }
    function tj_Expression() {
        var a = this; jl_Object.call(a);
        a.$line0 = 0;
        a.$goal = 0;
        a.$returnType = null;
        a.$elements = null;
    }
    function tj_Expression__init_1(var_0, var_1, var_2) {
        var var_3 = new tj_Expression();
        tj_Expression__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_Expression__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new tj_Expression();
        tj_Expression__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function tj_Expression__init_2($this, $elements, $returnType, $line) {
        $this.$elements = $elements;
        $this.$returnType = $returnType;
        $this.$line0 = $line;
    }
    function tj_Expression__init_0($this, $expression, $returnType, $line, $column) {
        $this.$returnType = $returnType;
        $this.$line0 = $line;
        $this.$elements = tj_Expression_parseExpression($this, $expression, $column);
    }
    function tj_Expression_getLine($this) {
        return $this.$line0;
    }
    function tj_Expression_parseExpression($this, $expression, $column) {
        var $currentFunctionName, $currentArrayName, $iter, $i, $readingString, $lastReadString, $readingFunction, $readingFunctionArgs, $readingExpression, $readingCast, $readingArray, $readingArrayElmt, $readingArrayElmtArgs, $readingArrayArgExpression, $readingGetArrayLength, $readingNot, $castType, $castReturnType, $elements, $currentElement, $currentExpressionDepth, $currentCastDepth, $currentFunctionDepth, $currentArrayArgDepth, $functionArgs, $arrayElmts, $c, $nextChar, var$31, var$32, $arrayElmt, var$34,
        $newFunctionArgs, $index, var$37, $functionArg, $functionArgsArray, $notElements, $notArgs;
        if ($this.$goal) {
            $currentFunctionName = jl_System_out();
            $currentArrayName = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($currentArrayName, $rt_s(215)), $expression);
            ji_PrintStream_println($currentFunctionName, jl_StringBuilder_toString($currentArrayName));
        }
        $iter = 0;
        $i = 0;
        $readingString = 0;
        $lastReadString = 0;
        $readingFunction = 0;
        $readingFunctionArgs = 0;
        $readingExpression = 0;
        $readingCast = 0;
        $readingArray = 0;
        $readingArrayElmt = 0;
        $readingArrayElmtArgs = 0;
        $readingArrayArgExpression = 0;
        $readingGetArrayLength = 0;
        $readingNot = 0;
        $castType = null;
        tj_Expression$ExpressionReturnType_$callClinit();
        $castReturnType = tj_Expression$ExpressionReturnType_NUMBER;
        $elements = ju_ArrayList__init_();
        $currentElement = $rt_s(10);
        $currentFunctionName = $rt_s(10);
        $currentArrayName = $rt_s(10);
        $currentExpressionDepth = 0;
        $currentCastDepth = 0;
        $currentFunctionDepth = 0;
        $currentArrayArgDepth = 0;
        $functionArgs = ju_ArrayList__init_();
        $arrayElmts = ju_ArrayList__init_();
        while ($i < jl_String_length($expression)) {
            $c = jl_String_charAt($expression, $i);
            $nextChar = 32;
            var$31 = $i + 1 | 0;
            if (var$31 < jl_String_length($expression))
                $nextChar = jl_String_charAt($expression, var$31);
            a: {
                var$32 = $rt_compare($c, 40);
                if (!var$32 && !$readingFunction && !$readingString) {
                    if ($readingExpression && !$readingCast && !$readingArrayElmtArgs) {
                        $currentExpressionDepth = $currentExpressionDepth + 1 | 0;
                        $arrayElmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                        $currentElement = jl_StringBuilder_toString($arrayElmt);
                    } else if (tj_Expression_possibleFunctionName($this, $currentElement) && !$readingCast) {
                        $currentFunctionDepth = $currentFunctionDepth + 1 | 0;
                        $readingFunction = 1;
                        $readingFunctionArgs = 1;
                        $currentFunctionName = $currentElement;
                        $currentElement = $rt_s(10);
                    } else if ($readingCast) {
                        $currentCastDepth = $currentCastDepth + 1 | 0;
                        $arrayElmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                        $currentElement = jl_StringBuilder_toString($arrayElmt);
                    } else if (!$readingArrayElmtArgs) {
                        $readingExpression = 1;
                        $currentExpressionDepth = $currentExpressionDepth + 1 | 0;
                    } else {
                        $currentArrayArgDepth = $currentArrayArgDepth + 1 | 0;
                        $readingArrayArgExpression = 1;
                        $arrayElmt = jl_StringBuilder__init_();
                        jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                        $currentElement = jl_StringBuilder_toString($arrayElmt);
                    }
                } else {
                    var$34 = $rt_compare($c, 41);
                    if (!var$34 && !$readingFunction && !$readingString) {
                        if ($readingExpression) {
                            $currentExpressionDepth = $currentExpressionDepth + (-1) | 0;
                            if ($currentExpressionDepth) {
                                $arrayElmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($arrayElmt);
                            } else {
                                $readingExpression = 0;
                                ju_ArrayList_add($elements, tj_ExpressionElmt__init_(tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0)));
                                $currentElement = $rt_s(10);
                            }
                        } else if ($readingCast) {
                            $currentCastDepth = $currentCastDepth + (-1) | 0;
                            if ($currentCastDepth) {
                                $arrayElmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($arrayElmt);
                            } else {
                                $readingCast = 0;
                                ju_ArrayList_add($elements, tj_CastElmt__init_($castType, tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), $castReturnType, $this.$line0)));
                                $currentElement = $rt_s(10);
                            }
                        } else if (!$readingArrayElmtArgs) {
                            $arrayElmt = jl_StringBuilder__init_();
                            jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                            $currentElement = jl_StringBuilder_toString($arrayElmt);
                        } else {
                            $currentArrayArgDepth = $currentArrayArgDepth + (-1) | 0;
                            if ($currentArrayArgDepth) {
                                $arrayElmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($arrayElmt);
                            } else {
                                $readingArrayElmtArgs = 0;
                                $readingArrayArgExpression = 0;
                                $arrayElmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                $newFunctionArgs = jl_StringBuilder_toString($arrayElmt);
                                $arrayElmt = jl_System_out();
                                $index = jl_StringBuilder__init_();
                                jl_StringBuilder_append(jl_StringBuilder_append($index, $rt_s(216)), $newFunctionArgs);
                                ji_PrintStream_println($arrayElmt, jl_StringBuilder_toString($index));
                                ju_ArrayList_add($elements, tj_ListValElmt__init_($currentArrayName, tj_Expression__init_1(tj_Expression_parseExpression($this, $newFunctionArgs, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0)));
                                $currentElement = $rt_s(10);
                            }
                        }
                    } else {
                        var$37 = $rt_compare($c, 34);
                        if (!var$37 && !$readingFunction && !$readingExpression && !$readingCast && !$readingArray) {
                            if (!$readingString)
                                $readingString = 1;
                            else {
                                $readingString = 0;
                                if (!$readingArray)
                                    ju_ArrayList_add($elements, tj_StringElmt__init_($currentElement));
                                $currentElement = $rt_s(10);
                                $lastReadString = 1;
                            }
                        } else if (!var$37 && $readingFunction) {
                            if (!$readingString) {
                                $readingString = 1;
                                $arrayElmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($arrayElmt);
                            } else {
                                $readingString = 0;
                                $arrayElmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($arrayElmt);
                            }
                        } else {
                            b: {
                                if ($c != 33)
                                    break b;
                                if ($readingString)
                                    break b;
                                if ($readingArrayArgExpression)
                                    break b;
                                if ($readingCast)
                                    break b;
                                if ($readingExpression)
                                    break b;
                                if ($readingFunctionArgs)
                                    break b;
                                if ($nextChar == 61)
                                    break b;
                                if ($nextChar == 60)
                                    break b;
                                if ($nextChar == 62)
                                    break b;
                                ji_PrintStream_println(jl_System_out(), $rt_s(217));
                                $readingNot = 1;
                                break a;
                            }
                            if ($c != 32) {
                                if ($readingFunction && $readingFunctionArgs && $c == 44 && !$readingString) {
                                    ju_ArrayList_add($functionArgs, tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0));
                                    $currentElement = $rt_s(10);
                                } else if ($readingFunction && !var$34 && !$readingString) {
                                    $currentFunctionDepth = $currentFunctionDepth + (-1) | 0;
                                    if ($currentFunctionDepth) {
                                        $arrayElmt = jl_StringBuilder__init_();
                                        jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                        $currentElement = jl_StringBuilder_toString($arrayElmt);
                                    } else {
                                        $iter = $iter + 1 | 0;
                                        if (jl_String_equals($currentFunctionName, $rt_s(218)))
                                            $this.$goal = 1;
                                        $newFunctionArgs = jl_System_out();
                                        $arrayElmt = jl_StringBuilder__init_();
                                        jl_StringBuilder_append(jl_StringBuilder_append($arrayElmt, $rt_s(219)), $expression);
                                        ji_PrintStream_println($newFunctionArgs, jl_StringBuilder_toString($arrayElmt));
                                        $functionArg = jl_System_out();
                                        $arrayElmt = jl_StringBuilder__init_();
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0($arrayElmt, $iter), $rt_s(220)), $currentFunctionName), $rt_s(221)), $currentElement);
                                        ji_PrintStream_println($functionArg, jl_StringBuilder_toString($arrayElmt));
                                        ju_ArrayList_add($functionArgs, tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0));
                                        $currentElement = $rt_s(10);
                                        $readingFunctionArgs = 0;
                                        $readingFunction = 0;
                                        if (jl_String_equals($currentFunctionName, $rt_s(222))) {
                                            if (ju_ArrayList_size($functionArgs) != 1)
                                                tj_Error_ArgumentLengthMismatch($currentFunctionName, tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                            $currentFunctionName = new tj_CastElmt;
                                            tj_JavaishVal$JavaishType_$callClinit();
                                            tj_CastElmt__init_0($currentFunctionName, tj_JavaishVal$JavaishType_STRING, ju_ArrayList_get($functionArgs, 0));
                                            ju_ArrayList_add($elements, $currentFunctionName);
                                            $currentFunctionName = jl_System_out();
                                            $arrayElmt = tj_Expression_toString(ju_ArrayList_get($functionArgs, 0));
                                            $newFunctionArgs = jl_StringBuilder__init_();
                                            jl_StringBuilder_append(jl_StringBuilder_append($newFunctionArgs, $rt_s(223)), $arrayElmt);
                                            ji_PrintStream_println($currentFunctionName, jl_StringBuilder_toString($newFunctionArgs));
                                        } else if (jl_String_equals($currentFunctionName, $rt_s(224))) {
                                            if (ju_ArrayList_size($functionArgs) != 1)
                                                tj_Error_ArgumentLengthMismatch($currentFunctionName, tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                            $newFunctionArgs = new tj_CastElmt;
                                            tj_JavaishVal$JavaishType_$callClinit();
                                            tj_CastElmt__init_0($newFunctionArgs, tj_JavaishVal$JavaishType_FLOAT, ju_ArrayList_get($functionArgs, 0));
                                            ju_ArrayList_add($elements, $newFunctionArgs);
                                        } else if (jl_String_equals($currentFunctionName, $rt_s(225))) {
                                            if (ju_ArrayList_size($functionArgs) != 1)
                                                tj_Error_ArgumentLengthMismatch($currentFunctionName, tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                            $currentFunctionName = new tj_CastElmt;
                                            tj_JavaishVal$JavaishType_$callClinit();
                                            tj_CastElmt__init_0($currentFunctionName, tj_JavaishVal$JavaishType_INT, ju_ArrayList_get($functionArgs, 0));
                                            ju_ArrayList_add($elements, $currentFunctionName);
                                        } else if (!jl_String_equals($currentFunctionName, $rt_s(226))) {
                                            if (jl_String_equals($currentFunctionName, $rt_s(218))) {
                                                if (ju_ArrayList_size($functionArgs) != 1)
                                                    tj_Error_ArgumentLengthMismatch($rt_s(218), tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                                ju_ArrayList_add($elements, tj_ShowInputBoxElmt__init_(ju_ArrayList_get($functionArgs, 0)));
                                            } else {
                                                $newFunctionArgs = ju_ArrayList__init_();
                                                $arrayElmt = ju_AbstractList_iterator($functionArgs);
                                                while (ju_AbstractList$1_hasNext($arrayElmt)) {
                                                    $functionArg = ju_AbstractList$1_next($arrayElmt);
                                                    if ($functionArg.$elements.data.length)
                                                        ju_ArrayList_add($newFunctionArgs, $functionArg);
                                                }
                                                $functionArgsArray = ju_AbstractCollection_toArray($newFunctionArgs, $rt_createArray(tj_Expression, ju_ArrayList_size($newFunctionArgs)));
                                                $notElements = $rt_createArray(tj_Element, 1);
                                                $notElements.data[0] = tj_FunctionElmt__init_($currentFunctionName, $functionArgsArray);
                                                if (!$readingNot)
                                                    ju_ArrayList_add($elements, tj_FunctionElmt__init_($currentFunctionName, $functionArgsArray));
                                                else {
                                                    ji_PrintStream_println(jl_System_out(), $rt_s(227));
                                                    ju_ArrayList_add($elements, tj_NotElmt__init_(tj_Expression__init_1($notElements, tj_Expression$ExpressionReturnType_NUMBER, $this.$line0)));
                                                    $readingNot = 0;
                                                }
                                            }
                                        } else {
                                            if (ju_ArrayList_size($functionArgs) != 1)
                                                tj_Error_ArgumentLengthMismatch($currentFunctionName, tj_Expression_getLine($this), 1, ju_ArrayList_size($functionArgs));
                                            if (!$readingNot) {
                                                $currentFunctionName = new tj_CastElmt;
                                                tj_JavaishVal$JavaishType_$callClinit();
                                                tj_CastElmt__init_0($currentFunctionName, tj_JavaishVal$JavaishType_BOOLEAN, ju_ArrayList_get($functionArgs, 0));
                                                ju_ArrayList_add($elements, $currentFunctionName);
                                            } else {
                                                ji_PrintStream_println(jl_System_out(), $rt_s(227));
                                                $notArgs = $rt_createArray(tj_Element, 1);
                                                $functionArgsArray = $notArgs.data;
                                                $currentFunctionName = new tj_CastElmt;
                                                tj_JavaishVal$JavaishType_$callClinit();
                                                tj_CastElmt__init_0($currentFunctionName, tj_JavaishVal$JavaishType_BOOLEAN, ju_ArrayList_get($functionArgs, 0));
                                                $functionArgsArray[0] = $currentFunctionName;
                                                ju_ArrayList_add($elements, tj_NotElmt__init_(tj_Expression__init_1($notArgs, tj_Expression$ExpressionReturnType_NUMBER, $this.$line0)));
                                                $readingNot = 0;
                                            }
                                        }
                                        $currentFunctionName = $rt_s(10);
                                        $functionArgs = ju_ArrayList__init_();
                                    }
                                } else if (!var$32 && $readingFunction && !$readingString) {
                                    $currentFunctionDepth = $currentFunctionDepth + 1 | 0;
                                    $arrayElmt = jl_StringBuilder__init_();
                                    jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                    $currentElement = jl_StringBuilder_toString($arrayElmt);
                                } else if ($c == 91 && !$readingArray && !$readingString && !$readingFunction) {
                                    if (jl_String_equals($currentElement, $rt_s(10)))
                                        $readingArray = 1;
                                } else if ($c == 44 && !$readingString && $readingArray) {
                                    $arrayElmt = tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0);
                                    $currentElement = $rt_s(10);
                                    ju_ArrayList_add($arrayElmts, $arrayElmt);
                                } else if ($c == 93 && !$readingString && $readingArray) {
                                    ju_ArrayList_add($arrayElmts, tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0));
                                    ju_ArrayList_add($elements, tj_ListElmt__init_($arrayElmts, tj_Expression_returnTypeToJavaishType($this, tj_Expression_getReturnType($this))));
                                    $readingArray = 0;
                                    $currentElement = $rt_s(10);
                                    $arrayElmts = ju_ArrayList__init_();
                                } else {
                                    $arrayElmt = jl_StringBuilder__init_();
                                    jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                    $currentElement = jl_StringBuilder_toString($arrayElmt);
                                }
                            } else if (!$readingString && !$readingExpression && !$readingCast && !$readingFunctionArgs && !$readingArrayArgExpression) {
                                if (jl_String_equals($currentElement, $rt_s(228)) && !$readingFunction) {
                                    $readingFunction = 1;
                                    $currentElement = $rt_s(10);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(229)) && jl_String_equals(tj_Expression_nextWord($this, $expression, var$31), $rt_s(68))) {
                                    ju_ArrayList_add($elements, tj_NotEqualElmt__init_());
                                    $i = $i + 5 | 0;
                                    $currentElement = $rt_s(10);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(230)) && jl_String_equals(tj_Expression_nextWord($this, $expression, var$31), $rt_s(231))) {
                                    if (!jl_String_equals(tj_Expression_nextWord($this, $expression, $i + 6 | 0), $rt_s(232))) {
                                        ju_ArrayList_add($elements, tj_GreaterThanElmt__init_());
                                        $i = $i + 4 | 0;
                                        $currentElement = $rt_s(10);
                                        break a;
                                    }
                                    ju_ArrayList_add($elements, tj_GreaterThanEqualElmt__init_());
                                    $i = $i + 16 | 0;
                                    $currentElement = $rt_s(10);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(233)) && jl_String_equals(tj_Expression_nextWord($this, $expression, var$31), $rt_s(231))) {
                                    if (!jl_String_equals(tj_Expression_nextWord($this, $expression, $i + 6 | 0), $rt_s(232))) {
                                        ju_ArrayList_add($elements, tj_LessThanElmt__init_());
                                        $i = $i + 4 | 0;
                                        $currentElement = $rt_s(10);
                                        break a;
                                    }
                                    ju_ArrayList_add($elements, tj_LessThanEqualElmt__init_());
                                    $i = $i + 16 | 0;
                                    $currentElement = $rt_s(10);
                                    break a;
                                }
                                if (jl_String_equals(tj_Expression_nextWord($this, $expression, var$31), $rt_s(73)) && !$readingString && !$readingFunctionArgs && !$readingExpression) {
                                    $readingArrayElmt = 1;
                                    $currentArrayName = $currentElement;
                                    $currentElement = $rt_s(10);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(73)) && !$readingString && $readingArrayElmt) {
                                    $readingArrayElmtArgs = 1;
                                    $currentElement = $rt_s(10);
                                    break a;
                                }
                                if (jl_String_equals($currentElement, $rt_s(234))) {
                                    $index = jl_System_out();
                                    $functionArg = tj_Expression_nextWord($this, $expression, var$31);
                                    $arrayElmt = jl_StringBuilder__init_();
                                    jl_StringBuilder_append(jl_StringBuilder_append($arrayElmt, $rt_s(235)), $functionArg);
                                    ji_PrintStream_println($index, jl_StringBuilder_toString($arrayElmt));
                                    if (!jl_String_equals(tj_Expression_nextWord($this, $expression, var$31), $rt_s(236)))
                                        break a;
                                    $readingGetArrayLength = 1;
                                    $currentElement = $rt_s(10);
                                    $i = $i + 3 | 0;
                                    break a;
                                }
                                if ($readingGetArrayLength) {
                                    ju_ArrayList_add($elements, tj_ArrayLengthElmt__init_($currentElement));
                                    $currentElement = $rt_s(10);
                                    $readingGetArrayLength = 0;
                                    break a;
                                }
                                if ($readingArrayElmtArgs && !$readingString && !$readingArrayArgExpression) {
                                    ju_ArrayList_add($elements, tj_ListValElmt__init_($currentArrayName, tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0)));
                                    $currentElement = $rt_s(10);
                                    break a;
                                }
                                if (jl_String_length($currentElement) <= 0)
                                    break a;
                                if (jl_String_equals($currentElement, $rt_s(229)))
                                    break a;
                                if ($readingFunction)
                                    break a;
                                if (!$readingNot)
                                    ju_ArrayList_add($elements, tj_Expression_parseElement($this, $currentElement, $column + $i | 0));
                                else {
                                    ji_PrintStream_println(jl_System_out(), $rt_s(227));
                                    ju_ArrayList_add($elements, tj_NotElmt__init_(tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0)));
                                    $readingNot = 0;
                                }
                                $currentElement = $rt_s(10);
                                $lastReadString = 0;
                            } else {
                                $arrayElmt = jl_StringBuilder__init_();
                                jl_StringBuilder_append2(jl_StringBuilder_append($arrayElmt, $currentElement), $c);
                                $currentElement = jl_StringBuilder_toString($arrayElmt);
                            }
                        }
                    }
                }
            }
            $i = $i + 1 | 0;
        }
        if (!($currentArrayArgDepth <= 0 && $currentExpressionDepth <= 0 && $currentFunctionDepth <= 0 && $currentCastDepth <= 0))
            tj_Error_UnclosedParenthesis(tj_Expression_getLine($this), $column + $i | 0);
        if ($readingArray)
            tj_Error_UnclosedBracket(tj_Expression_getLine($this), $column + $i | 0);
        if (jl_String_length($currentElement) > 0 && !$lastReadString) {
            if ($readingArrayElmtArgs)
                ju_ArrayList_add($elements, tj_ListValElmt__init_($currentArrayName, tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0)));
            else if ($readingGetArrayLength)
                ju_ArrayList_add($elements, tj_ArrayLengthElmt__init_($currentElement));
            else if (!$readingNot)
                ju_ArrayList_add($elements, tj_Expression_parseElement($this, $currentElement, $column + $i | 0));
            else {
                ji_PrintStream_println(jl_System_out(), $rt_s(227));
                ju_ArrayList_add($elements, tj_NotElmt__init_(tj_Expression__init_1(tj_Expression_parseExpression($this, $currentElement, $column + $i | 0), tj_Expression$ExpressionReturnType_NUMBER, $this.$line0)));
            }
        }
        return ju_AbstractCollection_toArray($elements, $rt_createArray(tj_Element, ju_ArrayList_size($elements)));
    }
    function tj_Expression_possibleFunctionName($this, $name) {
        var $functionName;
        $functionName = (jl_String_split($name, $rt_s(75))).data[0];
        if (!jl_String_contains($functionName, $rt_s(43)) && jl_String_length($functionName))
            return 1;
        return 0;
    }
    function tj_Expression_parseElement($this, $element, $column) {
        var var$3, var$4, var$5, var$6, var$7, var$8, var$9, $$je;
        a: {
            try {
                jl_Integer_parseInt0($element);
                var$3 = 1;
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            var$3 = 0;
        }
        if (var$3) {
            var$4 = new tj_IntElmt;
            $column = jl_Integer_parseInt0($element);
            tj_Element$ElementType_$callClinit();
            var$4.$type1 = tj_Element$ElementType_INTEGER;
            var$4.$value20 = $column;
            return var$4;
        }
        b: {
            try {
                jl_Float_parseFloat($element);
                var$3 = 1;
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            var$3 = 0;
        }
        if (var$3) {
            var$4 = new tj_FloatElmt;
            var$5 = jl_Float_parseFloat($element);
            tj_Element$ElementType_$callClinit();
            var$4.$type1 = tj_Element$ElementType_FLOAT;
            var$4.$value26 = var$5;
            return var$4;
        }
        if (!jl_String_equals($element, $rt_s(21)) && !jl_String_equals($element, $rt_s(20))) {
            if (!jl_String_equals($element, $rt_s(68)) && !jl_String_equals($element, $rt_s(237))) {
                if (jl_String_equals($element, $rt_s(238)))
                    return tj_NotEqualElmt__init_();
                if (jl_String_equals($element, $rt_s(239)))
                    return tj_GreaterThanElmt__init_();
                if (jl_String_equals($element, $rt_s(240)))
                    return tj_LessThanElmt__init_();
                if (jl_String_equals($element, $rt_s(241)))
                    return tj_GreaterThanEqualElmt__init_();
                if (jl_String_equals($element, $rt_s(242)))
                    return tj_LessThanEqualElmt__init_();
                if (!jl_String_equals($element, $rt_s(243)) && !jl_String_equals($element, $rt_s(244))) {
                    if (!jl_String_equals($element, $rt_s(232)) && !jl_String_equals($element, $rt_s(245))) {
                        if (!jl_String_equals($element, $rt_s(50)) && !jl_String_equals($element, $rt_s(246))) {
                            if (!jl_String_equals($element, $rt_s(44)) && !jl_String_equals($element, $rt_s(247))) {
                                if (!jl_String_equals($element, $rt_s(248)) && !jl_String_equals($element, $rt_s(249))) {
                                    if (!jl_String_equals($element, $rt_s(45)) && !jl_String_equals($element, $rt_s(250))) {
                                        var$3 = 0;
                                        c: {
                                            while (var$3 < jl_String_length($element)) {
                                                if (!jl_Character_isLetter(jl_String_charAt($element, var$3))) {
                                                    var$3 = 0;
                                                    break c;
                                                }
                                                var$3 = var$3 + 1 | 0;
                                            }
                                            var$3 = 1;
                                        }
                                        if (var$3) {
                                            var$4 = new tj_VariableElmt;
                                            tj_Element$ElementType_$callClinit();
                                            var$4.$type1 = tj_Element$ElementType_VARIABLE;
                                            var$4.$name15 = $element;
                                            return var$4;
                                        }
                                        var$6 = $this.$line0;
                                        var$4 = new jl_StringBuilder;
                                        jl_AbstractStringBuilder__init_(var$4);
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(251)), var$6), $rt_s(252)), $column), $rt_s(17)), $element);
                                        var$4 = jl_AbstractStringBuilder_toString(var$4);
                                        var$7 = $rt_createArray(jl_String, 2);
                                        var$8 = var$7.data;
                                        var$8[0] = var$4;
                                        var$4 = new jl_StringBuilder;
                                        jl_AbstractStringBuilder__init_(var$4);
                                        jl_StringBuilder_append0(var$4, var$6);
                                        var$8[1] = jl_AbstractStringBuilder_toString(var$4);
                                        $rt_globals.addConsoleError(otji_JS_wrap(var$7));
                                        var$4 = new jl_RuntimeException;
                                        var$9 = new jl_StringBuilder;
                                        jl_AbstractStringBuilder__init_(var$9);
                                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(251)), var$6), $rt_s(252)), $column), $rt_s(17)), $element);
                                        jl_Throwable__init_0(var$4, jl_AbstractStringBuilder_toString(var$9));
                                        $rt_throw(var$4);
                                    }
                                    $element = new tj_DivideElmt;
                                    tj_Element$ElementType_$callClinit();
                                    $element.$type1 = tj_Element$ElementType_DIVIDE;
                                    return $element;
                                }
                                $element = new tj_MultiplyElmt;
                                tj_Element$ElementType_$callClinit();
                                $element.$type1 = tj_Element$ElementType_MULTIPLY;
                                return $element;
                            }
                            $element = new tj_MinusElmt;
                            tj_Element$ElementType_$callClinit();
                            $element.$type1 = tj_Element$ElementType_MINUS;
                            return $element;
                        }
                        $element = new tj_PlusElmt;
                        tj_Element$ElementType_$callClinit();
                        $element.$type1 = tj_Element$ElementType_PLUS;
                        return $element;
                    }
                    $element = new tj_OrElmt;
                    tj_Element$ElementType_$callClinit();
                    $element.$type1 = tj_Element$ElementType_OR;
                    return $element;
                }
                $element = new tj_AndElmt;
                tj_Element$ElementType_$callClinit();
                $element.$type1 = tj_Element$ElementType_AND;
                return $element;
            }
            $element = new tj_EqualElmt;
            tj_Element$ElementType_$callClinit();
            $element.$type1 = tj_Element$ElementType_EQUAL;
            return $element;
        }
        var$4 = new tj_BoolElmt;
        $column = jl_Boolean_parseBoolean($element);
        tj_Element$ElementType_$callClinit();
        var$4.$type1 = tj_Element$ElementType_BOOL;
        var$4.$value27 = $column;
        return var$4;
    }
    function tj_Expression_getReturnType($this) {
        return $this.$returnType;
    }
    function tj_Expression_getElements($this) {
        return $this.$elements;
    }
    function tj_Expression_nextWord($this, $str, $i) {
        var $word, $c, var$5;
        $word = $rt_s(10);
        while ($i < jl_String_length($str)) {
            $c = jl_String_charAt($str, $i);
            if ($c == 32)
                return $word;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$5, $word), $c);
            $word = jl_AbstractStringBuilder_toString(var$5);
            $i = $i + 1 | 0;
        }
        return $word;
    }
    function tj_Expression_toString($this) {
        var $str, var$2, var$3, var$4, $elmt, var$6;
        $str = $rt_s(10);
        var$2 = $this.$elements.data;
        var$3 = var$2.length;
        var$4 = 0;
        while (var$4 < var$3) {
            $elmt = var$2[var$4].$toString();
            var$6 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$6);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $str), $elmt), 32);
            $str = jl_AbstractStringBuilder_toString(var$6);
            var$4 = var$4 + 1 | 0;
        }
        if (jl_String_length($str) > 0)
            $str = jl_String_substring($str, 0, jl_String_length($str) - 1 | 0);
        return $str;
    }
    function tj_Expression_returnTypeToJavaishType($this, $returnType) {
        tj_Expression$1_$callClinit();
        switch (tj_Expression$1_$SwitchMap$trackerjo$javaish$Expression$ExpressionReturnType.data[$returnType.$ordinal0]) {
            case 1:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_INT;
            case 2:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_FLOAT;
            case 3:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_STRING;
            case 4:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_BOOLEAN;
            case 5:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_INTLIST;
            case 6:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_FLOATLIST;
            case 7:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_STRINGLIST;
            case 8:
                tj_JavaishVal$JavaishType_$callClinit();
                return tj_JavaishVal$JavaishType_BOOLEANLIST;
            default:
        }
        return null;
    }
    function tj_IfStmt() {
        tj_Statements.call(this);
        this.$condition0 = null;
    }
    function tj_IfStmt__init_(var_0, var_1) {
        var var_2 = new tj_IfStmt();
        tj_IfStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_IfStmt__init_0($this, $line, $condition) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$condition0 = $condition;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_IF;
        $this.$isBlock = 1;
    }
    function tj_IfStmt_getLine($this) {
        return $this.$line;
    }
    function tj_WhileStmt() {
        tj_Statements.call(this);
        this.$condition1 = null;
    }
    function tj_WhileStmt__init_(var_0, var_1) {
        var var_2 = new tj_WhileStmt();
        tj_WhileStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_WhileStmt__init_0($this, $line, $condition) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$condition1 = $condition;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_WHILE;
        $this.$isBlock = 1;
    }
    function tj_WhileStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ReturnStmt() {
        var a = this; tj_Statements.call(a);
        a.$value18 = null;
        a.$hasReturn0 = 0;
    }
    function tj_ReturnStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_ReturnStmt();
        tj_ReturnStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_ReturnStmt__init_0($this, $line, $value, $hasReturn) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$value18 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_RETURN;
        $this.$hasReturn0 = $hasReturn;
    }
    function tj_ReturnStmt_getLine($this) {
        return $this.$line;
    }
    function tj_MutationStmt() {
        var a = this; tj_Statements.call(a);
        a.$varName = null;
        a.$value19 = null;
        a.$mutationType = null;
    }
    function tj_MutationStmt__init_0(var_0, var_1, var_2, var_3) {
        var var_4 = new tj_MutationStmt();
        tj_MutationStmt__init_(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function tj_MutationStmt__init_($this, $line, $varName, $value, $mutationType) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$varName = $varName;
        $this.$value19 = $value;
        $this.$mutationType = $mutationType;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_MUTATION;
    }
    function tj_MutationStmt_getLine($this) {
        return $this.$line;
    }
    var tj_Statements$MutationType = $rt_classWithoutFields(jl_Enum);
    var tj_Statements$MutationType_ADD = null;
    var tj_Statements$MutationType_SUBTRACT = null;
    var tj_Statements$MutationType_MULTIPLY = null;
    var tj_Statements$MutationType_DIVIDE = null;
    var tj_Statements$MutationType_$VALUES = null;
    function tj_Statements$MutationType_$callClinit() {
        tj_Statements$MutationType_$callClinit = $rt_eraseClinit(tj_Statements$MutationType);
        tj_Statements$MutationType__clinit_();
    }
    function tj_Statements$MutationType__init_(var_0, var_1) {
        var var_2 = new tj_Statements$MutationType();
        tj_Statements$MutationType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Statements$MutationType_values() {
        tj_Statements$MutationType_$callClinit();
        return tj_Statements$MutationType_$VALUES.$clone();
    }
    function tj_Statements$MutationType__init_0($this, var$1, var$2) {
        tj_Statements$MutationType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Statements$MutationType__clinit_() {
        var var$1;
        tj_Statements$MutationType_ADD = tj_Statements$MutationType__init_($rt_s(208), 0);
        tj_Statements$MutationType_SUBTRACT = tj_Statements$MutationType__init_($rt_s(207), 1);
        tj_Statements$MutationType_MULTIPLY = tj_Statements$MutationType__init_($rt_s(204), 2);
        var$1 = tj_Statements$MutationType__init_($rt_s(206), 3);
        tj_Statements$MutationType_DIVIDE = var$1;
        tj_Statements$MutationType_$VALUES = $rt_createArrayFromData(tj_Statements$MutationType, [tj_Statements$MutationType_ADD, tj_Statements$MutationType_SUBTRACT, tj_Statements$MutationType_MULTIPLY, var$1]);
    }
    function tj_RemoveAllFromStmt() {
        var a = this; tj_Statements.call(a);
        a.$listName1 = null;
        a.$value22 = null;
    }
    function tj_RemoveAllFromStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_RemoveAllFromStmt();
        tj_RemoveAllFromStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_RemoveAllFromStmt__init_0($this, $line, $name, $value) {
        tj_Statements__init_($this);
        $this.$listName1 = $name;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_REMOVEALLFROM;
        $this.$value22 = $value;
        $this.$line = $line;
    }
    function tj_RemoveFromStmt() {
        var a = this; tj_Statements.call(a);
        a.$value21 = null;
        a.$listName0 = null;
    }
    function tj_RemoveFromStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_RemoveFromStmt();
        tj_RemoveFromStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_RemoveFromStmt__init_0($this, $line, $value, $name) {
        tj_Statements__init_($this);
        $this.$value21 = $value;
        $this.$listName0 = $name;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_REMOVEFROM;
        $this.$line = $line;
    }
    function tj_RemoveAtStmt() {
        var a = this; tj_Statements.call(a);
        a.$location = null;
        a.$listName = null;
    }
    function tj_RemoveAtStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_RemoveAtStmt();
        tj_RemoveAtStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_RemoveAtStmt__init_0($this, $line, $location, $name) {
        tj_Statements__init_($this);
        $this.$location = $location;
        $this.$listName = $name;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_REMOVEAT;
        $this.$line = $line;
    }
    function tj_AssignmentStmt() {
        var a = this; tj_Statements.call(a);
        a.$name11 = null;
        a.$value13 = null;
    }
    function tj_AssignmentStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_AssignmentStmt();
        tj_AssignmentStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_AssignmentStmt__init_0($this, $line, $name, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$name11 = $name;
        $this.$value13 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_ASSIGNMENT;
    }
    function tj_AssignmentStmt_getLine($this) {
        return $this.$line;
    }
    var tj_Error = $rt_classWithoutFields();
    function tj_Error_UnexpectedStmt($stmt, $lineNumber) {
        var var$3, var$4, $messageArray, var$6, var$7;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        var$4 = jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(253)), $lineNumber);
        jl_AbstractStringBuilder_append(var$4, 58);
        jl_StringBuilder_append(var$4, $stmt);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$6 = $messageArray.data;
        var$6[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$6[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        var$7 = jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(253)), $lineNumber);
        jl_AbstractStringBuilder_append(var$7, 58);
        jl_StringBuilder_append(var$7, $stmt);
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$3);
    }
    function tj_Error_TypeMismatch($expected, $got, $lineNumber) {
        var var$4, var$5, $messageArray, var$7;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(254)), $lineNumber), $rt_s(255)), $expected), $rt_s(256)), $got);
        var$5 = jl_AbstractStringBuilder_toString(var$4);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$4 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(254)), $lineNumber), $rt_s(255)), $expected), $rt_s(256)), $got);
        jl_Throwable__init_0(var$4, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$4);
    }
    function tj_Error_VariableAlreadyExists($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(257)), $name), $rt_s(28));
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(257)), $name), $rt_s(28));
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_UnableToParse($value, $lineNumber, $goal) {
        var var$4, var$5, $messageArray, var$7;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(258)), $value), $rt_s(259)), $goal), $rt_s(260)), $lineNumber);
        var$5 = jl_AbstractStringBuilder_toString(var$4);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$4 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$5, $rt_s(258)), $value), $rt_s(259)), $goal), $rt_s(260)), $lineNumber);
        jl_Throwable__init_0(var$4, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$4);
    }
    function tj_Error_VariableNotDeclared($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(257)), $name), $rt_s(261)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(257)), $name), $rt_s(261)), $lineNumber);
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_FunctionNotDeclared($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(27)), $name), $rt_s(261)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(27)), $name), $rt_s(261)), $lineNumber);
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_CantPerformMutation($type, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(262)), $type), $rt_s(260)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(262)), $type), $rt_s(260)), $lineNumber);
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_ArgumentLengthMismatch($name, $lineNumber, $expected, $got) {
        var var$5, $messageArray, var$7, var$8;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(263)), $lineNumber), $rt_s(17)), $name), $rt_s(255)), $expected), $rt_s(256)), $got);
        var$5 = jl_AbstractStringBuilder_toString(var$5);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$8 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(263)), $lineNumber), $rt_s(17)), $name), $rt_s(255)), $expected), $rt_s(256)), $got);
        jl_Throwable__init_0(var$8, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$8);
    }
    function tj_Error_ArgumentTypeMismatch($name, $lineNumber, $expected, $got) {
        var var$5, $messageArray, var$7, var$8;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(264)), $lineNumber), $rt_s(17)), $name), $rt_s(255)), $expected), $rt_s(256)), $got);
        var$5 = jl_AbstractStringBuilder_toString(var$5);
        $messageArray = $rt_createArray(jl_String, 2);
        var$7 = $messageArray.data;
        var$7[0] = var$5;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(var$5, $lineNumber);
        var$7[1] = jl_AbstractStringBuilder_toString(var$5);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$8 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(264)), $lineNumber), $rt_s(17)), $name), $rt_s(255)), $expected), $rt_s(256)), $got);
        jl_Throwable__init_0(var$8, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$8);
    }
    function tj_Error_FunctionNotGlobal($name, $lineNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(27)), $name), $rt_s(265)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(27)), $name), $rt_s(265)), $lineNumber);
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_CantPerformOperation($operation, $type, $lineNumber) {
        var var$4, $messageArray, var$6, var$7;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(266)), $operation), $rt_s(267)), $type), $rt_s(260)), $lineNumber);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        $messageArray = $rt_createArray(jl_String, 2);
        var$6 = $messageArray.data;
        var$6[0] = var$4;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(var$4, $lineNumber);
        var$6[1] = jl_AbstractStringBuilder_toString(var$4);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$7 = new jl_RuntimeException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(266)), $operation), $rt_s(267)), $type), $rt_s(260)), $lineNumber);
        jl_Throwable__init_0(var$7, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$7);
    }
    function tj_Error_IndexOutOfBounds($index, $lineNumber, $arrayLength) {
        var var$4, $messageArray, var$6, var$7, var$8;
        $arrayLength = $arrayLength - 1 | 0;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(268)), $lineNumber), $rt_s(269)), $index), $rt_s(270)), $arrayLength);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        $messageArray = $rt_createArray(jl_String, 2);
        var$6 = $messageArray.data;
        var$6[0] = var$4;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append0(var$4, $lineNumber);
        var$6[1] = jl_AbstractStringBuilder_toString(var$4);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$7 = new jl_RuntimeException;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(268)), $lineNumber), $rt_s(269)), $index), $rt_s(270)), $arrayLength);
        jl_Throwable__init_0(var$7, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$7);
    }
    function tj_Error_UnclosedParenthesis($lineNumber, $columnNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(271)), $lineNumber), $rt_s(252)), $columnNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$6, $rt_s(271)), $lineNumber), $rt_s(252)), $columnNumber);
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_MissingPeriod($lineNumber) {
        var var$2, $messageArray, var$4, var$5;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(272)), $lineNumber);
        var$2 = jl_AbstractStringBuilder_toString(var$2);
        $messageArray = $rt_createArray(jl_String, 2);
        var$4 = $messageArray.data;
        var$4[0] = var$2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(var$2, $lineNumber);
        var$4[1] = jl_AbstractStringBuilder_toString(var$2);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$2 = new jl_RuntimeException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(272)), $lineNumber);
        jl_Throwable__init_0(var$2, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$2);
    }
    function tj_Error_UnclosedBracket($lineNumber, $columnNumber) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(273)), $lineNumber), $rt_s(252)), $columnNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$6, $rt_s(273)), $lineNumber), $rt_s(252)), $columnNumber);
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_Error_ListEmpty($lineNumber, $listName) {
        var var$3, $messageArray, var$5, var$6;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(274)), $listName), $rt_s(275)), $lineNumber);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
        $messageArray = $rt_createArray(jl_String, 2);
        var$5 = $messageArray.data;
        var$5[0] = var$3;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(var$3, $lineNumber);
        var$5[1] = jl_AbstractStringBuilder_toString(var$3);
        $rt_globals.addConsoleError(otji_JS_wrap($messageArray));
        var$3 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(274)), $listName), $rt_s(275)), $lineNumber);
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$6));
        $rt_throw(var$3);
    }
    function tj_PrintStmt() {
        tj_Statements.call(this);
        this.$value14 = null;
    }
    function tj_PrintStmt__init_(var_0, var_1) {
        var var_2 = new tj_PrintStmt();
        tj_PrintStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_PrintStmt__init_0($this, $line, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$value14 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_PRINT;
    }
    function tj_PrintStmt_getLine($this) {
        return $this.$line;
    }
    function tj_CallStmt() {
        var a = this; tj_Statements.call(a);
        a.$name12 = null;
        a.$params = null;
    }
    function tj_CallStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_CallStmt();
        tj_CallStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_CallStmt__init_0($this, $line, $name, $params) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$name12 = $name;
        $this.$params = $params;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_CALL;
    }
    function tj_CallStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ShowMsgBoxStmt() {
        tj_Statements.call(this);
        this.$value16 = null;
    }
    function tj_ShowMsgBoxStmt__init_(var_0, var_1) {
        var var_2 = new tj_ShowMsgBoxStmt();
        tj_ShowMsgBoxStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ShowMsgBoxStmt__init_0($this, $line, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$value16 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_SHOWMSGBOX;
    }
    function tj_ShowMsgBoxStmt_getLine($this) {
        return $this.$line;
    }
    function tj_Argument() {
        var a = this; jl_Object.call(a);
        a.$type0 = null;
        a.$name10 = null;
    }
    function tj_Argument__init_(var_0, var_1) {
        var var_2 = new tj_Argument();
        tj_Argument__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Argument__init_0($this, $type, $name) {
        $this.$type0 = $type;
        $this.$name10 = $name;
    }
    function tj_FunctionStmt() {
        var a = this; tj_Statements.call(a);
        a.$name14 = null;
        a.$args0 = null;
    }
    function tj_FunctionStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_FunctionStmt();
        tj_FunctionStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_FunctionStmt__init_0($this, $line, $name, $args) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$name14 = $name;
        $this.$args0 = $args;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_FUNCTION;
        $this.$isBlock = 1;
    }
    function tj_FunctionStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ForWhenStmt() {
        var a = this; tj_Statements.call(a);
        a.$incVar = null;
        a.$increment = null;
        a.$condition2 = null;
    }
    function tj_ForWhenStmt__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new tj_ForWhenStmt();
        tj_ForWhenStmt__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function tj_ForWhenStmt__init_0($this, $line, $condition, $increment, $lineVar) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$condition2 = $condition;
        $this.$increment = $increment;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_FORWHEN;
        $this.$incVar = $lineVar;
        $this.$isBlock = 1;
    }
    function tj_ForWhenStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ForEachStmt() {
        var a = this; tj_Statements.call(a);
        a.$tempVar = null;
        a.$listVar = null;
    }
    function tj_ForEachStmt__init_(var_0, var_1, var_2) {
        var var_3 = new tj_ForEachStmt();
        tj_ForEachStmt__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function tj_ForEachStmt__init_0($this, $line, $tempVar, $listVar) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$tempVar = $tempVar;
        $this.$listVar = $listVar;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_FOREACH;
        $this.$isBlock = 1;
    }
    function tj_ForEachStmt_getLine($this) {
        return $this.$line;
    }
    var tj_ElseStmt = $rt_classWithoutFields(tj_Statements);
    function tj_ElseStmt__init_(var_0) {
        var var_1 = new tj_ElseStmt();
        tj_ElseStmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_ElseStmt__init_0($this, $line) {
        tj_Statements__init_($this);
        $this.$line = $line;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_ELSE;
    }
    function tj_ElseStmt_getLine($this) {
        return $this.$line;
    }
    function tj_ElseIfStmt() {
        tj_Statements.call(this);
        this.$condition = null;
    }
    function tj_ElseIfStmt__init_(var_0, var_1) {
        var var_2 = new tj_ElseIfStmt();
        tj_ElseIfStmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ElseIfStmt__init_0($this, $line, $condition) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$condition = $condition;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_ELSEIF;
    }
    function tj_ElseIfStmt_getLine($this) {
        return $this.$line;
    }
    function tj_DeclarationStmt() {
        var a = this; tj_Statements.call(a);
        a.$name13 = null;
        a.$varType = null;
        a.$value15 = null;
    }
    function tj_DeclarationStmt__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new tj_DeclarationStmt();
        tj_DeclarationStmt__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function tj_DeclarationStmt__init_0($this, $line, $name, $varType, $value) {
        tj_Statements__init_($this);
        $this.$line = $line;
        $this.$name13 = $name;
        $this.$varType = $varType;
        $this.$value15 = $value;
        tj_Statements$StmtType_$callClinit();
        $this.$type = tj_Statements$StmtType_DECLARATION;
    }
    function tj_DeclarationStmt_getLine($this) {
        return $this.$line;
    }
    var ju_Map$Entry = $rt_classWithoutFields(0);
    function ju_MapEntry() {
        var a = this; jl_Object.call(a);
        a.$key = null;
        a.$value25 = null;
    }
    function ju_HashMap$HashEntry() {
        var a = this; ju_MapEntry.call(a);
        a.$origKeyHash = 0;
        a.$next0 = null;
    }
    var tj_JavaishVal$JavaishType = $rt_classWithoutFields(jl_Enum);
    var tj_JavaishVal$JavaishType_INT = null;
    var tj_JavaishVal$JavaishType_FLOAT = null;
    var tj_JavaishVal$JavaishType_STRING = null;
    var tj_JavaishVal$JavaishType_BOOLEAN = null;
    var tj_JavaishVal$JavaishType_INTLIST = null;
    var tj_JavaishVal$JavaishType_FLOATLIST = null;
    var tj_JavaishVal$JavaishType_STRINGLIST = null;
    var tj_JavaishVal$JavaishType_BOOLEANLIST = null;
    var tj_JavaishVal$JavaishType_LIST = null;
    var tj_JavaishVal$JavaishType_$VALUES = null;
    function tj_JavaishVal$JavaishType_$callClinit() {
        tj_JavaishVal$JavaishType_$callClinit = $rt_eraseClinit(tj_JavaishVal$JavaishType);
        tj_JavaishVal$JavaishType__clinit_();
    }
    function tj_JavaishVal$JavaishType__init_(var_0, var_1) {
        var var_2 = new tj_JavaishVal$JavaishType();
        tj_JavaishVal$JavaishType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_JavaishVal$JavaishType_values() {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_$VALUES.$clone();
    }
    function tj_JavaishVal$JavaishType__init_0($this, var$1, var$2) {
        tj_JavaishVal$JavaishType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_JavaishVal$JavaishType__clinit_() {
        var var$1;
        tj_JavaishVal$JavaishType_INT = tj_JavaishVal$JavaishType__init_($rt_s(24), 0);
        tj_JavaishVal$JavaishType_FLOAT = tj_JavaishVal$JavaishType__init_($rt_s(25), 1);
        tj_JavaishVal$JavaishType_STRING = tj_JavaishVal$JavaishType__init_($rt_s(23), 2);
        tj_JavaishVal$JavaishType_BOOLEAN = tj_JavaishVal$JavaishType__init_($rt_s(26), 3);
        tj_JavaishVal$JavaishType_INTLIST = tj_JavaishVal$JavaishType__init_($rt_s(33), 4);
        tj_JavaishVal$JavaishType_FLOATLIST = tj_JavaishVal$JavaishType__init_($rt_s(36), 5);
        tj_JavaishVal$JavaishType_STRINGLIST = tj_JavaishVal$JavaishType__init_($rt_s(34), 6);
        tj_JavaishVal$JavaishType_BOOLEANLIST = tj_JavaishVal$JavaishType__init_($rt_s(35), 7);
        var$1 = tj_JavaishVal$JavaishType__init_($rt_s(196), 8);
        tj_JavaishVal$JavaishType_LIST = var$1;
        tj_JavaishVal$JavaishType_$VALUES = $rt_createArrayFromData(tj_JavaishVal$JavaishType, [tj_JavaishVal$JavaishType_INT, tj_JavaishVal$JavaishType_FLOAT, tj_JavaishVal$JavaishType_STRING, tj_JavaishVal$JavaishType_BOOLEAN, tj_JavaishVal$JavaishType_INTLIST, tj_JavaishVal$JavaishType_FLOATLIST, tj_JavaishVal$JavaishType_STRINGLIST, tj_JavaishVal$JavaishType_BOOLEANLIST, var$1]);
    }
    var jl_AutoCloseable = $rt_classWithoutFields(0);
    var ji_Closeable = $rt_classWithoutFields(0);
    var ji_Flushable = $rt_classWithoutFields(0);
    var ji_OutputStream = $rt_classWithoutFields();
    function ji_FilterOutputStream() {
        ji_OutputStream.call(this);
        this.$out = null;
    }
    function ji_PrintStream() {
        var a = this; ji_FilterOutputStream.call(a);
        a.$autoFlush = 0;
        a.$errorState = 0;
        a.$sb = null;
        a.$buffer0 = null;
        a.$charset = null;
    }
    function ji_PrintStream_write($this, $b, $off, $len) {
        var var$4, $$je;
        var$4 = $this.$out;
        if (var$4 === null)
            $this.$errorState = 1;
        if (!($this.$errorState ? 0 : 1))
            return;
        a: {
            try {
                otcic_StdoutOutputStream_write(var$4, $b, $off, $len);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                } else {
                    throw $$e;
                }
            }
            $this.$errorState = 1;
        }
    }
    function ji_PrintStream_println($this, $s) {
        jl_AbstractStringBuilder_append(jl_StringBuilder_append1($this.$sb, $s), 10);
        ji_PrintStream_printSB($this);
    }
    function ji_PrintStream_printSB($this) {
        var var$1, var$2, $buffer, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, $$je;
        var$1 = $this.$sb;
        var$2 = var$1.$length0;
        $buffer = $this.$buffer0;
        if (var$2 > $buffer.data.length)
            $buffer = $rt_createCharArray(var$2);
        var$4 = 0;
        var$5 = 0;
        if (var$4 > var$2) {
            var$1 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0(var$1, $rt_s(276));
            $rt_throw(var$1);
        }
        while (var$4 < var$2) {
            var$6 = $buffer.data;
            var$7 = var$5 + 1 | 0;
            var$8 = var$1.$buffer.data;
            var$9 = var$4 + 1 | 0;
            var$6[var$5] = var$8[var$4];
            var$5 = var$7;
            var$4 = var$9;
        }
        var$6 = $buffer.data;
        var$4 = var$2 - 0 | 0;
        var$10 = new jn_CharBufferOverArray;
        var$2 = var$6.length;
        var$4 = 0 + var$4 | 0;
        jn_Buffer__init_(var$10, var$2);
        var$10.$position = 0;
        var$10.$limit = var$4;
        var$10.$start3 = 0;
        var$10.$readOnly = 0;
        var$10.$array0 = $buffer;
        $buffer = $rt_createByteArray(jl_Math_max(16, jl_Math_min(var$2, 1024)));
        var$4 = $buffer.data.length;
        var$11 = new jn_ByteBufferImpl;
        var$7 = 0 + var$4 | 0;
        jn_Buffer__init_(var$11, var$4);
        jn_ByteOrder_$callClinit();
        var$11.$order = jn_ByteOrder_BIG_ENDIAN;
        var$11.$start4 = 0;
        var$11.$array1 = $buffer;
        var$11.$position = 0;
        var$11.$limit = var$7;
        var$11.$direct = 0;
        var$11.$readOnly0 = 0;
        var$12 = $this.$charset;
        var$13 = new jnci_UTF8Encoder;
        var$8 = $rt_createByteArray(1);
        var$6 = var$8.data;
        var$6[0] = 63;
        jnc_CodingErrorAction_$callClinit();
        var$1 = jnc_CodingErrorAction_REPORT;
        var$13.$malformedAction = var$1;
        var$13.$unmappableAction = var$1;
        var$5 = var$6.length;
        if (var$5 && var$5 >= var$13.$maxBytesPerChar) {
            var$13.$charset0 = var$12;
            var$13.$replacement = var$8.$clone();
            var$13.$averageBytesPerChar = 2.0;
            var$13.$maxBytesPerChar = 4.0;
            var$13.$inArray = $rt_createCharArray(512);
            var$13.$outArray = $rt_createByteArray(512);
            var$1 = jnc_CodingErrorAction_REPLACE;
            if (var$1 === null) {
                var$11 = new jl_IllegalArgumentException;
                jl_Throwable__init_0(var$11, $rt_s(277));
                $rt_throw(var$11);
            }
            var$13.$malformedAction = var$1;
            var$13.$unmappableAction = var$1;
            a: while (true) {
                if (var$13.$status == 3) {
                    var$1 = new jl_IllegalStateException;
                    jl_Exception__init_(var$1);
                    $rt_throw(var$1);
                }
                var$13.$status = 2;
                b: {
                    while (true) {
                        try {
                            var$14 = jnci_BufferedEncoder_encodeLoop(var$13, var$10, var$11);
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_RuntimeException) {
                                var$1 = $$je;
                                break a;
                            } else {
                                throw $$e;
                            }
                        }
                        if (var$14.$kind ? 0 : 1) {
                            var$4 = jn_Buffer_remaining(var$10);
                            if (var$4 <= 0)
                                break b;
                            var$14 = jnc_CoderResult_malformedForLength(var$4);
                        } else if (jnc_CoderResult_isOverflow(var$14))
                            break;
                        var$1 = !jnc_CoderResult_isUnmappable(var$14) ? var$13.$malformedAction : var$13.$unmappableAction;
                        c: {
                            if (var$1 !== jnc_CodingErrorAction_REPLACE) {
                                if (var$1 === jnc_CodingErrorAction_IGNORE)
                                    break c;
                                else
                                    break b;
                            }
                            var$4 = jn_Buffer_remaining(var$11);
                            var$6 = var$13.$replacement;
                            var$9 = var$6.data.length;
                            if (var$4 < var$9) {
                                var$14 = jnc_CoderResult_OVERFLOW;
                                break b;
                            }
                            jn_ByteBuffer_put(var$11, var$6, 0, var$9);
                        }
                        var$9 = var$10.$position;
                        if (!(!jnc_CoderResult_isMalformed(var$14) && !jnc_CoderResult_isUnmappable(var$14) ? 0 : 1)) {
                            var$1 = new jl_UnsupportedOperationException;
                            jl_RuntimeException__init_1(var$1);
                            $rt_throw(var$1);
                        }
                        jn_CharBuffer_position(var$10, var$9 + var$14.$length1 | 0);
                    }
                }
                var$4 = jnc_CoderResult_isOverflow(var$14);
                ji_PrintStream_write($this, $buffer, 0, jn_Buffer_position(var$11));
                jn_ByteBuffer_clear(var$11);
                if (!var$4) {
                    while (true) {
                        var$4 = var$13.$status;
                        if (var$4 != 2 && var$4 != 4) {
                            var$1 = new jl_IllegalStateException;
                            jl_Exception__init_(var$1);
                            $rt_throw(var$1);
                        }
                        var$1 = jnc_CoderResult_UNDERFLOW;
                        if (var$1 === var$1)
                            var$13.$status = 3;
                        var$4 = jnc_CoderResult_isOverflow(var$1);
                        ji_PrintStream_write($this, $buffer, 0, var$11.$position);
                        jn_ByteBuffer_clear(var$11);
                        if (!var$4)
                            break;
                    }
                    jl_StringBuilder_setLength($this.$sb, 0);
                    return;
                }
            }
            $rt_throw(jnc_CoderMalfunctionError__init_(var$1));
        }
        var$11 = new jl_IllegalArgumentException;
        jl_RuntimeException__init_2(var$11, $rt_s(278));
        $rt_throw(var$11);
    }
    function otcic_ConsoleOutputStream() {
        ji_OutputStream.call(this);
        this.$buffer1 = null;
    }
    var otcic_StdoutOutputStream = $rt_classWithoutFields(otcic_ConsoleOutputStream);
    var otcic_StdoutOutputStream_INSTANCE = null;
    function otcic_StdoutOutputStream_write($this, $b, $off, $len) {
        var var$4;
        var$4 = 0;
        while (var$4 < $len) {
            $rt_putStdout($b.data[var$4 + $off | 0] & 255);
            var$4 = var$4 + 1 | 0;
        }
    }
    function otcic_StdoutOutputStream__clinit_() {
        var var$1;
        var$1 = new otcic_StdoutOutputStream;
        var$1.$buffer1 = $rt_createByteArray(1);
        otcic_StdoutOutputStream_INSTANCE = var$1;
    }
    var tj_Translator$1 = $rt_classWithoutFields();
    var tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = null;
    var tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = null;
    var tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType = null;
    var tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator = null;
    var tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType = null;
    function tj_Translator$1_$callClinit() {
        tj_Translator$1_$callClinit = $rt_eraseClinit(tj_Translator$1);
        tj_Translator$1__clinit_();
    }
    function tj_Translator$1__clinit_() {
        var var$1, var$2;
        var$1 = $rt_createIntArray((tj_Statements$MutationType_values()).data.length);
        var$2 = var$1.data;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType = var$1;
        var$2[jl_Enum_ordinal(tj_Statements$MutationType_ADD)] = 1;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_SUBTRACT)] = 2;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_MULTIPLY)] = 3;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$MutationType.data[jl_Enum_ordinal(tj_Statements$MutationType_DIVIDE)] = 4;
        var$2 = $rt_createIntArray((tj_Translator$Operator_values()).data.length);
        var$1 = var$2.data;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator = var$2;
        var$1[jl_Enum_ordinal(tj_Translator$Operator_EQUAL)] = 1;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_NOT_EQUAL)] = 2;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_LESS_THAN)] = 3;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_GREATER_THAN)] = 4;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_LESS_THAN_EQUAL)] = 5;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_GREATER_THAN_EQUAL)] = 6;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_PLUS)] = 7;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_MULTIPLY)] = 8;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_DIVIDE)] = 9;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_MINUS)] = 10;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_REMOVEAT)] = 11;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_REMOVEFROM)] = 12;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Translator$Operator.data[jl_Enum_ordinal(tj_Translator$Operator_REMOVEALLFROM)] = 13;
        var$2 = $rt_createIntArray((tj_Element$ElementType_values()).data.length);
        var$1 = var$2.data;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType = var$2;
        var$1[jl_Enum_ordinal(tj_Element$ElementType_AND)] = 1;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT)] = 2;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_BOOL)] = 3;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_CAST)] = 4;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_DIVIDE)] = 5;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EQUAL)] = 6;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_EXPRESSION)] = 7;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FLOAT)] = 8;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN)] = 9;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_GREATER_THAN_EQUAL)] = 10;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_INTEGER)] = 11;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN)] = 12;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LESS_THAN_EQUAL)] = 13;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MINUS)] = 14;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_MULTIPLY)] = 15;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_NOT_EQUAL)] = 16;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_OR)] = 17;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_PLUS)] = 18;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_STRING)] = 19;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_VARIABLE)] = 20;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_FUNCTION)] = 21;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_SHOWINPUTBOX)] = 22;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LISTVAL)] = 23;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_LIST)] = 24;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Element$ElementType.data[jl_Enum_ordinal(tj_Element$ElementType_ARRAYLENGTH)] = 25;
        var$2 = $rt_createIntArray((tj_JavaishVal$JavaishType_values()).data.length);
        var$1 = var$2.data;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType = var$2;
        var$1[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOAT)] = 1;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INT)] = 2;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRING)] = 3;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEAN)] = 4;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_INTLIST)] = 5;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_FLOATLIST)] = 6;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_STRINGLIST)] = 7;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_BOOLEANLIST)] = 8;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$JavaishVal$JavaishType.data[jl_Enum_ordinal(tj_JavaishVal$JavaishType_LIST)] = 9;
        var$2 = $rt_createIntArray((tj_Statements$StmtType_values()).data.length);
        var$1 = var$2.data;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType = var$2;
        var$1[jl_Enum_ordinal(tj_Statements$StmtType_ASSIGNMENT)] = 1;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_COMMENT)] = 2;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_CALL)] = 3;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_DECLARATION)] = 4;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSE)] = 5;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_ELSEIF)] = 6;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_MUTATION)] = 7;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_RETURN)] = 8;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FUNCTION)] = 9;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_IF)] = 10;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_WHILE)] = 11;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FOREACH)] = 12;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_FORWHEN)] = 13;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_PRINT)] = 14;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_SHOWMSGBOX)] = 15;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEAT)] = 16;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEFROM)] = 17;
        tj_Translator$1_$SwitchMap$trackerjo$javaish$Statements$StmtType.data[jl_Enum_ordinal(tj_Statements$StmtType_REMOVEALLFROM)] = 18;
    }
    function tj_Result() {
        jl_Object.call(this);
        this.$pastResult = 0;
    }
    function tj_Result__init_(var_0) {
        var var_1 = new tj_Result();
        tj_Result__init_0(var_1, var_0);
        return var_1;
    }
    function tj_Result__init_0($this, $pastResult) {
        $this.$pastResult = $pastResult;
    }
    function tj_Return() {
        var a = this; jl_Object.call(a);
        a.$hasReturn = 0;
        a.$value12 = null;
    }
    function tj_Return__init_(var_0, var_1) {
        var var_2 = new tj_Return();
        tj_Return__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Return__init_0($this, $hasReturn, $value) {
        $this.$hasReturn = $hasReturn;
        $this.$value12 = $value;
    }
    function jur_AbstractSet() {
        var a = this; jl_Object.call(a);
        a.$next2 = null;
        a.$isSecondPassVisited = 0;
        a.$index0 = null;
        a.$type2 = 0;
    }
    var jur_AbstractSet_counter = 0;
    function jur_AbstractSet__init_($this) {
        var var$1;
        var$1 = jur_AbstractSet_counter;
        jur_AbstractSet_counter = var$1 + 1 | 0;
        $this.$index0 = jl_Integer_toString(var$1);
    }
    function jur_AbstractSet__init_0($this, $n) {
        var var$2;
        var$2 = jur_AbstractSet_counter;
        jur_AbstractSet_counter = var$2 + 1 | 0;
        $this.$index0 = jl_Integer_toString(var$2);
        $this.$next2 = $n;
    }
    function jur_AbstractSet_find($this, $stringIndex, $testString, $matchResult) {
        var $length;
        $length = $matchResult.$rightBound0;
        while (true) {
            if ($stringIndex > $length)
                return (-1);
            if ($this.$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $stringIndex = $stringIndex + 1 | 0;
        }
        return $stringIndex;
    }
    function jur_AbstractSet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        while (true) {
            if ($startSearch < $stringIndex)
                return (-1);
            if ($this.$matches($startSearch, $testString, $matchResult) >= 0)
                break;
            $startSearch = $startSearch + (-1) | 0;
        }
        return $startSearch;
    }
    function jur_AbstractSet_setType($this, $type) {
        $this.$type2 = $type;
    }
    function jur_AbstractSet_getType($this) {
        return $this.$type2;
    }
    function jur_AbstractSet_getNext($this) {
        return $this.$next2;
    }
    function jur_AbstractSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_AbstractSet_first($this, $set) {
        return 1;
    }
    function jur_AbstractSet_processBackRefReplacement($this) {
        return null;
    }
    function jur_AbstractSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$next2;
        if ($set !== null) {
            if (!$set.$isSecondPassVisited) {
                $set = $set.$processBackRefReplacement();
                if ($set !== null) {
                    $this.$next2.$isSecondPassVisited = 1;
                    $this.$next2 = $set;
                }
                $this.$next2.$processSecondPass();
            } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
                $this.$next2 = $set.$next2;
        }
    }
    function jur_AbstractSet__clinit_() {
        jur_AbstractSet_counter = 1;
    }
    function jnc_Charset() {
        var a = this; jl_Object.call(a);
        a.$canonicalName = null;
        a.$aliases = null;
    }
    function jnc_Charset_checkCanonicalName($name) {
        var $i, $c;
        if (jl_String_isEmpty($name))
            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
        if (!jnc_Charset_isValidCharsetStart(jl_String_charAt($name, 0)))
            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
        $i = 1;
        while ($i < jl_String_length($name)) {
            a: {
                $c = jl_String_charAt($name, $i);
                switch ($c) {
                    case 43:
                    case 45:
                    case 46:
                    case 58:
                    case 95:
                        break;
                    default:
                        if (jnc_Charset_isValidCharsetStart($c))
                            break a;
                        else
                            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
                }
            }
            $i = $i + 1 | 0;
        }
    }
    function jnc_Charset_isValidCharsetStart($c) {
        a: {
            b: {
                if (!($c >= 48 && $c <= 57) && !($c >= 97 && $c <= 122)) {
                    if ($c < 65)
                        break b;
                    if ($c > 90)
                        break b;
                }
                $c = 1;
                break a;
            }
            $c = 0;
        }
        return $c;
    }
    var jnci_UTF8Charset = $rt_classWithoutFields(jnc_Charset);
    var jnci_UTF8Charset_INSTANCE = null;
    function jnci_UTF8Charset_$callClinit() {
        jnci_UTF8Charset_$callClinit = $rt_eraseClinit(jnci_UTF8Charset);
        jnci_UTF8Charset__clinit_();
    }
    function jnci_UTF8Charset__clinit_() {
        var var$1, var$2, var$3, var$4, var$5;
        var$1 = new jnci_UTF8Charset;
        jnci_UTF8Charset_$callClinit();
        var$2 = $rt_createArray(jl_String, 0);
        var$3 = var$2.data;
        jnc_Charset_checkCanonicalName($rt_s(279));
        var$4 = var$3.length;
        var$5 = 0;
        while (var$5 < var$4) {
            jnc_Charset_checkCanonicalName(var$3[var$5]);
            var$5 = var$5 + 1 | 0;
        }
        var$1.$canonicalName = $rt_s(279);
        var$1.$aliases = var$2.$clone();
        jnci_UTF8Charset_INSTANCE = var$1;
    }
    function tj_Element() {
        jl_Object.call(this);
        this.$type1 = null;
    }
    function tj_Element_getType($this) {
        return $this.$type1;
    }
    function tj_Element_getTypeS($this) {
        return jl_Enum_toString($this.$type1);
    }
    function tj_ExpressionElmt() {
        tj_Element.call(this);
        this.$expression0 = null;
    }
    function tj_ExpressionElmt__init_(var_0) {
        var var_1 = new tj_ExpressionElmt();
        tj_ExpressionElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_ExpressionElmt__init_0($this, $expression) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_EXPRESSION;
        $this.$expression0 = $expression;
    }
    function tj_ExpressionElmt_toString($this) {
        var var$1, var$2;
        var$1 = tj_Expression_toString($this.$expression0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(280)), var$1), 41);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_CastElmt() {
        var a = this; tj_Element.call(a);
        a.$castType = null;
        a.$element = null;
    }
    function tj_CastElmt__init_(var_0, var_1) {
        var var_2 = new tj_CastElmt();
        tj_CastElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_CastElmt__init_0($this, $type, $element) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_CAST;
        $this.$castType = $type;
        $this.$element = $element;
    }
    function tj_CastElmt_toString($this) {
        var var$1, var$2, var$3;
        var$1 = jl_Enum_toString($this.$castType);
        var$2 = tj_Expression_toString($this.$element);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(281)), var$1), $rt_s(90)), var$2), 41);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function tj_ListValElmt() {
        var a = this; tj_Element.call(a);
        a.$listName2 = null;
        a.$index1 = null;
    }
    function tj_ListValElmt__init_(var_0, var_1) {
        var var_2 = new tj_ListValElmt();
        tj_ListValElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ListValElmt__init_0($this, $listName, $index) {
        $this.$listName2 = $listName;
        $this.$index1 = $index;
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_LISTVAL;
    }
    function tj_ListValElmt_getListName($this) {
        return $this.$listName2;
    }
    function tj_ListValElmt_getIndex($this) {
        return $this.$index1;
    }
    function tj_ListValElmt_toString($this) {
        var var$1, var$2, var$3;
        var$1 = $this.$listName2;
        var$2 = tj_Expression_toString($this.$index1);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        var$1 = jl_StringBuilder_append(var$3, var$1);
        jl_AbstractStringBuilder_append(var$1, 91);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$1, var$2), 93);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    function tj_StringElmt() {
        tj_Element.call(this);
        this.$value28 = null;
    }
    function tj_StringElmt__init_(var_0) {
        var var_1 = new tj_StringElmt();
        tj_StringElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_StringElmt__init_0($this, $value) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_STRING;
        $this.$value28 = $value;
    }
    function tj_StringElmt_toString($this) {
        return $this.$value28;
    }
    function tj_StringElmt_getValue($this) {
        return $this.$value28;
    }
    var tj_NotEqualElmt = $rt_classWithoutFields(tj_Element);
    function tj_NotEqualElmt__init_() {
        var var_0 = new tj_NotEqualElmt();
        tj_NotEqualElmt__init_0(var_0);
        return var_0;
    }
    function tj_NotEqualElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_NOT_EQUAL;
    }
    function tj_NotEqualElmt_toString($this) {
        return $rt_s(238);
    }
    var tj_GreaterThanElmt = $rt_classWithoutFields(tj_Element);
    function tj_GreaterThanElmt__init_() {
        var var_0 = new tj_GreaterThanElmt();
        tj_GreaterThanElmt__init_0(var_0);
        return var_0;
    }
    function tj_GreaterThanElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_GREATER_THAN;
    }
    function tj_GreaterThanElmt_toString($this) {
        return $rt_s(239);
    }
    var tj_GreaterThanEqualElmt = $rt_classWithoutFields(tj_Element);
    function tj_GreaterThanEqualElmt__init_() {
        var var_0 = new tj_GreaterThanEqualElmt();
        tj_GreaterThanEqualElmt__init_0(var_0);
        return var_0;
    }
    function tj_GreaterThanEqualElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_GREATER_THAN_EQUAL;
    }
    function tj_GreaterThanEqualElmt_toString($this) {
        return $rt_s(241);
    }
    var tj_LessThanElmt = $rt_classWithoutFields(tj_Element);
    function tj_LessThanElmt__init_() {
        var var_0 = new tj_LessThanElmt();
        tj_LessThanElmt__init_0(var_0);
        return var_0;
    }
    function tj_LessThanElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_LESS_THAN;
    }
    function tj_LessThanElmt_toString($this) {
        return $rt_s(240);
    }
    var tj_LessThanEqualElmt = $rt_classWithoutFields(tj_Element);
    function tj_LessThanEqualElmt__init_() {
        var var_0 = new tj_LessThanEqualElmt();
        tj_LessThanEqualElmt__init_0(var_0);
        return var_0;
    }
    function tj_LessThanEqualElmt__init_0($this) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_LESS_THAN_EQUAL;
    }
    function tj_LessThanEqualElmt_toString($this) {
        return $rt_s(242);
    }
    function tj_ArrayLengthElmt() {
        tj_Element.call(this);
        this.$arrayName = null;
    }
    function tj_ArrayLengthElmt__init_(var_0) {
        var var_1 = new tj_ArrayLengthElmt();
        tj_ArrayLengthElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_ArrayLengthElmt__init_0($this, $arrayName) {
        $this.$arrayName = $arrayName;
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_ARRAYLENGTH;
    }
    function tj_ArrayLengthElmt_getArrayName($this) {
        return $this.$arrayName;
    }
    function tj_ArrayLengthElmt_toString($this) {
        var var$1, var$2;
        var$1 = $this.$arrayName;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, var$1), $rt_s(282));
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_NotElmt() {
        tj_Element.call(this);
        this.$expression = null;
    }
    function tj_NotElmt__init_(var_0) {
        var var_1 = new tj_NotElmt();
        tj_NotElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_NotElmt__init_0($this, $expression) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_NOT;
        $this.$expression = $expression;
    }
    function tj_NotElmt_toString($this) {
        var var$1, var$2;
        var$1 = tj_Expression_toString($this.$expression);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, 33);
        jl_StringBuilder_append(var$2, var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_ShowInputBoxElmt() {
        tj_Element.call(this);
        this.$value17 = null;
    }
    function tj_ShowInputBoxElmt__init_(var_0) {
        var var_1 = new tj_ShowInputBoxElmt();
        tj_ShowInputBoxElmt__init_0(var_1, var_0);
        return var_1;
    }
    function tj_ShowInputBoxElmt__init_0($this, $value) {
        $this.$value17 = $value;
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_SHOWINPUTBOX;
    }
    function tj_FunctionElmt() {
        var a = this; tj_Element.call(a);
        a.$name16 = null;
        a.$params0 = null;
    }
    function tj_FunctionElmt__init_(var_0, var_1) {
        var var_2 = new tj_FunctionElmt();
        tj_FunctionElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_FunctionElmt__init_0($this, $name, $params) {
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_FUNCTION;
        $this.$name16 = $name;
        $this.$params0 = $params;
    }
    function tj_FunctionElmt_getName($this) {
        return $this.$name16;
    }
    function tj_FunctionElmt_getParams($this) {
        return $this.$params0;
    }
    function tj_FunctionElmt_toString($this) {
        var var$1, $expression, var$3, var$4, var$5, var$6;
        var$1 = $this.$name16;
        $expression = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($expression);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($expression, var$1), 40);
        var$1 = jl_AbstractStringBuilder_toString($expression);
        var$3 = $this.$params0.data;
        var$4 = var$3.length;
        var$5 = 0;
        while (var$5 < var$4) {
            $expression = tj_Expression_toString(var$3[var$5]);
            var$6 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$6);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, var$1), $expression), $rt_s(90));
            var$1 = jl_AbstractStringBuilder_toString(var$6);
            var$5 = var$5 + 1 | 0;
        }
        var$1 = jl_String_substring(var$1, 0, jl_String_length(var$1) - 2 | 0);
        $expression = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($expression);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append($expression, var$1), 41);
        return jl_AbstractStringBuilder_toString($expression);
    }
    function tj_ListElmt() {
        var a = this; tj_Element.call(a);
        a.$list0 = null;
        a.$listType = null;
    }
    function tj_ListElmt__init_(var_0, var_1) {
        var var_2 = new tj_ListElmt();
        tj_ListElmt__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_ListElmt__init_0($this, $list, $listType) {
        $this.$list0 = $list;
        tj_Element$ElementType_$callClinit();
        $this.$type1 = tj_Element$ElementType_LIST;
        $this.$listType = $listType;
    }
    function tj_ListElmt_getList($this) {
        return $this.$list0;
    }
    function tj_ListElmt_getListType($this) {
        return $this.$listType;
    }
    function tj_ListElmt_toString($this) {
        var $str, var$2, $expression, var$4;
        $str = $rt_s(283);
        var$2 = ju_AbstractList_iterator($this.$list0);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $expression = tj_Expression_toString(ju_AbstractList$1_next(var$2));
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $str), $expression), $rt_s(90));
            $str = jl_AbstractStringBuilder_toString(var$4);
        }
        $str = jl_String_substring($str, 0, jl_String_length($str) - 2 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $str), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    var otjc_JSArray = $rt_classWithoutFields();
    function otjc_JSArray_get$exported$0(var$0, var$1) {
        return otji_JSWrapper_javaToJs(var$0.$get(var$1));
    }
    function otjc_JSArray_getLength$exported$1(var$0) {
        return var$0.$getLength0();
    }
    var otjc_JSString = $rt_classWithoutFields();
    function jur_FSet() {
        var a = this; jur_AbstractSet.call(a);
        a.$isBackReferenced = 0;
        a.$groupIndex = 0;
    }
    var jur_FSet_posFSet = null;
    function jur_FSet_$callClinit() {
        jur_FSet_$callClinit = $rt_eraseClinit(jur_FSet);
        jur_FSet__clinit_();
    }
    function jur_FSet__init_0(var_0) {
        var var_1 = new jur_FSet();
        jur_FSet__init_(var_1, var_0);
        return var_1;
    }
    function jur_FSet__init_($this, $groupIndex) {
        jur_FSet_$callClinit();
        jur_AbstractSet__init_($this);
        $this.$groupIndex = $groupIndex;
    }
    function jur_FSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $end, $shift;
        $end = jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex);
        jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex, $stringIndex);
        $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex, $end);
        return $shift;
    }
    function jur_FSet_getGroupIndex($this) {
        return $this.$groupIndex;
    }
    function jur_FSet_hasConsumed($this, $mr) {
        return 0;
    }
    function jur_FSet__clinit_() {
        var var$1;
        var$1 = new jur_FSet$PossessiveFSet;
        jur_AbstractSet__init_(var$1);
        jur_FSet_posFSet = var$1;
    }
    function jur_Lexer() {
        var a = this; jl_Object.call(a);
        a.$pattern = null;
        a.$flags = 0;
        a.$mode = 0;
        a.$savedMode = 0;
        a.$lookBack = 0;
        a.$ch = 0;
        a.$lookAhead = 0;
        a.$patternFullLength = 0;
        a.$curST = null;
        a.$lookAheadST = null;
        a.$index = 0;
        a.$prevNW = 0;
        a.$curToc = 0;
        a.$lookAheadToc = 0;
        a.$orig = null;
    }
    var jur_Lexer_decompTable = null;
    var jur_Lexer_singleDecompTable = null;
    var jur_Lexer_singleDecompTableSize = 0;
    function jur_Lexer_setMode($this, $mode) {
        if ($mode > 0 && $mode < 3)
            $this.$mode = $mode;
        if ($mode == 1) {
            $this.$lookAhead = $this.$ch;
            $this.$lookAheadST = $this.$curST;
            $this.$index = $this.$lookAheadToc;
            $this.$lookAheadToc = $this.$curToc;
            jur_Lexer_movePointer($this);
        }
    }
    function jur_Lexer_isSpecial($this) {
        return $this.$curST === null ? 0 : 1;
    }
    function jur_Lexer_isNextSpecial($this) {
        return $this.$lookAheadST === null ? 0 : 1;
    }
    function jur_Lexer_next($this) {
        jur_Lexer_movePointer($this);
        return $this.$lookBack;
    }
    function jur_Lexer_nextSpecial($this) {
        var $res;
        $res = $this.$curST;
        jur_Lexer_movePointer($this);
        return $res;
    }
    function jur_Lexer_movePointer($this) {
        var $reread, $nonCap, var$3, $behind, $mod, $cs, $negative, $$je;
        $this.$lookBack = $this.$ch;
        $this.$ch = $this.$lookAhead;
        $this.$curST = $this.$lookAheadST;
        $this.$curToc = $this.$lookAheadToc;
        $this.$lookAheadToc = $this.$index;
        while (true) {
            $reread = 0;
            $nonCap = $this.$index >= $this.$pattern.data.length ? 0 : jur_Lexer_nextCodePoint($this);
            $this.$lookAhead = $nonCap;
            $this.$lookAheadST = null;
            if ($this.$mode == 4) {
                if ($nonCap != 92)
                    return;
                $nonCap = $this.$index;
                var$3 = $this.$pattern.data;
                $nonCap = $nonCap >= var$3.length ? 0 : var$3[jur_Lexer_nextIndex($this)];
                $this.$lookAhead = $nonCap;
                switch ($nonCap) {
                    case 69:
                        break;
                    default:
                        $this.$lookAhead = 92;
                        $this.$index = $this.$prevNW;
                        return;
                }
                $this.$mode = $this.$savedMode;
                $this.$lookAhead = $this.$index > ($this.$pattern.data.length - 2 | 0) ? 0 : jur_Lexer_nextCodePoint($this);
            }
            a: {
                $nonCap = $this.$lookAhead;
                if ($nonCap != 92) {
                    $behind = $this.$mode;
                    if ($behind == 1)
                        switch ($nonCap) {
                            case 36:
                                $this.$lookAhead = (-536870876);
                                break a;
                            case 40:
                                if ($this.$pattern.data[$this.$index] != 63) {
                                    $this.$lookAhead = (-2147483608);
                                    break a;
                                }
                                jur_Lexer_nextIndex($this);
                                $nonCap = $this.$pattern.data[$this.$index];
                                $behind = 0;
                                while (true) {
                                    b: {
                                        if ($behind) {
                                            $behind = 0;
                                            switch ($nonCap) {
                                                case 33:
                                                    break;
                                                case 61:
                                                    $this.$lookAhead = (-134217688);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                default:
                                                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Lexer_toString($this), $this.$index));
                                            }
                                            $this.$lookAhead = (-67108824);
                                            jur_Lexer_nextIndex($this);
                                        } else {
                                            switch ($nonCap) {
                                                case 33:
                                                    break;
                                                case 60:
                                                    jur_Lexer_nextIndex($this);
                                                    $nonCap = $this.$pattern.data[$this.$index];
                                                    $behind = 1;
                                                    break b;
                                                case 61:
                                                    $this.$lookAhead = (-536870872);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                case 62:
                                                    $this.$lookAhead = (-33554392);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                default:
                                                    $mod = jur_Lexer_readFlags($this);
                                                    $this.$lookAhead = $mod;
                                                    if ($mod < 256) {
                                                        $this.$flags = $mod;
                                                        $mod = $mod << 16;
                                                        $this.$lookAhead = $mod;
                                                        $this.$lookAhead = (-1073741784) | $mod;
                                                        break b;
                                                    }
                                                    $mod = $mod & 255;
                                                    $this.$lookAhead = $mod;
                                                    $this.$flags = $mod;
                                                    $mod = $mod << 16;
                                                    $this.$lookAhead = $mod;
                                                    $this.$lookAhead = (-16777176) | $mod;
                                                    break b;
                                            }
                                            $this.$lookAhead = (-268435416);
                                            jur_Lexer_nextIndex($this);
                                        }
                                    }
                                    if (!$behind)
                                        break;
                                }
                                break a;
                            case 41:
                                $this.$lookAhead = (-536870871);
                                break a;
                            case 42:
                            case 43:
                            case 63:
                                $behind = $this.$index;
                                var$3 = $this.$pattern.data;
                                switch ($behind >= var$3.length ? 42 : var$3[$behind]) {
                                    case 43:
                                        $this.$lookAhead = $nonCap | (-2147483648);
                                        jur_Lexer_nextIndex($this);
                                        break a;
                                    case 63:
                                        $this.$lookAhead = $nonCap | (-1073741824);
                                        jur_Lexer_nextIndex($this);
                                        break a;
                                    default:
                                }
                                $this.$lookAhead = $nonCap | (-536870912);
                                break a;
                            case 46:
                                $this.$lookAhead = (-536870866);
                                break a;
                            case 91:
                                $this.$lookAhead = (-536870821);
                                jur_Lexer_setMode($this, 2);
                                break a;
                            case 93:
                                if ($behind != 2)
                                    break a;
                                $this.$lookAhead = (-536870819);
                                break a;
                            case 94:
                                $this.$lookAhead = (-536870818);
                                break a;
                            case 123:
                                $this.$lookAheadST = jur_Lexer_processQuantifier($this, $nonCap);
                                break a;
                            case 124:
                                $this.$lookAhead = (-536870788);
                                break a;
                            default:
                        }
                    else if ($behind == 2)
                        switch ($nonCap) {
                            case 38:
                                $this.$lookAhead = (-536870874);
                                break a;
                            case 45:
                                $this.$lookAhead = (-536870867);
                                break a;
                            case 91:
                                $this.$lookAhead = (-536870821);
                                break a;
                            case 93:
                                $this.$lookAhead = (-536870819);
                                break a;
                            case 94:
                                $this.$lookAhead = (-536870818);
                                break a;
                            default:
                        }
                } else {
                    $nonCap = $this.$index >= ($this.$pattern.data.length - 2 | 0) ? (-1) : jur_Lexer_nextCodePoint($this);
                    c: {
                        $this.$lookAhead = $nonCap;
                        switch ($nonCap) {
                            case -1:
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Lexer_toString($this), $this.$index));
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                            case 22:
                            case 23:
                            case 24:
                            case 25:
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                            case 30:
                            case 31:
                            case 32:
                            case 33:
                            case 34:
                            case 35:
                            case 36:
                            case 37:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 118:
                                break;
                            case 48:
                                $this.$lookAhead = jur_Lexer_readOctals($this);
                                break a;
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                                if ($this.$mode != 1)
                                    break a;
                                $this.$lookAhead = (-2147483648) | $nonCap;
                                break a;
                            case 65:
                                $this.$lookAhead = (-2147483583);
                                break a;
                            case 66:
                                $this.$lookAhead = (-2147483582);
                                break a;
                            case 67:
                            case 69:
                            case 70:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 82:
                            case 84:
                            case 85:
                            case 86:
                            case 88:
                            case 89:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 111:
                            case 113:
                            case 121:
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Lexer_toString($this), $this.$index));
                            case 68:
                            case 83:
                            case 87:
                            case 100:
                            case 115:
                            case 119:
                                $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass(jl_String__init_1($this.$pattern, $this.$prevNW, 1), 0);
                                $this.$lookAhead = 0;
                                break a;
                            case 71:
                                $this.$lookAhead = (-2147483577);
                                break a;
                            case 80:
                            case 112:
                                break c;
                            case 81:
                                $this.$savedMode = $this.$mode;
                                $this.$mode = 4;
                                $reread = 1;
                                break a;
                            case 90:
                                $this.$lookAhead = (-2147483558);
                                break a;
                            case 97:
                                $this.$lookAhead = 7;
                                break a;
                            case 98:
                                $this.$lookAhead = (-2147483550);
                                break a;
                            case 99:
                                $nonCap = $this.$index;
                                var$3 = $this.$pattern.data;
                                if ($nonCap >= (var$3.length - 2 | 0))
                                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Lexer_toString($this), $this.$index));
                                $this.$lookAhead = var$3[jur_Lexer_nextIndex($this)] & 31;
                                break a;
                            case 101:
                                $this.$lookAhead = 27;
                                break a;
                            case 102:
                                $this.$lookAhead = 12;
                                break a;
                            case 110:
                                $this.$lookAhead = 10;
                                break a;
                            case 114:
                                $this.$lookAhead = 13;
                                break a;
                            case 116:
                                $this.$lookAhead = 9;
                                break a;
                            case 117:
                                $this.$lookAhead = jur_Lexer_readHex($this, 4);
                                break a;
                            case 120:
                                $this.$lookAhead = jur_Lexer_readHex($this, 2);
                                break a;
                            case 122:
                                $this.$lookAhead = (-2147483526);
                                break a;
                            default:
                        }
                        break a;
                    }
                    $cs = jur_Lexer_parseCharClassName($this);
                    $negative = 0;
                    if ($this.$lookAhead == 80)
                        $negative = 1;
                    try {
                        $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass($cs, $negative);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof ju_MissingResourceException) {
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), jur_Lexer_toString($this), $this.$index));
                        } else {
                            throw $$e;
                        }
                    }
                    $this.$lookAhead = 0;
                }
            }
            if ($reread)
                continue;
            else
                break;
        }
    }
    function jur_Lexer_parseCharClassName($this) {
        var $sb, $ch, var$3, var$4, $res, var$6;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($sb, 10);
        $ch = $this.$index;
        var$3 = $this.$pattern;
        var$4 = var$3.data;
        if ($ch < (var$4.length - 2 | 0)) {
            if (var$4[$ch] != 123) {
                $sb = jl_String__init_1(var$3, jur_Lexer_nextIndex($this), 1);
                $res = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($res);
                jl_StringBuilder_append(jl_StringBuilder_append($res, $rt_s(284)), $sb);
                return jl_AbstractStringBuilder_toString($res);
            }
            jur_Lexer_nextIndex($this);
            $ch = 0;
            a: {
                while (true) {
                    var$6 = $this.$index;
                    var$3 = $this.$pattern.data;
                    if (var$6 >= (var$3.length - 2 | 0))
                        break;
                    $ch = var$3[jur_Lexer_nextIndex($this)];
                    if ($ch == 125)
                        break a;
                    jl_AbstractStringBuilder_append($sb, $ch);
                }
            }
            if ($ch != 125)
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
        }
        if (!$sb.$length0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
        $res = jl_AbstractStringBuilder_toString($sb);
        if (jl_String_length($res) == 1) {
            $sb = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($sb);
            jl_StringBuilder_append(jl_StringBuilder_append($sb, $rt_s(284)), $res);
            return jl_AbstractStringBuilder_toString($sb);
        }
        b: {
            c: {
                if (jl_String_length($res) > 3) {
                    if (jl_String_startsWith0($res, $rt_s(284)))
                        break c;
                    if (jl_String_startsWith0($res, $rt_s(285)))
                        break c;
                }
                break b;
            }
            $res = jl_String_substring0($res, 2);
        }
        return $res;
    }
    function jur_Lexer_processQuantifier($this, $ch) {
        var $sb, $min, $max, $mod, var$6, $$je;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($sb, 4);
        $min = (-1);
        $max = 2147483647;
        a: {
            while (true) {
                $mod = $this.$index;
                var$6 = $this.$pattern.data;
                if ($mod >= var$6.length)
                    break a;
                $ch = var$6[jur_Lexer_nextIndex($this)];
                if ($ch == 125)
                    break a;
                if ($ch == 44 && $min < 0)
                    try {
                        $min = jl_Integer_parseInt(jl_StringBuilder_toString($sb), 10);
                        jl_StringBuilder_delete($sb, 0, jl_StringBuilder_length($sb));
                        continue;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_NumberFormatException) {
                            break;
                        } else {
                            throw $$e;
                        }
                    }
                jl_AbstractStringBuilder_append($sb, $ch & 65535);
            }
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
        }
        if ($ch != 125)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
        if ($sb.$length0 > 0)
            b: {
                try {
                    $max = jl_Integer_parseInt(jl_StringBuilder_toString($sb), 10);
                    if ($min >= 0)
                        break b;
                    $min = $max;
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                    } else {
                        throw $$e;
                    }
                }
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
            }
        else if ($min < 0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
        if (($min | $max | ($max - $min | 0)) < 0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
        $ch = $this.$index;
        var$6 = $this.$pattern.data;
        $mod = $ch >= var$6.length ? 42 : var$6[$ch];
        c: {
            switch ($mod) {
                case 43:
                    $this.$lookAhead = (-2147483525);
                    jur_Lexer_nextIndex($this);
                    break c;
                case 63:
                    $this.$lookAhead = (-1073741701);
                    jur_Lexer_nextIndex($this);
                    break c;
                default:
            }
            $this.$lookAhead = (-536870789);
        }
        $sb = new jur_Quantifier;
        $sb.$min0 = $min;
        $sb.$max0 = $max;
        return $sb;
    }
    function jur_Lexer_toString($this) {
        return $this.$orig;
    }
    function jur_Lexer_isEmpty($this) {
        return !$this.$ch && !$this.$lookAhead && $this.$index == $this.$patternFullLength && !jur_Lexer_isSpecial($this) ? 1 : 0;
    }
    function jur_Lexer_isLetter0($ch) {
        return $ch < 0 ? 0 : 1;
    }
    function jur_Lexer_isLetter($this) {
        return !jur_Lexer_isEmpty($this) && !jur_Lexer_isSpecial($this) && jur_Lexer_isLetter0($this.$ch) ? 1 : 0;
    }
    function jur_Lexer_isHighSurrogate($this) {
        var var$1;
        var$1 = $this.$ch;
        return var$1 <= 56319 && var$1 >= 55296 ? 1 : 0;
    }
    function jur_Lexer_isLowSurrogate($this) {
        var var$1;
        var$1 = $this.$ch;
        return var$1 <= 57343 && var$1 >= 56320 ? 1 : 0;
    }
    function jur_Lexer_isHighSurrogate0($ch) {
        return $ch <= 56319 && $ch >= 55296 ? 1 : 0;
    }
    function jur_Lexer_isLowSurrogate0($ch) {
        return $ch <= 57343 && $ch >= 56320 ? 1 : 0;
    }
    function jur_Lexer_readHex($this, $max) {
        var $st, $length, $i, var$5, $$je;
        $st = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($st, $max);
        $length = $this.$pattern.data.length - 2 | 0;
        $i = 0;
        while (true) {
            var$5 = $rt_compare($i, $max);
            if (var$5 >= 0)
                break;
            if ($this.$index >= $length)
                break;
            jl_AbstractStringBuilder_append($st, $this.$pattern.data[jur_Lexer_nextIndex($this)]);
            $i = $i + 1 | 0;
        }
        if (!var$5)
            a: {
                try {
                    $max = jl_Integer_parseInt(jl_StringBuilder_toString($st), 16);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $max;
            }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
    }
    function jur_Lexer_readOctals($this) {
        var $max, $i, var$3, $length, $res, var$6;
        $max = 3;
        $i = 1;
        var$3 = $this.$pattern.data;
        $length = var$3.length - 2 | 0;
        $res = jl_Character_digit(var$3[$this.$index], 8);
        switch ($res) {
            case -1:
                break;
            default:
                if ($res > 3)
                    $max = 2;
                jur_Lexer_nextIndex($this);
                a: {
                    while (true) {
                        if ($i >= $max)
                            break a;
                        var$6 = $this.$index;
                        if (var$6 >= $length)
                            break a;
                        var$6 = jl_Character_digit($this.$pattern.data[var$6], 8);
                        if (var$6 < 0)
                            break;
                        $res = ($res * 8 | 0) + var$6 | 0;
                        jur_Lexer_nextIndex($this);
                        $i = $i + 1 | 0;
                    }
                }
                return $res;
        }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, $this.$index));
    }
    function jur_Lexer_readFlags($this) {
        var $pos, $res, var$3, var$4;
        $pos = 1;
        $res = $this.$flags;
        a: while (true) {
            var$3 = $this.$index;
            var$4 = $this.$pattern.data;
            if (var$3 >= var$4.length)
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, var$3));
            b: {
                c: {
                    switch (var$4[var$3]) {
                        case 41:
                            jur_Lexer_nextIndex($this);
                            return $res | 256;
                        case 45:
                            if (!$pos)
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(10), $this.$orig, var$3));
                            $pos = 0;
                            break b;
                        case 58:
                            break a;
                        case 100:
                            break c;
                        case 105:
                            $res = $pos ? $res | 2 : ($res ^ 2) & $res;
                            break b;
                        case 109:
                            $res = $pos ? $res | 8 : ($res ^ 8) & $res;
                            break b;
                        case 115:
                            $res = $pos ? $res | 32 : ($res ^ 32) & $res;
                            break b;
                        case 117:
                            $res = $pos ? $res | 64 : ($res ^ 64) & $res;
                            break b;
                        case 120:
                            $res = $pos ? $res | 4 : ($res ^ 4) & $res;
                            break b;
                        default:
                    }
                    break b;
                }
                $res = $pos ? $res | 1 : ($res ^ 1) & $res;
            }
            jur_Lexer_nextIndex($this);
        }
        jur_Lexer_nextIndex($this);
        return $res;
    }
    function jur_Lexer_nextIndex($this) {
        var var$1, var$2, var$3, var$4, var$5;
        var$1 = $this.$index;
        $this.$prevNW = var$1;
        if (!($this.$flags & 4))
            $this.$index = var$1 + 1 | 0;
        else {
            var$2 = $this.$pattern.data.length - 2 | 0;
            $this.$index = var$1 + 1 | 0;
            a: while (true) {
                var$3 = $this.$index;
                if (var$3 < var$2 && jl_Character_isWhitespace($this.$pattern.data[var$3])) {
                    $this.$index = $this.$index + 1 | 0;
                    continue;
                }
                var$3 = $this.$index;
                if (var$3 >= var$2)
                    break;
                var$4 = $this.$pattern.data;
                if (var$4[var$3] != 35)
                    break;
                $this.$index = var$3 + 1 | 0;
                while (true) {
                    var$5 = $this.$index;
                    if (var$5 >= var$2)
                        continue a;
                    var$1 = var$4[var$5];
                    if (var$1 != 10 && var$1 != 13 && var$1 != 133 && (var$1 | 1) != 8233 ? 0 : 1)
                        continue a;
                    $this.$index = var$5 + 1 | 0;
                }
            }
        }
        return $this.$prevNW;
    }
    function jur_Lexer_getDecomposition($ch) {
        return jur_Lexer_decompTable.$get2($ch);
    }
    function jur_Lexer_nextCodePoint($this) {
        var $high, $lowExpectedIndex, var$3, $low;
        $high = $this.$pattern.data[jur_Lexer_nextIndex($this)];
        if (jl_Character_isHighSurrogate($high)) {
            $lowExpectedIndex = $this.$prevNW + 1 | 0;
            var$3 = $this.$pattern.data;
            if ($lowExpectedIndex < var$3.length) {
                $low = var$3[$lowExpectedIndex];
                if (jl_Character_isLowSurrogate($low)) {
                    jur_Lexer_nextIndex($this);
                    return jl_Character_toCodePoint($high, $low);
                }
            }
        }
        return $high;
    }
    function jur_Lexer_getIndex($this) {
        return $this.$curToc;
    }
    function jur_PatternSyntaxException() {
        var a = this; jl_IllegalArgumentException.call(a);
        a.$desc = null;
        a.$pattern1 = null;
        a.$index2 = 0;
    }
    function jur_PatternSyntaxException__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_PatternSyntaxException();
        jur_PatternSyntaxException__init_(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_PatternSyntaxException__init_($this, $description, $pattern, $index) {
        jl_Exception__init_($this);
        $this.$index2 = (-1);
        $this.$desc = $description;
        $this.$pattern1 = $pattern;
        $this.$index2 = $index;
    }
    var tj_Element$ElementType = $rt_classWithoutFields(jl_Enum);
    var tj_Element$ElementType_PLUS = null;
    var tj_Element$ElementType_MINUS = null;
    var tj_Element$ElementType_DIVIDE = null;
    var tj_Element$ElementType_MULTIPLY = null;
    var tj_Element$ElementType_FLOAT = null;
    var tj_Element$ElementType_INTEGER = null;
    var tj_Element$ElementType_VARIABLE = null;
    var tj_Element$ElementType_FUNCTION = null;
    var tj_Element$ElementType_EQUAL = null;
    var tj_Element$ElementType_NOT_EQUAL = null;
    var tj_Element$ElementType_LESS_THAN = null;
    var tj_Element$ElementType_GREATER_THAN = null;
    var tj_Element$ElementType_LESS_THAN_EQUAL = null;
    var tj_Element$ElementType_GREATER_THAN_EQUAL = null;
    var tj_Element$ElementType_STRING = null;
    var tj_Element$ElementType_BOOL = null;
    var tj_Element$ElementType_AND = null;
    var tj_Element$ElementType_OR = null;
    var tj_Element$ElementType_NOT = null;
    var tj_Element$ElementType_EXPRESSION = null;
    var tj_Element$ElementType_CAST = null;
    var tj_Element$ElementType_SHOWINPUTBOX = null;
    var tj_Element$ElementType_LIST = null;
    var tj_Element$ElementType_LISTVAL = null;
    var tj_Element$ElementType_ARRAYLENGTH = null;
    var tj_Element$ElementType_$VALUES = null;
    function tj_Element$ElementType_$callClinit() {
        tj_Element$ElementType_$callClinit = $rt_eraseClinit(tj_Element$ElementType);
        tj_Element$ElementType__clinit_();
    }
    function tj_Element$ElementType__init_(var_0, var_1) {
        var var_2 = new tj_Element$ElementType();
        tj_Element$ElementType__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Element$ElementType_values() {
        tj_Element$ElementType_$callClinit();
        return tj_Element$ElementType_$VALUES.$clone();
    }
    function tj_Element$ElementType__init_0($this, var$1, var$2) {
        tj_Element$ElementType_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Element$ElementType__clinit_() {
        var var$1;
        tj_Element$ElementType_PLUS = tj_Element$ElementType__init_($rt_s(197), 0);
        tj_Element$ElementType_MINUS = tj_Element$ElementType__init_($rt_s(199), 1);
        tj_Element$ElementType_DIVIDE = tj_Element$ElementType__init_($rt_s(206), 2);
        tj_Element$ElementType_MULTIPLY = tj_Element$ElementType__init_($rt_s(204), 3);
        tj_Element$ElementType_FLOAT = tj_Element$ElementType__init_($rt_s(25), 4);
        tj_Element$ElementType_INTEGER = tj_Element$ElementType__init_($rt_s(185), 5);
        tj_Element$ElementType_VARIABLE = tj_Element$ElementType__init_($rt_s(190), 6);
        tj_Element$ElementType_FUNCTION = tj_Element$ElementType__init_($rt_s(165), 7);
        tj_Element$ElementType_EQUAL = tj_Element$ElementType__init_($rt_s(198), 8);
        tj_Element$ElementType_NOT_EQUAL = tj_Element$ElementType__init_($rt_s(203), 9);
        tj_Element$ElementType_LESS_THAN = tj_Element$ElementType__init_($rt_s(188), 10);
        tj_Element$ElementType_GREATER_THAN = tj_Element$ElementType__init_($rt_s(202), 11);
        tj_Element$ElementType_LESS_THAN_EQUAL = tj_Element$ElementType__init_($rt_s(186), 12);
        tj_Element$ElementType_GREATER_THAN_EQUAL = tj_Element$ElementType__init_($rt_s(200), 13);
        tj_Element$ElementType_STRING = tj_Element$ElementType__init_($rt_s(23), 14);
        tj_Element$ElementType_BOOL = tj_Element$ElementType__init_($rt_s(194), 15);
        tj_Element$ElementType_AND = tj_Element$ElementType__init_($rt_s(192), 16);
        tj_Element$ElementType_OR = tj_Element$ElementType__init_($rt_s(191), 17);
        tj_Element$ElementType_NOT = tj_Element$ElementType__init_($rt_s(193), 18);
        tj_Element$ElementType_EXPRESSION = tj_Element$ElementType__init_($rt_s(187), 19);
        tj_Element$ElementType_CAST = tj_Element$ElementType__init_($rt_s(195), 20);
        tj_Element$ElementType_SHOWINPUTBOX = tj_Element$ElementType__init_($rt_s(205), 21);
        tj_Element$ElementType_LIST = tj_Element$ElementType__init_($rt_s(196), 22);
        tj_Element$ElementType_LISTVAL = tj_Element$ElementType__init_($rt_s(201), 23);
        var$1 = tj_Element$ElementType__init_($rt_s(189), 24);
        tj_Element$ElementType_ARRAYLENGTH = var$1;
        tj_Element$ElementType_$VALUES = $rt_createArrayFromData(tj_Element$ElementType, [tj_Element$ElementType_PLUS, tj_Element$ElementType_MINUS, tj_Element$ElementType_DIVIDE, tj_Element$ElementType_MULTIPLY, tj_Element$ElementType_FLOAT, tj_Element$ElementType_INTEGER, tj_Element$ElementType_VARIABLE, tj_Element$ElementType_FUNCTION, tj_Element$ElementType_EQUAL, tj_Element$ElementType_NOT_EQUAL, tj_Element$ElementType_LESS_THAN, tj_Element$ElementType_GREATER_THAN, tj_Element$ElementType_LESS_THAN_EQUAL,
        tj_Element$ElementType_GREATER_THAN_EQUAL, tj_Element$ElementType_STRING, tj_Element$ElementType_BOOL, tj_Element$ElementType_AND, tj_Element$ElementType_OR, tj_Element$ElementType_NOT, tj_Element$ElementType_EXPRESSION, tj_Element$ElementType_CAST, tj_Element$ElementType_SHOWINPUTBOX, tj_Element$ElementType_LIST, tj_Element$ElementType_LISTVAL, var$1]);
    }
    function tj_IntElmt() {
        tj_Element.call(this);
        this.$value20 = 0;
    }
    function tj_IntElmt_toString($this) {
        return jl_Integer_toString($this.$value20);
    }
    function tj_IntElmt_getValue($this) {
        return $this.$value20;
    }
    function tj_FloatElmt() {
        tj_Element.call(this);
        this.$value26 = 0.0;
    }
    function tj_FloatElmt_toString($this) {
        return jl_Float_toString($this.$value26);
    }
    function tj_FloatElmt_getValue($this) {
        return $this.$value26;
    }
    function jl_Float() {
        jl_Number.call(this);
        this.$value29 = 0.0;
    }
    var jl_Float_TYPE = null;
    function jl_Float_floatValue($this) {
        return $this.$value29;
    }
    function jl_Float_toString($d) {
        var var$2;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_insert0(var$2, var$2.$length0, $d);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jl_Float_toString0($this) {
        return jl_Float_toString($this.$value29);
    }
    function jl_Float_parseFloat($string) {
        var $start, $end, $negative, $c, $mantissa, $exp, $mantissaPos, $hasOneDigit, var$10, $negativeExp, $numExp;
        if (jl_String_isEmpty($string)) {
            $string = new jl_NumberFormatException;
            jl_Exception__init_($string);
            $rt_throw($string);
        }
        $start = 0;
        $end = jl_String_length($string);
        while (true) {
            if (jl_String_charAt($string, $start) > 32) {
                while (jl_String_charAt($string, $end - 1 | 0) <= 32) {
                    $end = $end + (-1) | 0;
                }
                $negative = 0;
                if (jl_String_charAt($string, $start) == 45) {
                    $start = $start + 1 | 0;
                    $negative = 1;
                } else if (jl_String_charAt($string, $start) == 43)
                    $start = $start + 1 | 0;
                if ($start == $end) {
                    $string = new jl_NumberFormatException;
                    jl_Exception__init_($string);
                    $rt_throw($string);
                }
                a: {
                    $c = jl_String_charAt($string, $start);
                    $mantissa = 0;
                    $exp = (-1);
                    $mantissaPos = 100000000;
                    $hasOneDigit = 0;
                    if ($c != 46) {
                        $hasOneDigit = 1;
                        if ($c >= 48 && $c <= 57) {
                            b: {
                                while ($start < $end) {
                                    if (jl_String_charAt($string, $start) != 48)
                                        break b;
                                    $start = $start + 1 | 0;
                                }
                            }
                            while ($start < $end) {
                                var$10 = jl_String_charAt($string, $start);
                                if (var$10 < 48)
                                    break a;
                                if (var$10 > 57)
                                    break a;
                                if ($mantissaPos > 0) {
                                    $mantissa = $mantissa + $rt_imul($mantissaPos, var$10 - 48 | 0) | 0;
                                    $mantissaPos = $rt_udiv($mantissaPos, 10);
                                }
                                $exp = $exp + 1 | 0;
                                $start = $start + 1 | 0;
                            }
                        } else {
                            $string = new jl_NumberFormatException;
                            jl_Exception__init_($string);
                            $rt_throw($string);
                        }
                    }
                }
                if ($start < $end && jl_String_charAt($string, $start) == 46) {
                    $start = $start + 1 | 0;
                    c: {
                        while (true) {
                            if ($start >= $end)
                                break c;
                            $c = jl_String_charAt($string, $start);
                            var$10 = $rt_compare($c, 48);
                            if (var$10 < 0)
                                break c;
                            if ($c > 57)
                                break;
                            if (!$mantissa && !var$10)
                                $exp = $exp + (-1) | 0;
                            else if ($mantissaPos > 0) {
                                $mantissa = $mantissa + $rt_imul($mantissaPos, $c - 48 | 0) | 0;
                                $mantissaPos = $rt_udiv($mantissaPos, 10);
                            }
                            $start = $start + 1 | 0;
                            $hasOneDigit = 1;
                        }
                    }
                    if (!$hasOneDigit) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                }
                if ($start < $end) {
                    $c = jl_String_charAt($string, $start);
                    if ($c != 101 && $c != 69) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    $c = $start + 1 | 0;
                    $negativeExp = 0;
                    if ($c == $end) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    if (jl_String_charAt($string, $c) == 45) {
                        $c = $c + 1 | 0;
                        $negativeExp = 1;
                    } else if (jl_String_charAt($string, $c) == 43)
                        $c = $c + 1 | 0;
                    $numExp = 0;
                    $start = 0;
                    d: {
                        while (true) {
                            if ($c >= $end)
                                break d;
                            $mantissaPos = jl_String_charAt($string, $c);
                            if ($mantissaPos < 48)
                                break d;
                            if ($mantissaPos > 57)
                                break;
                            $numExp = (10 * $numExp | 0) + ($mantissaPos - 48 | 0) | 0;
                            $start = 1;
                            $c = $c + 1 | 0;
                        }
                    }
                    if (!$start) {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                    if ($negativeExp)
                        $numExp =  -$numExp | 0;
                    $exp = $exp + $numExp | 0;
                }
                return otcit_FloatSynthesizer_synthesizeFloat($mantissa, $exp, $negative);
            }
            $start = $start + 1 | 0;
            if ($start == $end)
                break;
        }
        $string = new jl_NumberFormatException;
        jl_Exception__init_($string);
        $rt_throw($string);
    }
    function jl_Float__clinit_() {
        jl_Float_TYPE = $rt_cls($rt_floatcls());
    }
    function tj_BoolElmt() {
        tj_Element.call(this);
        this.$value27 = 0;
    }
    function tj_BoolElmt_toString($this) {
        return jl_Boolean_toString($this.$value27);
    }
    function tj_BoolElmt_getValue($this) {
        return $this.$value27;
    }
    function jl_Boolean() {
        jl_Object.call(this);
        this.$value24 = 0;
    }
    var jl_Boolean_TRUE = null;
    var jl_Boolean_FALSE = null;
    var jl_Boolean_TYPE = null;
    function jl_Boolean__init_(var_0) {
        var var_1 = new jl_Boolean();
        jl_Boolean__init_0(var_1, var_0);
        return var_1;
    }
    function jl_Boolean__init_0($this, $value) {
        $this.$value24 = $value;
    }
    function jl_Boolean_parseBoolean($s) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
        a: {
            if ($s !== null) {
                if (!jl_String_isEmpty($s)) {
                    var$2 = $rt_createIntArray($s.$characters.data.length).data;
                    var$3 = 0;
                    var$4 = 0;
                    while (true) {
                        var$5 = $s.$characters.data;
                        var$6 = var$5.length;
                        if (var$4 >= var$6)
                            break;
                        b: {
                            if (var$4 != (var$6 - 1 | 0) && jl_Character_isHighSurrogate(var$5[var$4])) {
                                var$5 = $s.$characters.data;
                                var$7 = var$4 + 1 | 0;
                                if (jl_Character_isLowSurrogate(var$5[var$7])) {
                                    var$6 = var$3 + 1 | 0;
                                    var$5 = $s.$characters.data;
                                    var$2[var$3] = jl_Character_toLowerCase0(jl_Character_toCodePoint(var$5[var$4], var$5[var$7]));
                                    var$4 = var$7;
                                    break b;
                                }
                            }
                            var$6 = var$3 + 1 | 0;
                            var$2[var$3] = jl_Character_toLowerCase($s.$characters.data[var$4]);
                        }
                        var$4 = var$4 + 1 | 0;
                        var$3 = var$6;
                    }
                    $s = new jl_String;
                    var$4 = 0;
                    $s.$characters = $rt_createCharArray(var$3 * 2 | 0);
                    var$6 = 0;
                    var$7 = 0;
                    while (var$7 < var$3) {
                        var$8 = var$4 + 1 | 0;
                        var$4 = var$2[var$4];
                        if (var$4 < 65536) {
                            var$5 = $s.$characters.data;
                            var$9 = var$6 + 1 | 0;
                            var$5[var$6] = var$4 & 65535;
                        } else {
                            var$5 = $s.$characters.data;
                            var$10 = var$6 + 1 | 0;
                            var$5[var$6] = jl_Character_highSurrogate(var$4);
                            var$5 = $s.$characters.data;
                            var$9 = var$10 + 1 | 0;
                            var$5[var$10] = jl_Character_lowSurrogate(var$4);
                        }
                        var$7 = var$7 + 1 | 0;
                        var$4 = var$8;
                        var$6 = var$9;
                    }
                    var$5 = $s.$characters;
                    if (var$6 < var$5.data.length)
                        $s.$characters = ju_Arrays_copyOf(var$5, var$6);
                }
                if (jl_String_equals($s, $rt_s(21))) {
                    var$4 = 1;
                    break a;
                }
            }
            var$4 = 0;
        }
        return var$4;
    }
    function jl_Boolean_booleanValue($this) {
        return $this.$value24;
    }
    function jl_Boolean_valueOf($value) {
        return !$value ? jl_Boolean_FALSE : jl_Boolean_TRUE;
    }
    function jl_Boolean_toString($value) {
        return !$value ? $rt_s(20) : $rt_s(21);
    }
    function jl_Boolean_toString0($this) {
        return jl_Boolean_toString($this.$value24);
    }
    function jl_Boolean__clinit_() {
        jl_Boolean_TRUE = jl_Boolean__init_(1);
        jl_Boolean_FALSE = jl_Boolean__init_(0);
        jl_Boolean_TYPE = $rt_cls($rt_booleancls());
    }
    var tj_EqualElmt = $rt_classWithoutFields(tj_Element);
    function tj_EqualElmt_toString($this) {
        return $rt_s(237);
    }
    var tj_AndElmt = $rt_classWithoutFields(tj_Element);
    function tj_AndElmt_toString($this) {
        return $rt_s(244);
    }
    var tj_OrElmt = $rt_classWithoutFields(tj_Element);
    function tj_OrElmt_toString($this) {
        return $rt_s(245);
    }
    var tj_PlusElmt = $rt_classWithoutFields(tj_Element);
    function tj_PlusElmt_toString($this) {
        return $rt_s(246);
    }
    var tj_MinusElmt = $rt_classWithoutFields(tj_Element);
    function tj_MinusElmt_toString($this) {
        return $rt_s(247);
    }
    var tj_MultiplyElmt = $rt_classWithoutFields(tj_Element);
    function tj_MultiplyElmt_toString($this) {
        return $rt_s(249);
    }
    var tj_DivideElmt = $rt_classWithoutFields(tj_Element);
    function tj_DivideElmt_toString($this) {
        return $rt_s(250);
    }
    function tj_VariableElmt() {
        tj_Element.call(this);
        this.$name15 = null;
    }
    function tj_VariableElmt_toString($this) {
        var var$1, var$2;
        var$1 = $this.$name15;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(286)), var$1), 41);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_VariableElmt_getName($this) {
        return $this.$name15;
    }
    var tj_Expression$1 = $rt_classWithoutFields();
    var tj_Expression$1_$SwitchMap$trackerjo$javaish$Expression$ExpressionReturnType = null;
    function tj_Expression$1_$callClinit() {
        tj_Expression$1_$callClinit = $rt_eraseClinit(tj_Expression$1);
        tj_Expression$1__clinit_();
    }
    function tj_Expression$1__clinit_() {
        var var$1, var$2;
        tj_Expression$ExpressionReturnType_$callClinit();
        var$1 = $rt_createIntArray((tj_Expression$ExpressionReturnType_$VALUES.$clone()).data.length);
        var$2 = var$1.data;
        tj_Expression$1_$SwitchMap$trackerjo$javaish$Expression$ExpressionReturnType = var$1;
        var$2[tj_Expression$ExpressionReturnType_INT.$ordinal0] = 1;
        var$2[tj_Expression$ExpressionReturnType_FLOAT.$ordinal0] = 2;
        var$2[tj_Expression$ExpressionReturnType_STRING.$ordinal0] = 3;
        var$2[tj_Expression$ExpressionReturnType_BOOL.$ordinal0] = 4;
        var$2[tj_Expression$ExpressionReturnType_INTLIST.$ordinal0] = 5;
        var$2[tj_Expression$ExpressionReturnType_FLOATLIST.$ordinal0] = 6;
        var$2[tj_Expression$ExpressionReturnType_STRINGLIST.$ordinal0] = 7;
        var$2[tj_Expression$ExpressionReturnType_BOOLEANLIST.$ordinal0] = 8;
    }
    var tj_Translator$Operator = $rt_classWithoutFields(jl_Enum);
    var tj_Translator$Operator_PLUS = null;
    var tj_Translator$Operator_MINUS = null;
    var tj_Translator$Operator_DIVIDE = null;
    var tj_Translator$Operator_MULTIPLY = null;
    var tj_Translator$Operator_EQUAL = null;
    var tj_Translator$Operator_NOT_EQUAL = null;
    var tj_Translator$Operator_LESS_THAN = null;
    var tj_Translator$Operator_GREATER_THAN = null;
    var tj_Translator$Operator_LESS_THAN_EQUAL = null;
    var tj_Translator$Operator_GREATER_THAN_EQUAL = null;
    var tj_Translator$Operator_REMOVEALLFROM = null;
    var tj_Translator$Operator_REMOVEAT = null;
    var tj_Translator$Operator_REMOVEFROM = null;
    var tj_Translator$Operator_$VALUES = null;
    function tj_Translator$Operator_$callClinit() {
        tj_Translator$Operator_$callClinit = $rt_eraseClinit(tj_Translator$Operator);
        tj_Translator$Operator__clinit_();
    }
    function tj_Translator$Operator__init_(var_0, var_1) {
        var var_2 = new tj_Translator$Operator();
        tj_Translator$Operator__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Translator$Operator_values() {
        tj_Translator$Operator_$callClinit();
        return tj_Translator$Operator_$VALUES.$clone();
    }
    function tj_Translator$Operator__init_0($this, var$1, var$2) {
        tj_Translator$Operator_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Translator$Operator__clinit_() {
        var var$1;
        tj_Translator$Operator_PLUS = tj_Translator$Operator__init_($rt_s(197), 0);
        tj_Translator$Operator_MINUS = tj_Translator$Operator__init_($rt_s(199), 1);
        tj_Translator$Operator_DIVIDE = tj_Translator$Operator__init_($rt_s(206), 2);
        tj_Translator$Operator_MULTIPLY = tj_Translator$Operator__init_($rt_s(204), 3);
        tj_Translator$Operator_EQUAL = tj_Translator$Operator__init_($rt_s(198), 4);
        tj_Translator$Operator_NOT_EQUAL = tj_Translator$Operator__init_($rt_s(203), 5);
        tj_Translator$Operator_LESS_THAN = tj_Translator$Operator__init_($rt_s(188), 6);
        tj_Translator$Operator_GREATER_THAN = tj_Translator$Operator__init_($rt_s(202), 7);
        tj_Translator$Operator_LESS_THAN_EQUAL = tj_Translator$Operator__init_($rt_s(186), 8);
        tj_Translator$Operator_GREATER_THAN_EQUAL = tj_Translator$Operator__init_($rt_s(200), 9);
        tj_Translator$Operator_REMOVEALLFROM = tj_Translator$Operator__init_($rt_s(180), 10);
        tj_Translator$Operator_REMOVEAT = tj_Translator$Operator__init_($rt_s(175), 11);
        var$1 = tj_Translator$Operator__init_($rt_s(177), 12);
        tj_Translator$Operator_REMOVEFROM = var$1;
        tj_Translator$Operator_$VALUES = $rt_createArrayFromData(tj_Translator$Operator, [tj_Translator$Operator_PLUS, tj_Translator$Operator_MINUS, tj_Translator$Operator_DIVIDE, tj_Translator$Operator_MULTIPLY, tj_Translator$Operator_EQUAL, tj_Translator$Operator_NOT_EQUAL, tj_Translator$Operator_LESS_THAN, tj_Translator$Operator_GREATER_THAN, tj_Translator$Operator_LESS_THAN_EQUAL, tj_Translator$Operator_GREATER_THAN_EQUAL, tj_Translator$Operator_REMOVEALLFROM, tj_Translator$Operator_REMOVEAT, var$1]);
    }
    var tj_JavaishVal = $rt_classWithoutFields(0);
    function tj_JavaishFloat() {
        var a = this; jl_Object.call(a);
        a.$value30 = 0.0;
        a.$type3 = null;
    }
    function tj_JavaishFloat__init_(var_0) {
        var var_1 = new tj_JavaishFloat();
        tj_JavaishFloat__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishFloat_getValue($this) {
        var var$1, var$2;
        var$1 = $this.$value30;
        var$2 = new jl_Float;
        var$2.$value29 = var$1;
        return var$2;
    }
    function tj_JavaishFloat__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type3 = tj_JavaishVal$JavaishType_FLOAT;
        $this.$value30 = $value;
    }
    function tj_JavaishFloat_getType($this) {
        return $this.$type3;
    }
    function tj_JavaishFloat_typeString($this) {
        return $rt_s(86);
    }
    function tj_JavaishFloat_getValue0($this) {
        return tj_JavaishFloat_getValue($this);
    }
    function tj_JavaishInt() {
        var a = this; jl_Object.call(a);
        a.$value31 = 0;
        a.$type4 = null;
    }
    function tj_JavaishInt__init_0(var_0) {
        var var_1 = new tj_JavaishInt();
        tj_JavaishInt__init_(var_1, var_0);
        return var_1;
    }
    function tj_JavaishInt_getValue($this) {
        var var$1, var$2, var$3, var$4;
        var$1 = $this.$value31;
        if (var$1 >= (-128) && var$1 <= 127) {
            a: {
                if (jl_Integer_integerCache === null) {
                    jl_Integer_integerCache = $rt_createArray(jl_Integer, 256);
                    var$2 = 0;
                    while (true) {
                        var$3 = jl_Integer_integerCache.data;
                        if (var$2 >= var$3.length)
                            break a;
                        var$3[var$2] = jl_Integer__init_(var$2 - 128 | 0);
                        var$2 = var$2 + 1 | 0;
                    }
                }
            }
            var$4 = jl_Integer_integerCache.data[var$1 + 128 | 0];
        } else
            var$4 = jl_Integer__init_(var$1);
        return var$4;
    }
    function tj_JavaishInt__init_($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type4 = tj_JavaishVal$JavaishType_INT;
        $this.$value31 = $value;
    }
    function tj_JavaishInt_getType($this) {
        return $this.$type4;
    }
    function tj_JavaishInt_typeString($this) {
        return $rt_s(84);
    }
    function tj_JavaishInt_getValue0($this) {
        return tj_JavaishInt_getValue($this);
    }
    function tj_JavaishListVal() {
        var a = this; jl_Object.call(a);
        a.$list = null;
        a.$type5 = null;
    }
    function tj_JavaishListVal__init_(var_0) {
        var var_1 = new tj_JavaishListVal();
        tj_JavaishListVal__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishListVal_getValue($this) {
        return $this.$list;
    }
    function tj_JavaishListVal__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type5 = tj_JavaishVal$JavaishType_LIST;
        $this.$list = $value;
    }
    function tj_JavaishListVal_getType($this) {
        return $this.$type5;
    }
    function tj_JavaishListVal_typeString($this) {
        return $rt_s(101);
    }
    function tj_JavaishListVal_getValue0($this) {
        return $this.$list;
    }
    function tj_JavaishString() {
        var a = this; jl_Object.call(a);
        a.$value32 = null;
        a.$type6 = null;
    }
    function tj_JavaishString__init_0(var_0) {
        var var_1 = new tj_JavaishString();
        tj_JavaishString__init_(var_1, var_0);
        return var_1;
    }
    function tj_JavaishString_getValue($this) {
        return $this.$value32;
    }
    function tj_JavaishString__init_($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type6 = tj_JavaishVal$JavaishType_STRING;
        $this.$value32 = $value;
    }
    function tj_JavaishString_getType($this) {
        return $this.$type6;
    }
    function tj_JavaishString_typeString($this) {
        return $rt_s(31);
    }
    function tj_JavaishString_getValue0($this) {
        return $this.$value32;
    }
    function tj_JavaishBoolean() {
        var a = this; jl_Object.call(a);
        a.$value23 = null;
        a.$type7 = null;
    }
    function tj_JavaishBoolean__init_(var_0) {
        var var_1 = new tj_JavaishBoolean();
        tj_JavaishBoolean__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishBoolean_getValue($this) {
        return $this.$value23;
    }
    function tj_JavaishBoolean__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type7 = tj_JavaishVal$JavaishType_BOOLEAN;
        $this.$value23 = $value;
    }
    function tj_JavaishBoolean_getType($this) {
        return $this.$type7;
    }
    function tj_JavaishBoolean_typeString($this) {
        return $rt_s(164);
    }
    function tj_JavaishBoolean_getValue0($this) {
        return $this.$value23;
    }
    var tj_JavaishList = $rt_classWithoutFields(0);
    function tj_JavaishStringList() {
        var a = this; jl_Object.call(a);
        a.$value9 = null;
        a.$type8 = null;
    }
    function tj_JavaishStringList__init_(var_0) {
        var var_1 = new tj_JavaishStringList();
        tj_JavaishStringList__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishStringList_getList($this) {
        return $this.$value9;
    }
    function tj_JavaishStringList__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type8 = tj_JavaishVal$JavaishType_STRINGLIST;
        $this.$value9 = $value;
    }
    function tj_JavaishStringList_getType($this) {
        return $this.$type8;
    }
    function tj_JavaishStringList_typeString($this) {
        return $rt_s(88);
    }
    function tj_JavaishStringList_getInnerType($this) {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_STRING;
    }
    function tj_JavaishStringList_listString($this) {
        var $listString, var$2, $i, var$4;
        $listString = $rt_s(283);
        var$2 = ju_AbstractList_iterator($this.$value9);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $i = jl_String_valueOf((ju_AbstractList$1_next(var$2)).$type6);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $listString), $i), 44);
            $listString = jl_AbstractStringBuilder_toString(var$4);
        }
        $listString = jl_String_substring($listString, 0, jl_String_length($listString) - 1 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $listString), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_JavaishStringList_getLength($this) {
        return $this.$value9.$size0;
    }
    function tj_JavaishStringList_getValue($this, var$1) {
        return ju_ArrayList_get($this.$value9, var$1);
    }
    function tj_JavaishBooleanList() {
        var a = this; jl_Object.call(a);
        a.$value7 = null;
        a.$type9 = null;
    }
    function tj_JavaishBooleanList__init_(var_0) {
        var var_1 = new tj_JavaishBooleanList();
        tj_JavaishBooleanList__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishBooleanList_getList($this) {
        return $this.$value7;
    }
    function tj_JavaishBooleanList__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type9 = tj_JavaishVal$JavaishType_BOOLEANLIST;
        $this.$value7 = $value;
    }
    function tj_JavaishBooleanList_getType($this) {
        return $this.$type9;
    }
    function tj_JavaishBooleanList_typeString($this) {
        return $rt_s(287);
    }
    function tj_JavaishBooleanList_getInnerType($this) {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_BOOLEAN;
    }
    function tj_JavaishBooleanList_listString($this) {
        var $listString, var$2, $i, var$4;
        $listString = $rt_s(283);
        var$2 = ju_AbstractList_iterator($this.$value7);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $i = jl_String_valueOf((ju_AbstractList$1_next(var$2)).$type7);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $listString), $i), 44);
            $listString = jl_AbstractStringBuilder_toString(var$4);
        }
        $listString = jl_String_substring($listString, 0, jl_String_length($listString) - 1 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $listString), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_JavaishBooleanList_getLength($this) {
        return $this.$value7.$size0;
    }
    function tj_JavaishBooleanList_getValue($this, var$1) {
        return ju_ArrayList_get($this.$value7, var$1);
    }
    function tj_JavaishIntList() {
        var a = this; jl_Object.call(a);
        a.$value11 = null;
        a.$type10 = null;
    }
    function tj_JavaishIntList__init_(var_0) {
        var var_1 = new tj_JavaishIntList();
        tj_JavaishIntList__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishIntList_getList($this) {
        return $this.$value11;
    }
    function tj_JavaishIntList__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type10 = tj_JavaishVal$JavaishType_INTLIST;
        $this.$value11 = $value;
    }
    function tj_JavaishIntList_getType($this) {
        return $this.$type10;
    }
    function tj_JavaishIntList_typeString($this) {
        return $rt_s(87);
    }
    function tj_JavaishIntList_getInnerType($this) {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_INT;
    }
    function tj_JavaishIntList_listString($this) {
        var $listString, var$2, $i, var$4;
        $listString = $rt_s(283);
        var$2 = ju_AbstractList_iterator($this.$value11);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $i = jl_String_valueOf((ju_AbstractList$1_next(var$2)).$type4);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $listString), $i), 44);
            $listString = jl_AbstractStringBuilder_toString(var$4);
        }
        $listString = jl_String_substring($listString, 0, jl_String_length($listString) - 1 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $listString), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_JavaishIntList_getLength($this) {
        return $this.$value11.$size0;
    }
    function tj_JavaishIntList_getValue($this, var$1) {
        return ju_ArrayList_get($this.$value11, var$1);
    }
    function tj_JavaishFloatList() {
        var a = this; jl_Object.call(a);
        a.$value5 = null;
        a.$type11 = null;
    }
    function tj_JavaishFloatList__init_(var_0) {
        var var_1 = new tj_JavaishFloatList();
        tj_JavaishFloatList__init_0(var_1, var_0);
        return var_1;
    }
    function tj_JavaishFloatList_getList($this) {
        return $this.$value5;
    }
    function tj_JavaishFloatList__init_0($this, $value) {
        tj_JavaishVal$JavaishType_$callClinit();
        $this.$type11 = tj_JavaishVal$JavaishType_FLOATLIST;
        $this.$value5 = $value;
    }
    function tj_JavaishFloatList_getType($this) {
        return $this.$type11;
    }
    function tj_JavaishFloatList_typeString($this) {
        return $rt_s(83);
    }
    function tj_JavaishFloatList_getInnerType($this) {
        tj_JavaishVal$JavaishType_$callClinit();
        return tj_JavaishVal$JavaishType_FLOAT;
    }
    function tj_JavaishFloatList_listString($this) {
        var $listString, var$2, $i, var$4;
        $listString = $rt_s(283);
        var$2 = ju_AbstractList_iterator($this.$value5);
        while (ju_AbstractList$1_hasNext(var$2)) {
            $i = jl_String_valueOf((ju_AbstractList$1_next(var$2)).$type3);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $listString), $i), 44);
            $listString = jl_AbstractStringBuilder_toString(var$4);
        }
        $listString = jl_String_substring($listString, 0, jl_String_length($listString) - 1 | 0);
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $listString), 93);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function tj_JavaishFloatList_getLength($this) {
        return $this.$value5.$size0;
    }
    function tj_JavaishFloatList_getValue($this, var$1) {
        return ju_ArrayList_get($this.$value5, var$1);
    }
    var tj_Interpreter$Operator = $rt_classWithoutFields(jl_Enum);
    var tj_Interpreter$Operator_PLUS = null;
    var tj_Interpreter$Operator_MINUS = null;
    var tj_Interpreter$Operator_DIVIDE = null;
    var tj_Interpreter$Operator_MULTIPLY = null;
    var tj_Interpreter$Operator_EQUAL = null;
    var tj_Interpreter$Operator_NOT_EQUAL = null;
    var tj_Interpreter$Operator_LESS_THAN = null;
    var tj_Interpreter$Operator_GREATER_THAN = null;
    var tj_Interpreter$Operator_LESS_THAN_EQUAL = null;
    var tj_Interpreter$Operator_GREATER_THAN_EQUAL = null;
    var tj_Interpreter$Operator_REMOVEALLFROM = null;
    var tj_Interpreter$Operator_REMOVEAT = null;
    var tj_Interpreter$Operator_REMOVEFROM = null;
    var tj_Interpreter$Operator_$VALUES = null;
    function tj_Interpreter$Operator_$callClinit() {
        tj_Interpreter$Operator_$callClinit = $rt_eraseClinit(tj_Interpreter$Operator);
        tj_Interpreter$Operator__clinit_();
    }
    function tj_Interpreter$Operator__init_(var_0, var_1) {
        var var_2 = new tj_Interpreter$Operator();
        tj_Interpreter$Operator__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function tj_Interpreter$Operator__init_0($this, var$1, var$2) {
        tj_Interpreter$Operator_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
    }
    function tj_Interpreter$Operator__clinit_() {
        var var$1;
        tj_Interpreter$Operator_PLUS = tj_Interpreter$Operator__init_($rt_s(197), 0);
        tj_Interpreter$Operator_MINUS = tj_Interpreter$Operator__init_($rt_s(199), 1);
        tj_Interpreter$Operator_DIVIDE = tj_Interpreter$Operator__init_($rt_s(206), 2);
        tj_Interpreter$Operator_MULTIPLY = tj_Interpreter$Operator__init_($rt_s(204), 3);
        tj_Interpreter$Operator_EQUAL = tj_Interpreter$Operator__init_($rt_s(198), 4);
        tj_Interpreter$Operator_NOT_EQUAL = tj_Interpreter$Operator__init_($rt_s(203), 5);
        tj_Interpreter$Operator_LESS_THAN = tj_Interpreter$Operator__init_($rt_s(188), 6);
        tj_Interpreter$Operator_GREATER_THAN = tj_Interpreter$Operator__init_($rt_s(202), 7);
        tj_Interpreter$Operator_LESS_THAN_EQUAL = tj_Interpreter$Operator__init_($rt_s(186), 8);
        tj_Interpreter$Operator_GREATER_THAN_EQUAL = tj_Interpreter$Operator__init_($rt_s(200), 9);
        tj_Interpreter$Operator_REMOVEALLFROM = tj_Interpreter$Operator__init_($rt_s(180), 10);
        tj_Interpreter$Operator_REMOVEAT = tj_Interpreter$Operator__init_($rt_s(175), 11);
        var$1 = tj_Interpreter$Operator__init_($rt_s(177), 12);
        tj_Interpreter$Operator_REMOVEFROM = var$1;
        tj_Interpreter$Operator_$VALUES = $rt_createArrayFromData(tj_Interpreter$Operator, [tj_Interpreter$Operator_PLUS, tj_Interpreter$Operator_MINUS, tj_Interpreter$Operator_DIVIDE, tj_Interpreter$Operator_MULTIPLY, tj_Interpreter$Operator_EQUAL, tj_Interpreter$Operator_NOT_EQUAL, tj_Interpreter$Operator_LESS_THAN, tj_Interpreter$Operator_GREATER_THAN, tj_Interpreter$Operator_LESS_THAN_EQUAL, tj_Interpreter$Operator_GREATER_THAN_EQUAL, tj_Interpreter$Operator_REMOVEALLFROM, tj_Interpreter$Operator_REMOVEAT,
        var$1]);
    }
    function juc_TimeUnit() {
        jl_Enum.call(this);
        this.$nanoseconds = Long_ZERO;
    }
    var juc_TimeUnit_NANOSECONDS = null;
    var juc_TimeUnit_MICROSECONDS = null;
    var juc_TimeUnit_MILLISECONDS = null;
    var juc_TimeUnit_SECONDS = null;
    var juc_TimeUnit_MINUTES = null;
    var juc_TimeUnit_HOURS = null;
    var juc_TimeUnit_DAYS = null;
    var juc_TimeUnit_$VALUES = null;
    function juc_TimeUnit_$callClinit() {
        juc_TimeUnit_$callClinit = $rt_eraseClinit(juc_TimeUnit);
        juc_TimeUnit__clinit_();
    }
    function juc_TimeUnit__init_(var_0, var_1, var_2) {
        var var_3 = new juc_TimeUnit();
        juc_TimeUnit__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function juc_TimeUnit__init_0($this, var$1, var$2, $nanoseconds) {
        juc_TimeUnit_$callClinit();
        jl_Enum__init_($this, var$1, var$2);
        $this.$nanoseconds = $nanoseconds;
    }
    function juc_TimeUnit_sleep($this, $timeout) {
        var var$2, var$3, var$4, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$timeout = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            juc_TimeUnit_$callClinit();
            var$2 = juc_TimeUnit_MILLISECONDS;
            var$3 = $this.$nanoseconds;
            var$4 = var$2.$nanoseconds;
            $timeout = Long_ge(var$3, var$4) ? Long_mul($timeout, Long_div(var$3, var$4)) : Long_div($timeout, Long_div(var$4, var$3));
            $ptr = 1;
        case 1:
            jl_Thread_sleep($timeout);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $timeout, var$2, var$3, var$4, $ptr);
    }
    function juc_TimeUnit__clinit_() {
        var var$1;
        juc_TimeUnit_NANOSECONDS = juc_TimeUnit__init_($rt_s(288), 0, Long_fromInt(1));
        juc_TimeUnit_MICROSECONDS = juc_TimeUnit__init_($rt_s(289), 1, Long_fromInt(1000));
        juc_TimeUnit_MILLISECONDS = juc_TimeUnit__init_($rt_s(290), 2, Long_fromInt(1000000));
        juc_TimeUnit_SECONDS = juc_TimeUnit__init_($rt_s(291), 3, Long_fromInt(1000000000));
        juc_TimeUnit_MINUTES = juc_TimeUnit__init_($rt_s(292), 4, Long_create(4165425152, 13));
        juc_TimeUnit_HOURS = juc_TimeUnit__init_($rt_s(293), 5, Long_create(817405952, 838));
        var$1 = juc_TimeUnit__init_($rt_s(294), 6, Long_create(2437873664, 20116));
        juc_TimeUnit_DAYS = var$1;
        juc_TimeUnit_$VALUES = $rt_createArrayFromData(juc_TimeUnit, [juc_TimeUnit_NANOSECONDS, juc_TimeUnit_MICROSECONDS, juc_TimeUnit_MILLISECONDS, juc_TimeUnit_SECONDS, juc_TimeUnit_MINUTES, juc_TimeUnit_HOURS, var$1]);
    }
    var jl_InterruptedException = $rt_classWithoutFields(jl_Exception);
    var jur_NonCapFSet = $rt_classWithoutFields(jur_FSet);
    function jur_NonCapFSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $gr;
        $gr = $this.$groupIndex;
        jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_NonCapFSet_hasConsumed($this, $mr) {
        return 0;
    }
    var jur_AheadFSet = $rt_classWithoutFields(jur_FSet);
    function jur_AheadFSet_matches($this, $stringIndex, $testString, $matchResult) {
        return $stringIndex;
    }
    var jur_BehindFSet = $rt_classWithoutFields(jur_FSet);
    function jur_BehindFSet_matches($this, $stringIndex, $testString, $matchResult) {
        if (jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex) != $stringIndex)
            $stringIndex = (-1);
        return $stringIndex;
    }
    function jur_AtomicFSet() {
        jur_FSet.call(this);
        this.$index3 = 0;
    }
    function jur_AtomicFSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $gr;
        $gr = $this.$groupIndex;
        jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
        $this.$index3 = $stringIndex;
        return $stringIndex;
    }
    function jur_AtomicFSet_hasConsumed($this, $mr) {
        return 0;
    }
    var jur_FinalSet = $rt_classWithoutFields(jur_FSet);
    function jur_FinalSet_matches($this, $stringIndex, $testString, $matchResult) {
        if ($matchResult.$mode1 != 1 && $stringIndex != $matchResult.$rightBound0)
            return (-1);
        $matchResult.$valid = 1;
        jur_MatchResultImpl_setEnd($matchResult, 0, $stringIndex);
        return $stringIndex;
    }
    function jur_LeafSet() {
        jur_AbstractSet.call(this);
        this.$charCount = 0;
    }
    function jur_LeafSet__init_($this) {
        jur_AbstractSet__init_($this);
        $this.$charCount = 1;
    }
    function jur_LeafSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        if (($stringIndex + $this.$charCount0() | 0) > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$accepts($stringIndex, $testString);
        if ($shift < 0)
            return (-1);
        return $this.$next2.$matches($stringIndex + $shift | 0, $testString, $matchResult);
    }
    function jur_LeafSet_charCount($this) {
        return $this.$charCount;
    }
    function jur_LeafSet_hasConsumed($this, $mr) {
        return 1;
    }
    var jur_EmptySet = $rt_classWithoutFields(jur_LeafSet);
    function jur_EmptySet__init_(var_0) {
        var var_1 = new jur_EmptySet();
        jur_EmptySet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_EmptySet__init_0($this, $next) {
        jur_AbstractSet__init_0($this, $next);
        $this.$charCount = 1;
        $this.$type2 = 1;
        $this.$charCount = 0;
    }
    function jur_EmptySet_accepts($this, $stringIndex, $testString) {
        return 0;
    }
    function jur_EmptySet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $startStr, $high;
        $strLength = $matchResult.$rightBound0;
        $startStr = $matchResult.$leftBound0;
        while (true) {
            $high = $rt_compare($stringIndex, $strLength);
            if ($high > 0)
                return (-1);
            if ($high < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, $stringIndex)) && $stringIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
                $stringIndex = $stringIndex + 1 | 0;
                continue;
            }
            if ($this.$next2.$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $stringIndex = $stringIndex + 1 | 0;
        }
        return $stringIndex;
    }
    function jur_EmptySet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        var $strLength, $startStr;
        $strLength = $matchResult.$rightBound0;
        $startStr = $matchResult.$leftBound0;
        while (true) {
            if ($startSearch < $stringIndex)
                return (-1);
            if ($startSearch < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testString, $startSearch)) && $startSearch > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $startSearch - 1 | 0))) {
                $startSearch = $startSearch + (-1) | 0;
                continue;
            }
            if ($this.$next2.$matches($startSearch, $testString, $matchResult) >= 0)
                break;
            $startSearch = $startSearch + (-1) | 0;
        }
        return $startSearch;
    }
    function jur_EmptySet_hasConsumed($this, $mr) {
        return 0;
    }
    function jur_JointSet() {
        var a = this; jur_AbstractSet.call(a);
        a.$children = null;
        a.$fSet = null;
        a.$groupIndex0 = 0;
    }
    function jur_JointSet__init_0(var_0, var_1) {
        var var_2 = new jur_JointSet();
        jur_JointSet__init_(var_2, var_0, var_1);
        return var_2;
    }
    function jur_JointSet__init_($this, $children, $fSet) {
        jur_AbstractSet__init_($this);
        $this.$children = $children;
        $this.$fSet = $fSet;
        $this.$groupIndex0 = $fSet.$groupIndex;
    }
    function jur_JointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i, $shift;
        if ($this.$children === null)
            return (-1);
        $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size) {
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $start);
                return (-1);
            }
            $shift = (ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return $shift;
    }
    function jur_JointSet_setNext($this, $next) {
        $this.$fSet.$next2 = $next;
    }
    function jur_JointSet_first($this, $set) {
        var $i;
        a: {
            $i = $this.$children;
            if ($i !== null) {
                $i = ju_AbstractList_iterator($i);
                while (true) {
                    if (!ju_AbstractList$1_hasNext($i))
                        break a;
                    if (!(ju_AbstractList$1_next($i)).$first($set))
                        continue;
                    else
                        return 1;
                }
            }
        }
        return 0;
    }
    function jur_JointSet_hasConsumed($this, $matchResult) {
        return jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0) >= 0 && jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0) == jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0) ? 0 : 1;
    }
    function jur_JointSet_processSecondPass($this) {
        var $child, $childrenSize, $i, $set, var$5, var$6, var$7, var$8, var$9;
        $this.$isSecondPassVisited = 1;
        $child = $this.$fSet;
        if ($child !== null && !$child.$isSecondPassVisited)
            jur_AbstractSet_processSecondPass($child);
        a: {
            $child = $this.$children;
            if ($child !== null) {
                $childrenSize = $child.$size0;
                $i = 0;
                while (true) {
                    if ($i >= $childrenSize)
                        break a;
                    $child = ju_ArrayList_get($this.$children, $i);
                    $set = $child.$processBackRefReplacement();
                    if ($set === null)
                        $set = $child;
                    else {
                        $child.$isSecondPassVisited = 1;
                        ju_ArrayList_remove($this.$children, $i);
                        var$5 = $this.$children;
                        if ($i < 0)
                            break;
                        var$6 = var$5.$size0;
                        if ($i > var$6)
                            break;
                        ju_ArrayList_ensureCapacity(var$5, var$6 + 1 | 0);
                        var$7 = var$5.$size0;
                        var$8 = var$7;
                        while (var$8 > $i) {
                            var$9 = var$5.$array.data;
                            var$9[var$8] = var$9[var$8 - 1 | 0];
                            var$8 = var$8 + (-1) | 0;
                        }
                        var$5.$array.data[$i] = $set;
                        var$5.$size0 = var$7 + 1 | 0;
                        var$5.$modCount0 = var$5.$modCount0 + 1 | 0;
                    }
                    if (!$set.$isSecondPassVisited)
                        $set.$processSecondPass();
                    $i = $i + 1 | 0;
                }
                $child = new jl_IndexOutOfBoundsException;
                jl_Exception__init_($child);
                $rt_throw($child);
            }
        }
        if ($this.$next2 !== null)
            jur_AbstractSet_processSecondPass($this);
    }
    var jur_NonCapJointSet = $rt_classWithoutFields(jur_JointSet);
    function jur_NonCapJointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i, $shift;
        $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $start);
                return (-1);
            }
            $shift = (ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return $shift;
    }
    function jur_NonCapJointSet_hasConsumed($this, $matchResult) {
        return !jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0) ? 0 : 1;
    }
    var jur_AtomicJointSet = $rt_classWithoutFields(jur_NonCapJointSet);
    function jur_AtomicJointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i;
        $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children.$size0;
        $i = 0;
        while ($i < $size) {
            if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                return $this.$next2.$matches($this.$fSet.$index3, $testString, $matchResult);
            $i = $i + 1 | 0;
        }
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $start);
        return (-1);
    }
    function jur_AtomicJointSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    var jur_PositiveLookAhead = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_PositiveLookAhead_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children.$size0;
        $i = 0;
        while ($i < $size) {
            if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                return $this.$next2.$matches($stringIndex, $testString, $matchResult);
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_PositiveLookAhead_hasConsumed($this, $matchResult) {
        return 0;
    }
    var jur_NegativeLookAhead = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_NegativeLookAhead_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size)
                return $this.$next2.$matches($stringIndex, $testString, $matchResult);
            if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_NegativeLookAhead_hasConsumed($this, $matchResult) {
        return 0;
    }
    var jur_PositiveLookBehind = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_PositiveLookBehind_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $leftBound, $shift, $i;
        $size = $this.$children.$size0;
        $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound0;
        a: {
            $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
                $i = 0;
                while (true) {
                    if ($i >= $size)
                        break a;
                    if ((ju_ArrayList_get($this.$children, $i)).$findBack($leftBound, $stringIndex, $testString, $matchResult) >= 0) {
                        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, (-1));
                        return $shift;
                    }
                    $i = $i + 1 | 0;
                }
            }
        }
        return (-1);
    }
    function jur_PositiveLookBehind_hasConsumed($this, $matchResult) {
        return 0;
    }
    var jur_NegativeLookBehind = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_NegativeLookBehind_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children.$size0;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $i = 0;
        while (true) {
            if ($i >= $size)
                return $this.$next2.$matches($stringIndex, $testString, $matchResult);
            if ((ju_ArrayList_get($this.$children, $i)).$findBack(0, $stringIndex, $testString, $matchResult) >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_NegativeLookBehind_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_SingleSet() {
        jur_JointSet.call(this);
        this.$kid = null;
    }
    function jur_SingleSet__init_(var_0, var_1) {
        var var_2 = new jur_SingleSet();
        jur_SingleSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_SingleSet__init_0($this, $child, $fSet) {
        jur_AbstractSet__init_($this);
        $this.$kid = $child;
        $this.$fSet = $fSet;
        $this.$groupIndex0 = $fSet.$groupIndex;
    }
    function jur_SingleSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $shift;
        $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $stringIndex);
        $shift = $this.$kid.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            return $shift;
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $start);
        return (-1);
    }
    function jur_SingleSet_find($this, $stringIndex, $testString, $matchResult) {
        var $res;
        $res = $this.$kid.$find0($stringIndex, $testString, $matchResult);
        if ($res >= 0)
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $res);
        return $res;
    }
    function jur_SingleSet_findBack($this, $stringIndex, $lastIndex, $testString, $matchResult) {
        var $res;
        $res = $this.$kid.$findBack($stringIndex, $lastIndex, $testString, $matchResult);
        if ($res >= 0)
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $res);
        return $res;
    }
    function jur_SingleSet_first($this, $set) {
        return $this.$kid.$first($set);
    }
    function jur_SingleSet_processBackRefReplacement($this) {
        var $set;
        $set = new jur_BackReferencedSingleSet;
        jur_SingleSet__init_0($set, $this.$kid, $this.$fSet);
        $this.$next2 = $set;
        return $set;
    }
    function jur_SingleSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$fSet;
        if ($set !== null && !$set.$isSecondPassVisited)
            jur_AbstractSet_processSecondPass($set);
        $set = $this.$kid;
        if ($set !== null && !$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$kid.$isSecondPassVisited = 1;
                $this.$kid = $set;
            }
            $this.$kid.$processSecondPass();
        }
    }
    var jl_CloneNotSupportedException = $rt_classWithoutFields(jl_Exception);
    var jl_NumberFormatException = $rt_classWithoutFields(jl_IllegalArgumentException);
    var otcit_FloatSynthesizer = $rt_classWithoutFields();
    var otcit_FloatSynthesizer_mantissa10Table = null;
    var otcit_FloatSynthesizer_exp10Table = null;
    function otcit_FloatSynthesizer_synthesizeFloat($mantissa, $exp, $negative) {
        var $indexInTable, var$5, $binMantissa, $binExp, $binMantissaShift, $iee754;
        $indexInTable = 50 + $exp | 0;
        if ($mantissa) {
            var$5 = otcit_FloatSynthesizer_mantissa10Table.data;
            if ($indexInTable <= var$5.length && $indexInTable >= 0) {
                $binMantissa = otcit_FloatAnalyzer_mulAndShiftRight($mantissa, var$5[$indexInTable], 0);
                $binExp = otcit_FloatSynthesizer_exp10Table.data[$indexInTable] - 1 | 0;
                $binMantissaShift = (32 - jl_Integer_numberOfLeadingZeros($binMantissa) | 0) - 30 | 0;
                $mantissa = $binMantissaShift >= 0 ? $binMantissa >>> $binMantissaShift | 0 : $binMantissa << ( -$binMantissaShift | 0);
                $exp = $binExp + $binMantissaShift | 0;
                if ($exp >= 255)
                    return !$negative ? Infinity : (-Infinity);
                $mantissa = $mantissa + 32 | 0;
                if ($mantissa & (-1073741824)) {
                    $mantissa = $mantissa >>> 1 | 0;
                    $exp = $exp + 1 | 0;
                }
                if ($exp <= 0) {
                    $mantissa = $mantissa >> jl_Math_min(( -$exp | 0) + 1 | 0, 32);
                    $exp = 0;
                }
                $iee754 = ($mantissa >>> 6 | 0) & 8388607 | $exp << 23;
                if ($negative)
                    $iee754 = $iee754 ^ (-2147483648);
                return $rt_intBitsToFloat($iee754);
            }
        }
        return $rt_intBitsToFloat(!$negative ? 0 : (-2147483648));
    }
    function otcit_FloatSynthesizer__clinit_() {
        otcit_FloatSynthesizer_mantissa10Table = $rt_createIntArrayFromData([(-1598972629), (-924973963), (-82475629), (-1662160004), (-1003958181), (-181205903), (-1723866425), (-1081091207), (-277622185), (-1784126602), (-1156416428), (-371778711), (-1842974431), (-1229976214), (-463728444), (-1900443013), (-1301811943), (-553523104), (-1956564676), (-1371964021), (-641213203), (-2011370988), (-1440471911), (-726848064), (-2064892776), (-1507374146), (-810475859), (-2117160148), (-1572708361), (-892143627),
        (-41437709), (-1636511304), (-971897307), (-141129809), (-1698818867), (-1049781759), (-238485375), (-1759666096), (-1125840795), (-333559170), (-1819087217), (-1200117198), (-426404673), (-1877115657), (-1272652747), (-517074110), (-1933784055), (-1343488244), (-605618481), (-1989124287), (-1412663534), (-692087594), (-2043167482), (-1480217529), (-776530087), (-2095944040), (-1546188227), (-858993459), (-2147483648), (-1610612736), (-939524096), (-100663296), (-1673527296), (-1018167296), (-198967296),
        (-1734967296), (-1094967296), (-294967296), (-1794967296), (-1169967296), (-388717296), (-1853561046), (-1243209483), (-480270030), (-1910781505), (-1314735057), (-569676998), (-1966660859), (-1384584250), (-656988489), (-2021230542), (-1452796353), (-742253617), (-2074521247), (-1519409734), (-825520344), (-2126562951), (-1584461865), (-906835507), (-59802560), (-1647989336), (-986244846), (-159064233), (-1710027882), (-1063793028), (-255999461), (-1770612399), (-1139523675), (-350662770), (-1829776967)]);
        otcit_FloatSynthesizer_exp10Table = $rt_createIntArrayFromData([(-35), (-32), (-29), (-25), (-22), (-19), (-15), (-12), (-9), (-5), (-2), 1, 5, 8, 11, 15, 18, 21, 25, 28, 31, 35, 38, 41, 45, 48, 51, 55, 58, 61, 64, 68, 71, 74, 78, 81, 84, 88, 91, 94, 98, 101, 104, 108, 111, 114, 118, 121, 124, 128, 131, 134, 138, 141, 144, 148, 151, 154, 158, 161, 164, 167, 171, 174, 177, 181, 184, 187, 191, 194, 197, 201, 204, 207, 211, 214, 217, 221, 224, 227, 231, 234, 237, 241, 244, 247, 251, 254, 257, 260, 264,
        267, 270, 274, 277, 280, 284, 287, 290, 294]);
    }
    var jl_Math = $rt_classWithoutFields();
    function jl_Math_round($a) {
        return $a + jl_Math_sign($a) * 0.5 | 0;
    }
    function jl_Math_min($a, $b) {
        if ($a < $b)
            $b = $a;
        return $b;
    }
    function jl_Math_max($a, $b) {
        if ($a > $b)
            $b = $a;
        return $b;
    }
    function jl_Math_sign(var$1) {
        return Math.sign(var$1);
    }
    var jur_SpecialToken = $rt_classWithoutFields();
    function jur_AbstractCharClass() {
        var a = this; jur_SpecialToken.call(a);
        a.$alt0 = 0;
        a.$altSurrogates = 0;
        a.$lowHighSurrogates = null;
        a.$charClassWithoutSurrogates = null;
        a.$charClassWithSurrogates = null;
        a.$mayContainSupplCodepoints = 0;
    }
    var jur_AbstractCharClass_charClasses = null;
    function jur_AbstractCharClass_$callClinit() {
        jur_AbstractCharClass_$callClinit = $rt_eraseClinit(jur_AbstractCharClass);
        jur_AbstractCharClass__clinit_();
    }
    function jur_AbstractCharClass__init_($this) {
        var var$1;
        jur_AbstractCharClass_$callClinit();
        var$1 = new ju_BitSet;
        var$1.$data0 = $rt_createIntArray(64);
        $this.$lowHighSurrogates = var$1;
    }
    function jur_AbstractCharClass_getBits($this) {
        return null;
    }
    function jur_AbstractCharClass_getLowHighSurrogates($this) {
        return $this.$lowHighSurrogates;
    }
    function jur_AbstractCharClass_hasLowHighSurrogates($this) {
        var var$1, var$2, var$3, var$4, var$5;
        if (!$this.$altSurrogates)
            var$1 = ju_BitSet_nextSetBit($this.$lowHighSurrogates, 0) >= 2048 ? 0 : 1;
        else {
            a: {
                var$2 = $this.$lowHighSurrogates;
                var$1 = 0;
                var$3 = var$2.$length2;
                if (var$1 < var$3) {
                    var$4 = var$2.$data0.data;
                    var$5 = (var$4[0] ^ (-1)) >>> 0 | 0;
                    if (var$5)
                        var$1 = jl_Integer_numberOfTrailingZeros(var$5) + var$1 | 0;
                    else {
                        var$1 = (var$3 + 31 | 0) / 32 | 0;
                        var$5 = 1;
                        while (var$5 < var$1) {
                            if (var$4[var$5] != (-1)) {
                                var$1 = (var$5 * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$4[var$5] ^ (-1)) | 0;
                                break a;
                            }
                            var$5 = var$5 + 1 | 0;
                        }
                        var$1 = var$3;
                    }
                }
            }
            var$1 = var$1 >= 2048 ? 0 : 1;
        }
        return var$1;
    }
    function jur_AbstractCharClass_mayContainSupplCodepoints($this) {
        return $this.$mayContainSupplCodepoints;
    }
    function jur_AbstractCharClass_getInstance($this) {
        return $this;
    }
    function jur_AbstractCharClass_getSurrogates($this) {
        var $lHS, var$2;
        if ($this.$charClassWithSurrogates === null) {
            $lHS = $this.$getLowHighSurrogates();
            var$2 = new jur_AbstractCharClass$1;
            var$2.$this$00 = $this;
            var$2.$val$lHS = $lHS;
            jur_AbstractCharClass__init_(var$2);
            $this.$charClassWithSurrogates = var$2;
            jur_AbstractCharClass_setNegative(var$2, $this.$altSurrogates);
        }
        return $this.$charClassWithSurrogates;
    }
    function jur_AbstractCharClass_getWithoutSurrogates($this) {
        var $lHS, var$2;
        if ($this.$charClassWithoutSurrogates === null) {
            $lHS = $this.$getLowHighSurrogates();
            var$2 = new jur_AbstractCharClass$2;
            var$2.$this$01 = $this;
            var$2.$val$lHS0 = $lHS;
            var$2.$val$thisClass = $this;
            jur_AbstractCharClass__init_(var$2);
            $this.$charClassWithoutSurrogates = var$2;
            jur_AbstractCharClass_setNegative(var$2, $this.$alt0);
            $this.$charClassWithoutSurrogates.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints;
        }
        return $this.$charClassWithoutSurrogates;
    }
    function jur_AbstractCharClass_hasUCI($this) {
        return 0;
    }
    function jur_AbstractCharClass_setNegative($this, $value) {
        var var$2;
        var$2 = $this.$alt0;
        if (var$2 ^ $value) {
            $this.$alt0 = var$2 ? 0 : 1;
            $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
        }
        if (!$this.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        return $this;
    }
    function jur_AbstractCharClass_isNegative($this) {
        return $this.$alt0;
    }
    function jur_AbstractCharClass_intersects($cc, $ch) {
        jur_AbstractCharClass_$callClinit();
        return $cc.$contains1($ch);
    }
    function jur_AbstractCharClass_intersects0($cc1, $cc2) {
        var var$3, var$4;
        jur_AbstractCharClass_$callClinit();
        if ($cc1.$getBits() !== null && $cc2.$getBits() !== null) {
            $cc1 = $cc1.$getBits();
            $cc2 = $cc2.$getBits();
            var$3 = jl_Math_min($cc1.$data0.data.length, $cc2.$data0.data.length);
            var$4 = 0;
            a: {
                while (var$4 < var$3) {
                    if ($cc1.$data0.data[var$4] & $cc2.$data0.data[var$4]) {
                        var$3 = 1;
                        break a;
                    }
                    var$4 = var$4 + 1 | 0;
                }
                var$3 = 0;
            }
            return var$3;
        }
        return 1;
    }
    function jur_AbstractCharClass_getPredefinedClass($name, $negative) {
        var var$3, var$4, var$5;
        jur_AbstractCharClass_$callClinit();
        var$3 = 0;
        while (true) {
            jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit();
            var$4 = jur_AbstractCharClass$PredefinedCharacterClasses_contents.data;
            if (var$3 >= var$4.length) {
                var$5 = new ju_MissingResourceException;
                jl_Throwable__init_0(var$5, $rt_s(10));
                var$5.$className = $rt_s(10);
                var$5.$key0 = $name;
                $rt_throw(var$5);
            }
            var$4 = var$4[var$3].data;
            if (jl_String_equals($name, var$4[0]))
                break;
            var$3 = var$3 + 1 | 0;
        }
        return jur_AbstractCharClass$LazyCharClass_getValue(var$4[1], $negative);
    }
    function jur_AbstractCharClass__clinit_() {
        var var$1;
        var$1 = new jur_AbstractCharClass$PredefinedCharacterClasses;
        jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit();
        jur_AbstractCharClass_charClasses = var$1;
    }
    function jur_CharClass() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$ci = 0;
        a.$uci = 0;
        a.$hasUCI0 = 0;
        a.$invertedSurrogates = 0;
        a.$inverted = 0;
        a.$hideBits = 0;
        a.$bits = null;
        a.$nonBitSet = null;
    }
    function jur_CharClass__init_0() {
        var var_0 = new jur_CharClass();
        jur_CharClass__init_1(var_0);
        return var_0;
    }
    function jur_CharClass__init_(var_0, var_1) {
        var var_2 = new jur_CharClass();
        jur_CharClass__init_2(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CharClass__init_1($this) {
        jur_AbstractCharClass__init_($this);
        $this.$bits = ju_BitSet__init_();
    }
    function jur_CharClass__init_2($this, $ci, $uci) {
        jur_AbstractCharClass__init_($this);
        $this.$bits = ju_BitSet__init_();
        $this.$ci = $ci;
        $this.$uci = $uci;
    }
    function jur_CharClass_add($this, $ch) {
        a: {
            if ($this.$ci) {
                b: {
                    if (!($ch >= 97 && $ch <= 122)) {
                        if ($ch < 65)
                            break b;
                        if ($ch > 90)
                            break b;
                    }
                    if ($this.$inverted) {
                        ju_BitSet_clear($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                        break a;
                    }
                    ju_BitSet_set($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                    break a;
                }
                if ($this.$uci && $ch > 128) {
                    $this.$hasUCI0 = 1;
                    $ch = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
                }
            }
        }
        if (!(!jur_Lexer_isHighSurrogate0($ch) && !jur_Lexer_isLowSurrogate0($ch))) {
            if ($this.$invertedSurrogates)
                ju_BitSet_clear($this.$lowHighSurrogates, $ch - 55296 | 0);
            else
                ju_BitSet_set($this.$lowHighSurrogates, $ch - 55296 | 0);
        }
        if ($this.$inverted)
            ju_BitSet_clear($this.$bits, $ch);
        else
            ju_BitSet_set($this.$bits, $ch);
        if (!$this.$mayContainSupplCodepoints && jl_Character_isSupplementaryCodePoint($ch))
            $this.$mayContainSupplCodepoints = 1;
        return $this;
    }
    function jur_CharClass_add1($this, $cc) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $cc.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($this.$invertedSurrogates) {
            if (!$cc.$altSurrogates)
                ju_BitSet_andNot($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            else
                ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        } else if (!$cc.$altSurrogates)
            ju_BitSet_or($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
            $this.$invertedSurrogates = 1;
        }
        if (!$this.$hideBits && $cc.$getBits() !== null) {
            if ($this.$inverted) {
                if (!$cc.$alt0)
                    ju_BitSet_andNot($this.$bits, $cc.$getBits());
                else
                    ju_BitSet_and($this.$bits, $cc.$getBits());
            } else if (!$cc.$alt0)
                ju_BitSet_or($this.$bits, $cc.$getBits());
            else {
                ju_BitSet_xor($this.$bits, $cc.$getBits());
                ju_BitSet_and($this.$bits, $cc.$getBits());
                $this.$alt0 = $this.$alt0 ? 0 : 1;
                $this.$inverted = 1;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$5;
                    var$4.$this$02 = $this;
                    var$4.$val$curAlt = $curAlt;
                    var$4.$val$nb = $nb;
                    var$4.$val$cc = $cc;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$4;
                    var$4.$this$03 = $this;
                    var$4.$val$curAlt0 = $curAlt;
                    var$4.$val$nb0 = $nb;
                    var$4.$val$cc0 = $cc;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if ($curAlt && !$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    $nb = new jur_CharClass$1;
                    $nb.$this$04 = $this;
                    $nb.$val$cc1 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$3;
                    $nb.$this$05 = $this;
                    $nb.$val$curAlt1 = $curAlt;
                    $nb.$val$cc2 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$2;
                    $nb.$this$06 = $this;
                    $nb.$val$curAlt2 = $curAlt;
                    $nb.$val$cc3 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
        return $this;
    }
    function jur_CharClass_add0($this, $i, $end) {
        var var$3, var$4, var$5, var$6, var$7;
        if ($i > $end) {
            var$3 = new jl_IllegalArgumentException;
            jl_Exception__init_(var$3);
            $rt_throw(var$3);
        }
        a: {
            b: {
                if (!$this.$ci) {
                    if ($end < 55296)
                        break b;
                    if ($i > 57343)
                        break b;
                }
                $end = $end + 1 | 0;
                while (true) {
                    if ($i >= $end)
                        break a;
                    jur_CharClass_add($this, $i);
                    $i = $i + 1 | 0;
                }
            }
            if (!$this.$inverted)
                ju_BitSet_set0($this.$bits, $i, $end + 1 | 0);
            else {
                var$3 = $this.$bits;
                $end = $end + 1 | 0;
                if ($i > $end) {
                    var$3 = new jl_IndexOutOfBoundsException;
                    jl_Exception__init_(var$3);
                    $rt_throw(var$3);
                }
                var$4 = var$3.$length2;
                if ($i < var$4) {
                    var$5 = jl_Math_min(var$4, $end);
                    if ($i != var$5) {
                        var$6 = $i / 32 | 0;
                        $end = var$5 / 32 | 0;
                        if (var$6 == $end) {
                            var$7 = var$3.$data0.data;
                            var$7[var$6] = var$7[var$6] & (ju_BitSet_trailingOneBits(var$3, $i) | ju_BitSet_trailingZeroBits(var$3, var$5));
                        } else {
                            var$7 = var$3.$data0.data;
                            var$7[var$6] = var$7[var$6] & ju_BitSet_trailingOneBits(var$3, $i);
                            var$4 = var$6 + 1 | 0;
                            while (var$4 < $end) {
                                var$3.$data0.data[var$4] = 0;
                                var$4 = var$4 + 1 | 0;
                            }
                            if (var$5 & 31) {
                                var$7 = var$3.$data0.data;
                                var$7[$end] = var$7[$end] & ju_BitSet_trailingZeroBits(var$3, var$5);
                            }
                        }
                        ju_BitSet_recalculateLength(var$3);
                    }
                }
            }
        }
        return $this;
    }
    function jur_CharClass_union($this, $clazz) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($clazz.$hasUCI0)
            $this.$hasUCI0 = 1;
        $curAlt = $this.$altSurrogates;
        if (!($curAlt ^ $clazz.$altSurrogates)) {
            if (!$curAlt)
                ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            else
                ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        } else if ($curAlt)
            ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            $this.$altSurrogates = 1;
        }
        if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
            $curAlt = $this.$alt0;
            if (!($curAlt ^ $clazz.$alt0)) {
                if (!$curAlt)
                    ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
                else
                    ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            } else if ($curAlt)
                ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
            else {
                ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                $this.$alt0 = 1;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$11;
                    var$4.$this$07 = $this;
                    var$4.$val$curAlt3 = $curAlt;
                    var$4.$val$nb1 = $nb;
                    var$4.$val$clazz = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$10;
                    var$4.$this$08 = $this;
                    var$4.$val$curAlt4 = $curAlt;
                    var$4.$val$nb2 = $nb;
                    var$4.$val$clazz0 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    if (!$curAlt) {
                        $nb = new jur_CharClass$7;
                        $nb.$this$09 = $this;
                        $nb.$val$clazz1 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    } else {
                        $nb = new jur_CharClass$6;
                        $nb.$this$010 = $this;
                        $nb.$val$clazz2 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    }
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$9;
                    $nb.$this$011 = $this;
                    $nb.$val$clazz3 = $clazz;
                    $nb.$val$curAlt5 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$8;
                    $nb.$this$012 = $this;
                    $nb.$val$clazz4 = $clazz;
                    $nb.$val$curAlt6 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
    }
    function jur_CharClass_intersection($this, $clazz) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($clazz.$hasUCI0)
            $this.$hasUCI0 = 1;
        $curAlt = $this.$altSurrogates;
        if (!($curAlt ^ $clazz.$altSurrogates)) {
            if (!$curAlt)
                ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            else
                ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        } else if (!$curAlt)
            ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            $this.$altSurrogates = 0;
        }
        if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
            $curAlt = $this.$alt0;
            if (!($curAlt ^ $clazz.$alt0)) {
                if (!$curAlt)
                    ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                else
                    ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
            } else if (!$curAlt)
                ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
            else {
                ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                $this.$alt0 = 0;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$17;
                    var$4.$this$013 = $this;
                    var$4.$val$curAlt7 = $curAlt;
                    var$4.$val$nb3 = $nb;
                    var$4.$val$clazz5 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$16;
                    var$4.$this$014 = $this;
                    var$4.$val$curAlt8 = $curAlt;
                    var$4.$val$nb4 = $nb;
                    var$4.$val$clazz6 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    if (!$curAlt) {
                        $nb = new jur_CharClass$13;
                        $nb.$this$015 = $this;
                        $nb.$val$clazz7 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    } else {
                        $nb = new jur_CharClass$12;
                        $nb.$this$016 = $this;
                        $nb.$val$clazz8 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    }
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$15;
                    $nb.$this$017 = $this;
                    $nb.$val$clazz9 = $clazz;
                    $nb.$val$curAlt9 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$14;
                    $nb.$this$018 = $this;
                    $nb.$val$clazz10 = $clazz;
                    $nb.$val$curAlt10 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
    }
    function jur_CharClass_contains($this, $ch) {
        var var$2;
        var$2 = $this.$nonBitSet;
        if (var$2 !== null)
            return $this.$alt0 ^ var$2.$contains1($ch);
        return $this.$alt0 ^ ju_BitSet_get($this.$bits, $ch);
    }
    function jur_CharClass_getBits($this) {
        if (!$this.$hideBits)
            return $this.$bits;
        return null;
    }
    function jur_CharClass_getLowHighSurrogates($this) {
        return $this.$lowHighSurrogates;
    }
    function jur_CharClass_getInstance($this) {
        var $bs, $res;
        if ($this.$nonBitSet !== null)
            return $this;
        $bs = jur_CharClass_getBits($this);
        $res = new jur_CharClass$18;
        $res.$this$019 = $this;
        $res.$val$bs = $bs;
        jur_AbstractCharClass__init_($res);
        return jur_AbstractCharClass_setNegative($res, $this.$alt0);
    }
    function jur_CharClass_toString($this) {
        var $temp, $i, var$3;
        $temp = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($temp);
        $i = ju_BitSet_nextSetBit($this.$bits, 0);
        while ($i >= 0) {
            jl_AbstractStringBuilder_append2($temp, jl_Character_toChars($i));
            jl_AbstractStringBuilder_append($temp, 124);
            $i = ju_BitSet_nextSetBit($this.$bits, $i + 1 | 0);
        }
        var$3 = $temp.$length0;
        if (var$3 > 0)
            jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
        return jl_AbstractStringBuilder_toString($temp);
    }
    function jur_CharClass_hasUCI($this) {
        return $this.$hasUCI0;
    }
    function ju_MissingResourceException() {
        var a = this; jl_RuntimeException.call(a);
        a.$className = null;
        a.$key0 = null;
    }
    function jur_QuantifierSet() {
        jur_AbstractSet.call(this);
        this.$innerSet = null;
    }
    function jur_QuantifierSet__init_($this, $innerSet, $next, $type) {
        jur_AbstractSet__init_0($this, $next);
        $this.$innerSet = $innerSet;
        $this.$type2 = $type;
    }
    function jur_QuantifierSet_getInnerSet($this) {
        return $this.$innerSet;
    }
    function jur_QuantifierSet_first($this, $set) {
        return !$this.$innerSet.$first($set) && !$this.$next2.$first($set) ? 0 : 1;
    }
    function jur_QuantifierSet_hasConsumed($this, $mr) {
        return 1;
    }
    function jur_QuantifierSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$next2;
        if ($set !== null && !$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$next2.$isSecondPassVisited = 1;
                $this.$next2 = $set;
            }
            $this.$next2.$processSecondPass();
        }
        $set = $this.$innerSet;
        if ($set !== null) {
            if (!$set.$isSecondPassVisited) {
                $set = $set.$processBackRefReplacement();
                if ($set !== null) {
                    $this.$innerSet.$isSecondPassVisited = 1;
                    $this.$innerSet = $set;
                }
                $this.$innerSet.$processSecondPass();
            } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
                $this.$innerSet = $set.$next2;
        }
    }
    function jur_LeafQuantifierSet() {
        jur_QuantifierSet.call(this);
        this.$leaf = null;
    }
    function jur_LeafQuantifierSet__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_LeafQuantifierSet();
        jur_LeafQuantifierSet__init_(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type) {
        jur_QuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$leaf = $innerSet;
    }
    function jur_LeafQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $i, var$5;
        $i = 0;
        a: {
            while (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                var$5 = $this.$leaf.$accepts($stringIndex, $testString);
                if (var$5 <= 0)
                    break a;
                $stringIndex = $stringIndex + var$5 | 0;
                $i = $i + 1 | 0;
            }
        }
        while (true) {
            if ($i < 0)
                return (-1);
            var$5 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
            if (var$5 >= 0)
                break;
            $stringIndex = $stringIndex - $this.$leaf.$charCount0() | 0;
            $i = $i + (-1) | 0;
        }
        return var$5;
    }
    function jur_CompositeQuantifierSet() {
        jur_LeafQuantifierSet.call(this);
        this.$quantifier = null;
    }
    function jur_CompositeQuantifierSet__init_0(var_0, var_1, var_2, var_3) {
        var var_4 = new jur_CompositeQuantifierSet();
        jur_CompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function jur_CompositeQuantifierSet__init_($this, $quant, $innerSet, $next, $type) {
        jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$quantifier = $quant;
    }
    function jur_CompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, $shift;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max0;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while ($i < $max) {
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                            break a;
                        $shift = $this.$leaf.$accepts($stringIndex, $testString);
                        if ($shift < 1)
                            break a;
                        $stringIndex = $stringIndex + $shift | 0;
                        $i = $i + 1 | 0;
                    }
                }
                while (true) {
                    if ($i < $min)
                        return (-1);
                    $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
                    if ($shift >= 0)
                        break;
                    $stringIndex = $stringIndex - $this.$leaf.$charCount0() | 0;
                    $i = $i + (-1) | 0;
                }
                return $shift;
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            $shift = $this.$leaf.$accepts($stringIndex, $testString);
            if ($shift < 1)
                break;
            $stringIndex = $stringIndex + $shift | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_GroupQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet);
    function jur_GroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0)
            return $nextIndex;
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_AltQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_AltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        $shift = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        return $shift;
    }
    function jur_AltQuantifierSet_setNext($this, $next) {
        $this.$next2 = $next;
        $this.$innerSet.$setNext($next);
    }
    var jur_UnifiedQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_UnifiedQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        while (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0 && $this.$leaf.$accepts($stringIndex, $testString) > 0) {
            $stringIndex = $stringIndex + $this.$leaf.$charCount0() | 0;
        }
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_UnifiedQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $startSearch, $newSearch, $newSearch_0;
        $startSearch = $this.$next2.$find0($stringIndex, $testString, $matchResult);
        if ($startSearch < 0)
            return (-1);
        $newSearch = $startSearch - $this.$leaf.$charCount0() | 0;
        while ($newSearch >= $stringIndex && $this.$leaf.$accepts($newSearch, $testString) > 0) {
            $newSearch_0 = $newSearch - $this.$leaf.$charCount0() | 0;
            $startSearch = $newSearch;
            $newSearch = $newSearch_0;
        }
        return $startSearch;
    }
    var otcit_FloatAnalyzer = $rt_classWithoutFields();
    var otcit_FloatAnalyzer_MAX_MANTISSA = 0;
    var otcit_FloatAnalyzer_mantissa10Table = null;
    var otcit_FloatAnalyzer_exp10Table = null;
    function otcit_FloatAnalyzer_analyze($d, $result) {
        var $bits, $mantissa, $exponent, var$6, $decExponent, $upperPos, $upperPos_0, $mantissaShift, $decMantissa, $decMantissaHi, $decMantissaLow, $lowerPos, $lowerPos_0, $posCmp;
        $bits = ($rt_globals.isNaN($d) ? 1 : 0) ? 2143289344 : $rt_floatToRawIntBits($d);
        $result.$sign = !($bits & (-2147483648)) ? 0 : 1;
        $mantissa = $bits & 8388607;
        $exponent = $bits >> 23 & 255;
        if (!$mantissa && !$exponent) {
            $result.$mantissa = 0;
            $result.$exponent = 0;
            return;
        }
        if ($exponent)
            $bits = $mantissa | 8388608;
        else {
            $bits = $mantissa << 1;
            while (Long_eq(Long_and(Long_fromInt($bits), Long_fromInt(8388608)), Long_ZERO)) {
                $bits = $bits << 1;
                $exponent = $exponent + (-1) | 0;
            }
        }
        var$6 = otcit_FloatAnalyzer_exp10Table.data;
        $mantissa = 0;
        $decExponent = var$6.length;
        $upperPos = $rt_compare($mantissa, $decExponent);
        if ($upperPos > 0) {
            $result = new jl_IllegalArgumentException;
            jl_Exception__init_($result);
            $rt_throw($result);
        }
        a: {
            if (!$upperPos)
                $decExponent = (-1);
            else {
                $upperPos = $decExponent - 1 | 0;
                while (true) {
                    $decExponent = ($mantissa + $upperPos | 0) / 2 | 0;
                    $upperPos_0 = var$6[$decExponent];
                    if ($upperPos_0 == $exponent)
                        break;
                    if ($exponent >= $upperPos_0) {
                        $mantissa = $decExponent + 1 | 0;
                        if ($mantissa > $upperPos) {
                            $decExponent = ( -$decExponent | 0) - 2 | 0;
                            break a;
                        }
                    } else {
                        $upperPos = $decExponent - 1 | 0;
                        if ($upperPos < $mantissa) {
                            $decExponent = ( -$decExponent | 0) - 1 | 0;
                            break a;
                        }
                    }
                }
            }
        }
        if ($decExponent < 0)
            $decExponent =  -$decExponent | 0;
        $mantissa = $decExponent + 1 | 0;
        $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
        $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
        if ($decMantissa < otcit_FloatAnalyzer_MAX_MANTISSA) {
            while ($rt_ucmp($decMantissa, otcit_FloatAnalyzer_MAX_MANTISSA) <= 0) {
                $decExponent = $decExponent + (-1) | 0;
                $decMantissa = ($decMantissa * 10 | 0) + 9 | 0;
            }
            var$6 = otcit_FloatAnalyzer_exp10Table.data;
            $mantissa = $decExponent + 1 | 0;
            $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
            $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
        }
        $mantissa = $bits << 1;
        $bits = $mantissa + 1 | 0;
        var$6 = otcit_FloatAnalyzer_mantissa10Table.data;
        $exponent = $decExponent + 1 | 0;
        $upperPos = var$6[$exponent];
        $upperPos_0 = $mantissaShift - 1 | 0;
        $decMantissaHi = otcit_FloatAnalyzer_mulAndShiftRight($bits, $upperPos, $upperPos_0);
        $decMantissaLow = otcit_FloatAnalyzer_mulAndShiftRight($mantissa - 1 | 0, otcit_FloatAnalyzer_mantissa10Table.data[$exponent], $upperPos_0);
        $lowerPos = 1;
        while (true) {
            $lowerPos_0 = $lowerPos * 10 | 0;
            if ($rt_ucmp($rt_udiv($decMantissa, $lowerPos_0), $rt_udiv($decMantissaLow, $lowerPos_0)) <= 0)
                break;
            $lowerPos = $lowerPos_0;
        }
        $upperPos = 1;
        while (true) {
            $upperPos_0 = $upperPos * 10 | 0;
            if ($rt_ucmp($rt_udiv($decMantissa, $upperPos_0), $rt_udiv($decMantissaHi, $upperPos_0)) >= 0)
                break;
            $upperPos = $upperPos_0;
        }
        $posCmp = $rt_ucmp($lowerPos, $upperPos);
        $mantissa = $posCmp > 0 ? $rt_imul($rt_udiv($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? $rt_imul($rt_udiv($decMantissa, $upperPos), $upperPos) + $upperPos | 0 : $rt_imul($rt_udiv(($decMantissa + ($upperPos / 2 | 0) | 0), $upperPos), $upperPos);
        if (jl_Long_compareUnsigned(Long_fromInt($mantissa), Long_fromInt(1000000000)) >= 0)
            while (true) {
                $decExponent = $decExponent + 1 | 0;
                $mantissa = $rt_udiv($mantissa, 10);
                if ($rt_ucmp($mantissa, 1000000000) < 0)
                    break;
            }
        else if ($rt_ucmp($mantissa, 100000000) < 0) {
            $decExponent = $decExponent + (-1) | 0;
            $mantissa = $mantissa * 10 | 0;
        }
        $result.$mantissa = $mantissa;
        $result.$exponent = $decExponent - 50 | 0;
    }
    function otcit_FloatAnalyzer_mulAndShiftRight($a, $b, $shift) {
        return Long_lo(Long_shru(Long_mul(Long_and(Long_fromInt($a), Long_create(4294967295, 0)), Long_and(Long_fromInt($b), Long_create(4294967295, 0))), 32 - $shift | 0));
    }
    function otcit_FloatAnalyzer__clinit_() {
        otcit_FloatAnalyzer_MAX_MANTISSA = $rt_udiv((-1), 10);
        otcit_FloatAnalyzer_mantissa10Table = $rt_createIntArrayFromData([(-18543760), (-873828468), (-1558056233), (-2105438446), (-791721136), (-1492370368), (-2052889754), (-707643228), (-1425108042), (-1999079893), (-621547450), (-1356231419), (-1943978595), (-533385374), (-1285701758), (-1887554866), (-443107408), (-1213479385), (-1829776968), (-350662770), (-1139523676), (-1770612400), (-255999462), (-1063793029), (-1710027882), (-159064234), (-986244846), (-1647989336), (-59802560), (-906835507), (-1584461865),
        (-2126562952), (-825520345), (-1519409735), (-2074521247), (-742253618), (-1452796353), (-2021230542), (-656988489), (-1384584251), (-1966660860), (-569676998), (-1314735058), (-1910781505), (-480270031), (-1243209484), (-1853561046), (-388717296), (-1169967296), (-1794967296), (-294967296), (-1094967296), (-1734967296), (-198967296), (-1018167296), (-1673527296), (-100663296), (-939524096), (-1610612736), (-2147483648), (-858993460), (-1546188227), (-2095944041), (-776530088), (-1480217529), (-2043167483),
        (-692087595), (-1412663535), (-1989124287), (-605618482), (-1343488245), (-1933784055), (-517074110), (-1272652747), (-1877115657), (-426404674), (-1200117198), (-1819087218), (-333559171), (-1125840796), (-1759666096), (-238485376), (-1049781760), (-1698818867), (-141129810), (-971897307), (-1636511305), (-41437710), (-892143627), (-1572708361), (-2117160148), (-810475859), (-1507374147), (-2064892777), (-726848065), (-1440471911), (-2011370988), (-641213203), (-1371964022), (-1956564688)]);
        otcit_FloatAnalyzer_exp10Table = $rt_createIntArrayFromData([(-37), (-34), (-31), (-28), (-24), (-21), (-18), (-14), (-11), (-8), (-4), (-1), 2, 6, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 46, 49, 52, 56, 59, 62, 65, 69, 72, 75, 79, 82, 85, 89, 92, 95, 99, 102, 105, 109, 112, 115, 119, 122, 125, 129, 132, 135, 139, 142, 145, 149, 152, 155, 158, 162, 165, 168, 172, 175, 178, 182, 185, 188, 192, 195, 198, 202, 205, 208, 212, 215, 218, 222, 225, 228, 232, 235, 238, 242, 245, 248, 252, 255, 258, 261, 265,
        268, 271, 275, 278, 281, 285, 288, 291]);
    }
    function jur_AbstractCharClass$LazyCharClass() {
        var a = this; jl_Object.call(a);
        a.$posValue = null;
        a.$negValue = null;
    }
    function jur_AbstractCharClass$LazyCharClass_getValue($this, $negative) {
        if (!$negative && $this.$posValue === null)
            $this.$posValue = $this.$computeValue();
        else if ($negative && $this.$negValue === null)
            $this.$negValue = jur_AbstractCharClass_setNegative($this.$computeValue(), 1);
        if ($negative)
            return $this.$negValue;
        return $this.$posValue;
    }
    function jur_Quantifier() {
        var a = this; jur_SpecialToken.call(a);
        a.$min0 = 0;
        a.$max0 = 0;
    }
    function jur_Quantifier_toString($this) {
        var var$1, var$2, var$3, var$4, var$5;
        var$1 = $this.$min0;
        var$2 = $this.$max0;
        var$3 = var$2 != 2147483647 ? jl_Integer_toString(var$2) : $rt_s(10);
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, 123);
        var$5 = jl_StringBuilder_append0(var$4, var$1);
        jl_AbstractStringBuilder_append(var$5, 44);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$5, var$3), 125);
        return jl_AbstractStringBuilder_toString(var$4);
    }
    var jur_FSet$PossessiveFSet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_FSet$PossessiveFSet_matches($this, $stringIndex, $testString, $matchResult) {
        return $stringIndex;
    }
    function jur_FSet$PossessiveFSet_hasConsumed($this, $mr) {
        return 0;
    }
    function ju_BitSet() {
        var a = this; jl_Object.call(a);
        a.$data0 = null;
        a.$length2 = 0;
    }
    function ju_BitSet__init_() {
        var var_0 = new ju_BitSet();
        ju_BitSet__init_0(var_0);
        return var_0;
    }
    function ju_BitSet__init_0($this) {
        $this.$data0 = $rt_createIntArray(0);
    }
    function ju_BitSet_set($this, $bitIndex) {
        var $index, var$3;
        $index = $bitIndex / 32 | 0;
        if ($bitIndex >= $this.$length2) {
            ju_BitSet_ensureCapacity($this, $index + 1 | 0);
            $this.$length2 = $bitIndex + 1 | 0;
        }
        var$3 = $this.$data0.data;
        var$3[$index] = var$3[$index] | 1 << ($bitIndex % 32 | 0);
    }
    function ju_BitSet_set0($this, $fromIndex, $toIndex) {
        var $fromDataIndex, var$4, $toDataIndex, var$6, $i;
        $fromDataIndex = $rt_compare($fromIndex, $toIndex);
        if ($fromDataIndex > 0) {
            var$4 = new jl_IndexOutOfBoundsException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        if (!$fromDataIndex)
            return;
        $fromDataIndex = $fromIndex / 32 | 0;
        $toDataIndex = $toIndex / 32 | 0;
        if ($toIndex > $this.$length2) {
            ju_BitSet_ensureCapacity($this, $toDataIndex + 1 | 0);
            $this.$length2 = $toIndex;
        }
        if ($fromDataIndex == $toDataIndex) {
            var$6 = $this.$data0.data;
            var$6[$fromDataIndex] = var$6[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex) & ju_BitSet_trailingOneBits($this, $toIndex);
        } else {
            var$6 = $this.$data0.data;
            var$6[$fromDataIndex] = var$6[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex);
            $i = $fromDataIndex + 1 | 0;
            while ($i < $toDataIndex) {
                $this.$data0.data[$i] = (-1);
                $i = $i + 1 | 0;
            }
            if ($toIndex & 31) {
                var$6 = $this.$data0.data;
                var$6[$toDataIndex] = var$6[$toDataIndex] | ju_BitSet_trailingOneBits($this, $toIndex);
            }
        }
    }
    function ju_BitSet_trailingZeroBits($this, $num) {
        return (-1) << ($num % 32 | 0);
    }
    function ju_BitSet_trailingOneBits($this, $num) {
        $num = $num % 32 | 0;
        return !$num ? 0 : (-1) >>> (32 - $num | 0) | 0;
    }
    function ju_BitSet_clear($this, $bitIndex) {
        var $index, var$3, var$4, var$5;
        $index = $bitIndex / 32 | 0;
        var$3 = $this.$data0.data;
        if ($index < var$3.length) {
            var$4 = var$3[$index];
            var$5 = ($bitIndex % 32 | 0) & 31;
            var$3[$index] = var$4 & ((-2) << var$5 | ((-2) >>> (32 - var$5 | 0) | 0));
            if ($bitIndex == ($this.$length2 - 1 | 0))
                ju_BitSet_recalculateLength($this);
        }
    }
    function ju_BitSet_get($this, $bitIndex) {
        var $index, var$3;
        $index = $bitIndex / 32 | 0;
        var$3 = $this.$data0.data;
        return $index < var$3.length && var$3[$index] & 1 << ($bitIndex % 32 | 0) ? 1 : 0;
    }
    function ju_BitSet_nextSetBit($this, $fromIndex) {
        var $top, $index, var$4, $i;
        $top = $this.$length2;
        if ($fromIndex >= $top)
            return (-1);
        $index = $fromIndex / 32 | 0;
        var$4 = $this.$data0.data;
        $i = var$4[$index] >>> ($fromIndex % 32 | 0) | 0;
        if ($i)
            return jl_Integer_numberOfTrailingZeros($i) + $fromIndex | 0;
        $top = ($top + 31 | 0) / 32 | 0;
        $i = $index + 1 | 0;
        while ($i < $top) {
            if (var$4[$i])
                return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$4[$i]) | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function ju_BitSet_ensureCapacity($this, $capacity) {
        var $newArrayLength, var$3, var$4, var$5;
        $newArrayLength = $this.$data0.data.length;
        if ($newArrayLength >= $capacity)
            return;
        $newArrayLength = jl_Math_max(($capacity * 3 | 0) / 2 | 0, ($newArrayLength * 2 | 0) + 1 | 0);
        var$3 = $this.$data0.data;
        var$4 = $rt_createIntArray($newArrayLength);
        var$5 = var$4.data;
        $capacity = jl_Math_min($newArrayLength, var$3.length);
        $newArrayLength = 0;
        while ($newArrayLength < $capacity) {
            var$5[$newArrayLength] = var$3[$newArrayLength];
            $newArrayLength = $newArrayLength + 1 | 0;
        }
        $this.$data0 = var$4;
    }
    function ju_BitSet_recalculateLength($this) {
        var $top, $i, $sz;
        $top = ($this.$length2 + 31 | 0) / 32 | 0;
        $this.$length2 = $top * 32 | 0;
        $i = $top - 1 | 0;
        a: {
            while (true) {
                if ($i < 0)
                    break a;
                $sz = jl_Integer_numberOfLeadingZeros($this.$data0.data[$i]);
                if ($sz < 32)
                    break;
                $i = $i + (-1) | 0;
                $this.$length2 = $this.$length2 - 32 | 0;
            }
            $this.$length2 = $this.$length2 - $sz | 0;
        }
    }
    function ju_BitSet_and($this, $set) {
        var $i, $i_0, var$4, var$5;
        $i = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
        $i_0 = 0;
        while ($i_0 < $i) {
            var$4 = $this.$data0.data;
            var$4[$i_0] = var$4[$i_0] & $set.$data0.data[$i_0];
            $i_0 = $i_0 + 1 | 0;
        }
        while (true) {
            var$5 = $this.$data0.data;
            if ($i >= var$5.length)
                break;
            var$5[$i] = 0;
            $i = $i + 1 | 0;
        }
        $this.$length2 = jl_Math_min($this.$length2, $set.$length2);
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_andNot($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data0.data;
            var$4[$i] = var$4[$i] & ($set.$data0.data[$i] ^ (-1));
            $i = $i + 1 | 0;
        }
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_or($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_max($this.$length2, $set.$length2);
        $this.$length2 = $sz;
        ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
        $sz = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data0.data;
            var$4[$i] = var$4[$i] | $set.$data0.data[$i];
            $i = $i + 1 | 0;
        }
    }
    function ju_BitSet_xor($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_max($this.$length2, $set.$length2);
        $this.$length2 = $sz;
        ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
        $sz = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data0.data;
            var$4[$i] = var$4[$i] ^ $set.$data0.data[$i];
            $i = $i + 1 | 0;
        }
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_isEmpty($this) {
        return $this.$length2 ? 0 : 1;
    }
    function jur_LowHighSurrogateRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$surrChars = null;
        a.$alt = 0;
    }
    function jur_CompositeRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$withoutSurrogates = null;
        a.$withSurrogates = null;
    }
    function jur_CompositeRangeSet__init_(var_0, var_1) {
        var var_2 = new jur_CompositeRangeSet();
        jur_CompositeRangeSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CompositeRangeSet__init_0($this, $withoutSurrogates, $withSurrogates) {
        jur_AbstractSet__init_($this);
        $this.$withoutSurrogates = $withoutSurrogates;
        $this.$withSurrogates = $withSurrogates;
    }
    function jur_CompositeRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift, var$5, var$6, var$7, var$8;
        $shift = $this.$withoutSurrogates.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            a: {
                var$5 = $this.$withSurrogates;
                var$6 = $matchResult.$leftBound0;
                $shift = $matchResult.$rightBound0;
                var$7 = $stringIndex + 1 | 0;
                $shift = $rt_compare(var$7, $shift);
                if ($shift > 0) {
                    $matchResult.$hitEnd = 1;
                    $shift = (-1);
                } else {
                    var$8 = jl_String_charAt($testString, $stringIndex);
                    if (!var$5.$surrChars.$contains1(var$8))
                        $shift = (-1);
                    else {
                        if (jl_Character_isHighSurrogate(var$8)) {
                            if ($shift < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$7))) {
                                $shift = (-1);
                                break a;
                            }
                        } else if (jl_Character_isLowSurrogate(var$8) && $stringIndex > var$6 && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
                            $shift = (-1);
                            break a;
                        }
                        $shift = var$5.$next2.$matches(var$7, $testString, $matchResult);
                    }
                }
            }
        if ($shift >= 0)
            return $shift;
        return (-1);
    }
    function jur_CompositeRangeSet_setNext($this, $next) {
        $this.$next2 = $next;
        $this.$withSurrogates.$next2 = $next;
        $this.$withoutSurrogates.$setNext($next);
    }
    function jur_CompositeRangeSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_CompositeRangeSet_first($this, $set) {
        return 1;
    }
    function jur_SupplRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$chars = null;
        a.$alt1 = 0;
    }
    function jur_SupplRangeSet__init_(var_0) {
        var var_1 = new jur_SupplRangeSet();
        jur_SupplRangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_SupplRangeSet__init_0($this, $cc) {
        jur_AbstractSet__init_($this);
        $this.$chars = $cc.$getInstance0();
        $this.$alt1 = $cc.$alt0;
    }
    function jur_SupplRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $low, $high, $offset;
        $strLength = $matchResult.$rightBound0;
        if ($stringIndex < $strLength) {
            $low = $stringIndex + 1 | 0;
            $high = jl_String_charAt($testString, $stringIndex);
            if ($this.$contains1($high)) {
                $offset = $this.$next2.$matches($low, $testString, $matchResult);
                if ($offset > 0)
                    return $offset;
            }
            if ($low < $strLength) {
                $stringIndex = $low + 1 | 0;
                $low = jl_String_charAt($testString, $low);
                if (jl_Character_isSurrogatePair($high, $low) && $this.$contains1(jl_Character_toCodePoint($high, $low)))
                    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
            }
        }
        return (-1);
    }
    function jur_SupplRangeSet_contains($this, $ch) {
        return $this.$chars.$contains1($ch);
    }
    function jur_SupplRangeSet_first($this, $set) {
        if ($set instanceof jur_SupplCharSet)
            return jur_AbstractCharClass_intersects($this.$chars, $set.$ch1);
        if ($set instanceof jur_CharSet)
            return jur_AbstractCharClass_intersects($this.$chars, $set.$ch2);
        if ($set instanceof jur_SupplRangeSet)
            return jur_AbstractCharClass_intersects0($this.$chars, $set.$chars);
        if (!($set instanceof jur_RangeSet))
            return 1;
        return jur_AbstractCharClass_intersects0($this.$chars, $set.$chars0);
    }
    function jur_SupplRangeSet_getChars($this) {
        return $this.$chars;
    }
    function jur_SupplRangeSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_SupplRangeSet_hasConsumed($this, $mr) {
        return 1;
    }
    var jur_UCISupplRangeSet = $rt_classWithoutFields(jur_SupplRangeSet);
    function jur_UCISupplRangeSet_contains($this, $ch) {
        return $this.$chars.$contains1(jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch)));
    }
    function jur_UCIRangeSet() {
        var a = this; jur_LeafSet.call(a);
        a.$chars1 = null;
        a.$alt2 = 0;
    }
    function jur_UCIRangeSet__init_(var_0) {
        var var_1 = new jur_UCIRangeSet();
        jur_UCIRangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCIRangeSet__init_0($this, $cc) {
        jur_LeafSet__init_($this);
        $this.$chars1 = $cc.$getInstance0();
        $this.$alt2 = $cc.$alt0;
    }
    function jur_UCIRangeSet_accepts($this, $strIndex, $testString) {
        return !$this.$chars1.$contains1(jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex)))) ? (-1) : 1;
    }
    function jur_RangeSet() {
        var a = this; jur_LeafSet.call(a);
        a.$chars0 = null;
        a.$alt3 = 0;
    }
    function jur_RangeSet__init_(var_0) {
        var var_1 = new jur_RangeSet();
        jur_RangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_RangeSet__init_0($this, $cc) {
        jur_LeafSet__init_($this);
        $this.$chars0 = $cc.$getInstance0();
        $this.$alt3 = $cc.$alt0;
    }
    function jur_RangeSet_accepts($this, $strIndex, $testString) {
        return !$this.$chars0.$contains1(jl_String_charAt($testString, $strIndex)) ? (-1) : 1;
    }
    function jur_RangeSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return jur_AbstractCharClass_intersects($this.$chars0, $set.$ch2);
        if ($set instanceof jur_RangeSet)
            return jur_AbstractCharClass_intersects0($this.$chars0, $set.$chars0);
        if (!($set instanceof jur_SupplRangeSet)) {
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return 0;
        }
        return jur_AbstractCharClass_intersects0($this.$chars0, $set.$chars);
    }
    function jur_HangulDecomposedCharSet() {
        var a = this; jur_JointSet.call(a);
        a.$decomposedChar = null;
        a.$decomposedCharUTF16 = null;
        a.$decomposedCharLength = 0;
    }
    function jur_HangulDecomposedCharSet__init_(var_0, var_1) {
        var var_2 = new jur_HangulDecomposedCharSet();
        jur_HangulDecomposedCharSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_HangulDecomposedCharSet__init_0($this, $decomposedChar, $decomposedCharLength) {
        jur_AbstractSet__init_($this);
        $this.$decomposedChar = $decomposedChar;
        $this.$decomposedCharLength = $decomposedCharLength;
    }
    function jur_HangulDecomposedCharSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_HangulDecomposedCharSet_getDecomposedChar($this) {
        if ($this.$decomposedCharUTF16 === null)
            $this.$decomposedCharUTF16 = jl_String__init_($this.$decomposedChar);
        return $this.$decomposedCharUTF16;
    }
    function jur_HangulDecomposedCharSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound, $decompSyllable, $vIndex, $tIndex, var$8, $curSymb, $lIndex, $i, $decompCurSymb, $syllIndex;
        $rightBound = $matchResult.$rightBound0;
        $decompSyllable = $rt_createIntArray(3);
        $vIndex = (-1);
        $tIndex = (-1);
        if ($strIndex >= $rightBound)
            return (-1);
        var$8 = $strIndex + 1 | 0;
        $curSymb = jl_String_charAt($testString, $strIndex);
        $strIndex = $curSymb - 44032 | 0;
        if ($strIndex >= 0 && $strIndex < 11172) {
            $lIndex = 4352 + ($strIndex / 588 | 0) | 0;
            $i = 4449 + (($strIndex % 588 | 0) / 28 | 0) | 0;
            $strIndex = $strIndex % 28 | 0;
            $decompCurSymb = !$strIndex ? $rt_createIntArrayFromData([$lIndex, $i]) : $rt_createIntArrayFromData([$lIndex, $i, 4519 + $strIndex | 0]);
        } else
            $decompCurSymb = null;
        if ($decompCurSymb !== null) {
            $decompCurSymb = $decompCurSymb.data;
            $i = 0;
            $strIndex = $decompCurSymb.length;
            $syllIndex = $this.$decomposedCharLength;
            if ($strIndex != $syllIndex)
                return (-1);
            while (true) {
                if ($i >= $syllIndex)
                    return $this.$next2.$matches(var$8, $testString, $matchResult);
                if ($decompCurSymb[$i] != $this.$decomposedChar.data[$i])
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        $decompSyllable = $decompSyllable.data;
        $decompSyllable[0] = $curSymb;
        $lIndex = $curSymb - 4352 | 0;
        if ($lIndex >= 0 && $lIndex < 19) {
            if (var$8 < $rightBound) {
                $curSymb = jl_String_charAt($testString, var$8);
                $vIndex = $curSymb - 4449 | 0;
            }
            if ($vIndex >= 0 && $vIndex < 21) {
                $lIndex = var$8 + 1 | 0;
                $decompSyllable[1] = $curSymb;
                if ($lIndex < $rightBound) {
                    $curSymb = jl_String_charAt($testString, $lIndex);
                    $tIndex = $curSymb - 4519 | 0;
                }
                if ($tIndex >= 0 && $tIndex < 28) {
                    a: {
                        $strIndex = $lIndex + 1 | 0;
                        $decompSyllable[2] = $curSymb;
                        if ($this.$decomposedCharLength == 3) {
                            $lIndex = $decompSyllable[0];
                            $decompCurSymb = $this.$decomposedChar.data;
                            if ($lIndex == $decompCurSymb[0] && $decompSyllable[1] == $decompCurSymb[1] && $decompSyllable[2] == $decompCurSymb[2]) {
                                $strIndex = $this.$next2.$matches($strIndex, $testString, $matchResult);
                                break a;
                            }
                        }
                        $strIndex = (-1);
                    }
                    return $strIndex;
                }
                b: {
                    if ($this.$decomposedCharLength == 2) {
                        $strIndex = $decompSyllable[0];
                        $decompCurSymb = $this.$decomposedChar.data;
                        if ($strIndex == $decompCurSymb[0] && $decompSyllable[1] == $decompCurSymb[1]) {
                            $strIndex = $this.$next2.$matches($lIndex, $testString, $matchResult);
                            break b;
                        }
                    }
                    $strIndex = (-1);
                }
                return $strIndex;
            }
            return (-1);
        }
        return (-1);
    }
    function jur_HangulDecomposedCharSet_first($this, $set) {
        return $set instanceof jur_HangulDecomposedCharSet && !jl_String_equals(jur_HangulDecomposedCharSet_getDecomposedChar($set), jur_HangulDecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
    }
    function jur_HangulDecomposedCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_CharSet() {
        jur_LeafSet.call(this);
        this.$ch2 = 0;
    }
    function jur_CharSet__init_(var_0) {
        var var_1 = new jur_CharSet();
        jur_CharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_CharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch2 = $ch;
    }
    function jur_CharSet_charCount($this) {
        return 1;
    }
    function jur_CharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch2 != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
    }
    function jur_CharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, var$5, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$5 = jl_String_indexOf($testStr, $this.$ch2, $strIndex);
            if (var$5 < 0)
                return (-1);
            var$6 = $this.$next2;
            $strIndex = var$5 + 1 | 0;
            if (var$6.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$5;
    }
    function jur_CharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$5 = jl_String_lastIndexOf($testStr, $this.$ch2, $lastIndex);
                if (var$5 < 0)
                    break a;
                if (var$5 < $strIndex)
                    break a;
                if ($this.$next2.$matches(var$5 + 1 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$5 + (-1) | 0;
            }
            return var$5;
        }
        return (-1);
    }
    function jur_CharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return $set.$ch2 != $this.$ch2 ? 0 : 1;
        if (!($set instanceof jur_RangeSet)) {
            if ($set instanceof jur_SupplRangeSet)
                return $set.$contains1($this.$ch2);
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return 0;
        }
        return jur_RangeSet_accepts($set, 0, jl_Character_toString($this.$ch2)) <= 0 ? 0 : 1;
    }
    function jur_UCICharSet() {
        jur_LeafSet.call(this);
        this.$ch3 = 0;
    }
    function jur_UCICharSet__init_(var_0) {
        var var_1 = new jur_UCICharSet();
        jur_UCICharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCICharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch3 = jl_Character_toLowerCase(jl_Character_toUpperCase($ch));
    }
    function jur_UCICharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch3 != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex))) ? (-1) : 1;
    }
    function jur_CICharSet() {
        var a = this; jur_LeafSet.call(a);
        a.$ch4 = 0;
        a.$supplement = 0;
    }
    function jur_CICharSet__init_(var_0) {
        var var_1 = new jur_CICharSet();
        jur_CICharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_CICharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch4 = $ch;
        $this.$supplement = jur_Pattern_getSupplement($ch);
    }
    function jur_CICharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch4 != jl_String_charAt($testString, $strIndex) && $this.$supplement != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
    }
    function jur_DecomposedCharSet() {
        var a = this; jur_JointSet.call(a);
        a.$readCharsForCodePoint = 0;
        a.$decomposedCharUTF160 = null;
        a.$decomposedChar0 = null;
        a.$decomposedCharLength0 = 0;
    }
    function jur_DecomposedCharSet__init_(var_0, var_1) {
        var var_2 = new jur_DecomposedCharSet();
        jur_DecomposedCharSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_DecomposedCharSet__init_0($this, $decomposedChar, $decomposedCharLength) {
        jur_AbstractSet__init_($this);
        $this.$readCharsForCodePoint = 1;
        $this.$decomposedChar0 = $decomposedChar;
        $this.$decomposedCharLength0 = $decomposedCharLength;
    }
    function jur_DecomposedCharSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_DecomposedCharSet_matches($this, $strIndex, $testString, $matchResult) {
        var $decCodePoint, $rightBound, $curChar, var$7, $decCurCodePoint, var$9, var$10, $readCodePoints;
        $decCodePoint = $rt_createIntArray(4);
        $rightBound = $matchResult.$rightBound0;
        if ($strIndex >= $rightBound)
            return (-1);
        $curChar = jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound);
        var$7 = $strIndex + $this.$readCharsForCodePoint | 0;
        $decCurCodePoint = jur_Lexer_getDecomposition($curChar);
        if ($decCurCodePoint === null) {
            $decCurCodePoint = $decCodePoint.data;
            $strIndex = 1;
            $decCurCodePoint[0] = $curChar;
        } else {
            $strIndex = $decCurCodePoint.data.length;
            jl_System_fastArraycopy($decCurCodePoint, 0, $decCodePoint, 0, $strIndex);
            $strIndex = 0 + $strIndex | 0;
        }
        a: {
            if (var$7 < $rightBound) {
                var$9 = $decCodePoint.data;
                $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                while ($strIndex < 4) {
                    if (!(($curChar != 832 ? 0 : 1) | ($curChar != 833 ? 0 : 1) | ($curChar != 835 ? 0 : 1) | ($curChar != 836 ? 0 : 1))) {
                        var$10 = $strIndex + 1 | 0;
                        var$9[$strIndex] = $curChar;
                    } else {
                        $decCurCodePoint = (jur_Lexer_getDecomposition($curChar)).data;
                        if ($decCurCodePoint.length != 2) {
                            var$10 = $strIndex + 1 | 0;
                            var$9[$strIndex] = $decCurCodePoint[0];
                        } else {
                            $readCodePoints = $strIndex + 1 | 0;
                            var$9[$strIndex] = $decCurCodePoint[0];
                            var$10 = $readCodePoints + 1 | 0;
                            var$9[$readCodePoints] = $decCurCodePoint[1];
                        }
                    }
                    var$7 = var$7 + $this.$readCharsForCodePoint | 0;
                    if (var$7 >= $rightBound) {
                        $strIndex = var$10;
                        break a;
                    }
                    $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                    $strIndex = var$10;
                }
            }
        }
        if ($strIndex != $this.$decomposedCharLength0)
            return (-1);
        $decCurCodePoint = $decCodePoint.data;
        $curChar = 0;
        while (true) {
            if ($curChar >= $strIndex)
                return $this.$next2.$matches(var$7, $testString, $matchResult);
            if ($decCurCodePoint[$curChar] != $this.$decomposedChar0.data[$curChar])
                break;
            $curChar = $curChar + 1 | 0;
        }
        return (-1);
    }
    function jur_DecomposedCharSet_getDecomposedChar($this) {
        var $strBuff, $i;
        if ($this.$decomposedCharUTF160 === null) {
            $strBuff = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($strBuff);
            $i = 0;
            while ($i < $this.$decomposedCharLength0) {
                jl_AbstractStringBuilder_append2($strBuff, jl_Character_toChars($this.$decomposedChar0.data[$i]));
                $i = $i + 1 | 0;
            }
            $this.$decomposedCharUTF160 = jl_AbstractStringBuilder_toString($strBuff);
        }
        return $this.$decomposedCharUTF160;
    }
    function jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound) {
        var $curChar, $low, $curCodePointUTF16;
        $this.$readCharsForCodePoint = 1;
        if ($strIndex >= ($rightBound - 1 | 0))
            $curChar = jl_String_charAt($testString, $strIndex);
        else {
            $rightBound = $strIndex + 1 | 0;
            $curChar = jl_String_charAt($testString, $strIndex);
            $low = jl_String_charAt($testString, $rightBound);
            if (jl_Character_isSurrogatePair($curChar, $low)) {
                $curCodePointUTF16 = $rt_createCharArray(2).data;
                $curCodePointUTF16[0] = $curChar;
                $curCodePointUTF16[1] = $low;
                $curChar = 0 < ($curCodePointUTF16.length - 1 | 0) && jl_Character_isHighSurrogate($curCodePointUTF16[0]) && jl_Character_isLowSurrogate($curCodePointUTF16[1]) ? jl_Character_toCodePoint($curCodePointUTF16[0], $curCodePointUTF16[1]) : $curCodePointUTF16[0];
                $this.$readCharsForCodePoint = 2;
            }
        }
        return $curChar;
    }
    function jur_DecomposedCharSet_first($this, $set) {
        return $set instanceof jur_DecomposedCharSet && !jl_String_equals(jur_DecomposedCharSet_getDecomposedChar($set), jur_DecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
    }
    function jur_DecomposedCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    var jur_UCIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet);
    var jur_CIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet);
    var jur_PossessiveGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_PossessiveGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $stringIndex_0;
        while (true) {
            $stringIndex_0 = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
            if ($stringIndex_0 <= 0)
                break;
            $stringIndex = $stringIndex_0;
        }
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PosPlusGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_PosPlusGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex < 0)
            return (-1);
        if ($nextIndex > $stringIndex) {
            while (true) {
                $stringIndex = $this.$innerSet.$matches($nextIndex, $testString, $matchResult);
                if ($stringIndex <= $nextIndex)
                    break;
                $nextIndex = $stringIndex;
            }
            $stringIndex = $nextIndex;
        }
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_AltGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_AltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0)
            return $nextIndex;
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_AltGroupQuantifierSet_setNext($this, $next) {
        $this.$next2 = $next;
        $this.$innerSet.$setNext($next);
    }
    var jur_PosAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet);
    function jur_PosAltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex <= 0)
            $nextIndex = $stringIndex;
        return $this.$next2.$matches($nextIndex, $testString, $matchResult);
    }
    function jur_PosAltGroupQuantifierSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_CompositeGroupQuantifierSet() {
        var a = this; jur_GroupQuantifierSet.call(a);
        a.$quantifier0 = null;
        a.$setCounter = 0;
    }
    function jur_CompositeGroupQuantifierSet__init_0(var_0, var_1, var_2, var_3, var_4) {
        var var_5 = new jur_CompositeGroupQuantifierSet();
        jur_CompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
        return var_5;
    }
    function jur_CompositeGroupQuantifierSet__init_($this, $quant, $innerSet, $next, $type, $setCounter) {
        jur_QuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$quantifier0 = $quant;
        $this.$setCounter = $setCounter;
    }
    function jur_CompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $enterCounter, $nextIndex;
        $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($enterCounter >= $this.$quantifier0.$max0)
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$setCounter;
        $enterCounter = $enterCounter + 1 | 0;
        jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $nextIndex;
        }
        $nextIndex = $this.$setCounter;
        $enterCounter = $enterCounter + (-1) | 0;
        jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
        if ($enterCounter >= $this.$quantifier0.$min0)
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return (-1);
    }
    var jur_PosCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet);
    function jur_PosCompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $counter, $max, $nextIndex;
        $counter = 0;
        $max = $this.$quantifier0.$max0;
        a: {
            while (true) {
                $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
                if ($nextIndex <= $stringIndex)
                    break a;
                if ($counter >= $max)
                    break;
                $counter = $counter + 1 | 0;
                $stringIndex = $nextIndex;
            }
        }
        if ($nextIndex < 0 && $counter < $this.$quantifier0.$min0)
            return (-1);
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_ReluctantGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_ReluctantGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $res;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $res = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($res >= 0)
            return $res;
        return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_RelAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet);
    function jur_RelAltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex < 0)
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        return $nextIndex;
    }
    var jur_RelCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet);
    function jur_RelCompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $enterCounter, var$5, $nextIndex;
        $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        var$5 = $this.$quantifier0;
        if ($enterCounter >= var$5.$max0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        }
        if ($enterCounter < var$5.$min0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        } else {
            $nextIndex = $this.$next2.$matches($stringIndex, $testString, $matchResult);
            if ($nextIndex >= 0) {
                jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
                return $nextIndex;
            }
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        }
        return $nextIndex;
    }
    var jur_DotAllQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet);
    function jur_DotAllQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength;
        $strLength = $matchResult.$rightBound0;
        if ($strLength > $stringIndex)
            return $this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult);
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_DotAllQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength;
        $strLength = $matchResult.$rightBound0;
        if ($this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult) >= 0)
            return $stringIndex;
        return (-1);
    }
    function jur_DotQuantifierSet() {
        jur_QuantifierSet.call(this);
        this.$lt = null;
    }
    function jur_DotQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $startSearch;
        $strLength = $matchResult.$rightBound0;
        $startSearch = jur_DotQuantifierSet_findLineTerminator($this, $stringIndex, $strLength, $testString);
        if ($startSearch >= 0)
            $strLength = $startSearch;
        if ($strLength > $stringIndex)
            return $this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult);
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_DotQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $res, $nextSearch, $leftBound;
        $strLength = $matchResult.$rightBound0;
        $res = $this.$next2.$find0($stringIndex, $testString, $matchResult);
        if ($res < 0)
            return (-1);
        $nextSearch = jur_DotQuantifierSet_findLineTerminator($this, $res, $strLength, $testString);
        if ($nextSearch >= 0)
            $strLength = $nextSearch;
        $nextSearch = jl_Math_max($res, $this.$next2.$findBack($res, $strLength, $testString, $matchResult));
        if ($nextSearch <= 0)
            $leftBound = $nextSearch ? (-1) : 0;
        else {
            $leftBound = $nextSearch - 1 | 0;
            a: {
                while (true) {
                    if ($leftBound < $stringIndex) {
                        $leftBound = (-1);
                        break a;
                    }
                    if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $leftBound)))
                        break;
                    $leftBound = $leftBound + (-1) | 0;
                }
            }
        }
        if ($leftBound >= $stringIndex)
            $stringIndex = $leftBound >= $nextSearch ? $leftBound : $leftBound + 1 | 0;
        return $stringIndex;
    }
    function jur_DotQuantifierSet_findLineTerminator($this, $i, $to, $testString) {
        while (true) {
            if ($i >= $to)
                return (-1);
            if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $i)))
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    var jur_AbstractLineTerminator = $rt_classWithoutFields();
    var jur_AbstractLineTerminator_unixLT = null;
    var jur_AbstractLineTerminator_unicodeLT = null;
    function jur_AbstractLineTerminator_getInstance($flag) {
        var var$2;
        if (!($flag & 1)) {
            var$2 = jur_AbstractLineTerminator_unicodeLT;
            if (var$2 !== null)
                return var$2;
            var$2 = new jur_AbstractLineTerminator$2;
            jur_AbstractLineTerminator_unicodeLT = var$2;
            return var$2;
        }
        var$2 = jur_AbstractLineTerminator_unixLT;
        if (var$2 !== null)
            return var$2;
        var$2 = new jur_AbstractLineTerminator$1;
        jur_AbstractLineTerminator_unixLT = var$2;
        return var$2;
    }
    var jur_PossessiveQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_PossessiveQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        a: {
            while (true) {
                if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                    break a;
                var$4 = $this.$leaf.$accepts($stringIndex, $testString);
                if (var$4 < 1)
                    break;
                $stringIndex = $stringIndex + var$4 | 0;
            }
        }
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PossessiveAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet);
    function jur_PossessiveAltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$4 >= 1)
                $stringIndex = $stringIndex + var$4 | 0;
        }
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PossessiveCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet);
    function jur_PossessiveCompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, $shift;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max0;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while (true) {
                        if ($i >= $max)
                            break a;
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                            break a;
                        $shift = $this.$leaf.$accepts($stringIndex, $testString);
                        if ($shift < 1)
                            break;
                        $stringIndex = $stringIndex + $shift | 0;
                        $i = $i + 1 | 0;
                    }
                }
                return $this.$next2.$matches($stringIndex, $testString, $matchResult);
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            $shift = $this.$leaf.$accepts($stringIndex, $testString);
            if ($shift < 1)
                break;
            $stringIndex = $stringIndex + $shift | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_ReluctantQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_ReluctantQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        while (true) {
            var$4 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
            if (var$4 >= 0)
                break;
            if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                var$4 = $this.$leaf.$accepts($stringIndex, $testString);
                $stringIndex = $stringIndex + var$4 | 0;
            }
            if (var$4 < 1)
                return (-1);
        }
        return var$4;
    }
    var jur_ReluctantAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet);
    function jur_ReluctantAltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            return $shift;
        return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_ReluctantCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet);
    function jur_ReluctantCompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, var$8, var$9;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max0;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while (true) {
                        var$8 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
                        if (var$8 >= 0)
                            break;
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                            var$8 = $this.$leaf.$accepts($stringIndex, $testString);
                            $stringIndex = $stringIndex + var$8 | 0;
                            $i = $i + 1 | 0;
                        }
                        if (var$8 < 1)
                            break a;
                        if ($i > $max)
                            break a;
                    }
                    return var$8;
                }
                return (-1);
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            var$9 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$9 < 1)
                break;
            $stringIndex = $stringIndex + var$9 | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_SOLSet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_SOLSet_matches($this, $strIndex, $testString, $matchResult) {
        if ($strIndex && !($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound0))
            return (-1);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    function jur_SOLSet_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_WordBoundary() {
        jur_AbstractSet.call(this);
        this.$positive = 0;
    }
    function jur_WordBoundary__init_(var_0) {
        var var_1 = new jur_WordBoundary();
        jur_WordBoundary__init_0(var_1, var_0);
        return var_1;
    }
    function jur_WordBoundary__init_0($this, $positive) {
        jur_AbstractSet__init_($this);
        $this.$positive = $positive;
    }
    function jur_WordBoundary_matches($this, $stringIndex, $testString, $matchResult) {
        var $ch1, $ch2, $leftBound;
        $ch1 = $stringIndex < $matchResult.$rightBound0 ? jl_String_charAt($testString, $stringIndex) : 32;
        $ch2 = !$stringIndex ? 32 : jl_String_charAt($testString, $stringIndex - 1 | 0);
        $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound0;
        return ($ch1 != 32 && !jur_WordBoundary_isSpace($this, $ch1, $stringIndex, $leftBound, $testString) ? 0 : 1) ^ ($ch2 != 32 && !jur_WordBoundary_isSpace($this, $ch2, $stringIndex - 1 | 0, $leftBound, $testString) ? 0 : 1) ^ $this.$positive ? (-1) : $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_WordBoundary_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_WordBoundary_isSpace($this, $ch, $index, $leftBound, $testString) {
        var var$5;
        if (!jl_Character_isLetterOrDigit($ch) && $ch != 95) {
            a: {
                if (jl_Character_getType($ch) == 6)
                    while (true) {
                        $index = $index + (-1) | 0;
                        if ($index < $leftBound)
                            break a;
                        var$5 = jl_String_charAt($testString, $index);
                        if (jl_Character_isLetterOrDigit(var$5))
                            return 0;
                        if (jl_Character_getType(var$5) != 6)
                            return 1;
                    }
            }
            return 1;
        }
        return 0;
    }
    var jur_PreviousMatch = $rt_classWithoutFields(jur_AbstractSet);
    function jur_PreviousMatch_matches($this, $stringIndex, $testString, $matchResult) {
        if ($stringIndex != $matchResult.$previousMatch)
            return (-1);
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_PreviousMatch_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_EOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter = 0;
    }
    function jur_EOLSet__init_0(var_0) {
        var var_1 = new jur_EOLSet();
        jur_EOLSet__init_(var_1, var_0);
        return var_1;
    }
    function jur_EOLSet__init_($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter = $counter;
    }
    function jur_EOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound, var$5, $ch;
        $rightBound = !$matchResult.$anchoringBounds ? jl_String_length($testString) : $matchResult.$rightBound0;
        if ($strIndex >= $rightBound) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        }
        var$5 = $rightBound - $strIndex | 0;
        if (var$5 == 2 && jl_String_charAt($testString, $strIndex) == 13 && jl_String_charAt($testString, $strIndex + 1 | 0) == 10) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        }
        a: {
            if (var$5 == 1) {
                $ch = jl_String_charAt($testString, $strIndex);
                if ($ch == 10)
                    break a;
                if ($ch == 13)
                    break a;
                if ($ch == 133)
                    break a;
                if (($ch | 1) == 8233)
                    break a;
            }
            return (-1);
        }
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    function jur_EOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, (-1));
        return $res;
    }
    var jur_EOISet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_EOISet_matches($this, $stringIndex, $testString, $matchResult) {
        if ($stringIndex < ($matchResult.$transparentBounds ? jl_String_length($testString) : $matchResult.$rightBound0))
            return (-1);
        $matchResult.$hitEnd = 1;
        $matchResult.$requireEnd = 1;
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_EOISet_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_MultiLineSOLSet() {
        jur_AbstractSet.call(this);
        this.$lt0 = null;
    }
    function jur_MultiLineSOLSet_matches($this, $strIndex, $testString, $matchResult) {
        a: {
            if ($strIndex != $matchResult.$rightBound0) {
                if (!$strIndex)
                    break a;
                if ($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound0)
                    break a;
                if ($this.$lt0.$isAfterLineTerminator(jl_String_charAt($testString, $strIndex - 1 | 0), jl_String_charAt($testString, $strIndex)))
                    break a;
            }
            return (-1);
        }
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    function jur_MultiLineSOLSet_hasConsumed($this, $matchResult) {
        return 0;
    }
    var jur_DotAllSet = $rt_classWithoutFields(jur_JointSet);
    function jur_DotAllSet__init_() {
        var var_0 = new jur_DotAllSet();
        jur_DotAllSet__init_0(var_0);
        return var_0;
    }
    function jur_DotAllSet__init_0($this) {
        jur_AbstractSet__init_($this);
    }
    function jur_DotAllSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $high, var$7;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        if (var$5 > $strLength) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if (jl_Character_isHighSurrogate($high)) {
            var$7 = $stringIndex + 2 | 0;
            if (var$7 <= $strLength && jl_Character_isSurrogatePair($high, jl_String_charAt($testString, var$5)))
                return $this.$next2.$matches(var$7, $testString, $matchResult);
        }
        return $this.$next2.$matches(var$5, $testString, $matchResult);
    }
    function jur_DotAllSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_DotAllSet_getType($this) {
        return (-2147483602);
    }
    function jur_DotAllSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_DotSet() {
        jur_JointSet.call(this);
        this.$lt1 = null;
    }
    function jur_DotSet__init_(var_0) {
        var var_1 = new jur_DotSet();
        jur_DotSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_DotSet__init_0($this, $lt) {
        jur_AbstractSet__init_($this);
        $this.$lt1 = $lt;
    }
    function jur_DotSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $high, $low;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        if (var$5 > $strLength) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if (jl_Character_isHighSurrogate($high)) {
            $stringIndex = $stringIndex + 2 | 0;
            if ($stringIndex <= $strLength) {
                $low = jl_String_charAt($testString, var$5);
                if (jl_Character_isSurrogatePair($high, $low))
                    return $this.$lt1.$isLineTerminator(jl_Character_toCodePoint($high, $low)) ? (-1) : $this.$next2.$matches($stringIndex, $testString, $matchResult);
            }
        }
        return $this.$lt1.$isLineTerminator($high) ? (-1) : $this.$next2.$matches(var$5, $testString, $matchResult);
    }
    function jur_DotSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_DotSet_getType($this) {
        return (-2147483602);
    }
    function jur_DotSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_UEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter0 = 0;
    }
    function jur_UEOLSet__init_(var_0) {
        var var_1 = new jur_UEOLSet();
        jur_UEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter0 = $counter;
    }
    function jur_UEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound;
        $rightBound = !$matchResult.$anchoringBounds ? jl_String_length($testString) : $matchResult.$rightBound0;
        if ($strIndex >= $rightBound) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        }
        if (($rightBound - $strIndex | 0) == 1 && jl_String_charAt($testString, $strIndex) == 10) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 1);
            return $this.$next2.$matches($strIndex + 1 | 0, $testString, $matchResult);
        }
        return (-1);
    }
    function jur_UEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter0) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, (-1));
        return $res;
    }
    function jur_UMultiLineEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter1 = 0;
    }
    function jur_UMultiLineEOLSet__init_(var_0) {
        var var_1 = new jur_UMultiLineEOLSet();
        jur_UMultiLineEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UMultiLineEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter1 = $counter;
    }
    function jur_UMultiLineEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        if ((!$matchResult.$anchoringBounds ? jl_String_length($testString) - $strIndex | 0 : $matchResult.$rightBound0 - $strIndex | 0) <= 0) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        }
        if (jl_String_charAt($testString, $strIndex) != 10)
            return (-1);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, 1);
        return $this.$next2.$matches($strIndex + 1 | 0, $testString, $matchResult);
    }
    function jur_UMultiLineEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter1) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, (-1));
        return $res;
    }
    function jur_MultiLineEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter2 = 0;
    }
    function jur_MultiLineEOLSet__init_(var_0) {
        var var_1 = new jur_MultiLineEOLSet();
        jur_MultiLineEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_MultiLineEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter2 = $counter;
    }
    function jur_MultiLineEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $strDif, $ch1, $ch2;
        $strDif = !$matchResult.$anchoringBounds ? jl_String_length($testString) - $strIndex | 0 : $matchResult.$rightBound0 - $strIndex | 0;
        if (!$strDif) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        }
        if ($strDif < 2) {
            $ch1 = jl_String_charAt($testString, $strIndex);
            $ch2 = 97;
        } else {
            $ch1 = jl_String_charAt($testString, $strIndex);
            $ch2 = jl_String_charAt($testString, $strIndex + 1 | 0);
        }
        switch ($ch1) {
            case 10:
            case 133:
            case 8232:
            case 8233:
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                return $this.$next2.$matches($strIndex, $testString, $matchResult);
            case 13:
                if ($ch2 != 10) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                    return $this.$next2.$matches($strIndex, $testString, $matchResult);
                }
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                return $this.$next2.$matches($strIndex, $testString, $matchResult);
            default:
        }
        return (-1);
    }
    function jur_MultiLineEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter2) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, (-1));
        return $res;
    }
    function jur_CIBackReferenceSet() {
        var a = this; jur_JointSet.call(a);
        a.$referencedGroup = 0;
        a.$consCounter3 = 0;
    }
    function jur_CIBackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_CIBackReferenceSet();
        jur_CIBackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_AbstractSet__init_($this);
        $this.$referencedGroup = $groupIndex;
        $this.$consCounter3 = $consCounter;
    }
    function jur_CIBackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $i, var$6, var$7;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $i = 0;
            while (true) {
                if ($i >= jl_String_length($group)) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, jl_String_length($group));
                    return $this.$next2.$matches($stringIndex + jl_String_length($group) | 0, $testString, $matchResult);
                }
                var$6 = jl_String_charAt($group, $i);
                var$7 = $stringIndex + $i | 0;
                if (var$6 != jl_String_charAt($testString, var$7) && jur_Pattern_getSupplement(jl_String_charAt($group, $i)) != jl_String_charAt($testString, var$7))
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        return (-1);
    }
    function jur_CIBackReferenceSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_CIBackReferenceSet_getString($this, $matchResult) {
        var var$2, var$3;
        var$2 = $this.$referencedGroup;
        var$3 = jur_MatchResultImpl_getStart($matchResult, var$2);
        var$2 = jur_MatchResultImpl_getEnd($matchResult, var$2);
        return (var$2 | var$3 | (var$2 - var$3 | 0)) >= 0 && var$2 <= jl_String_length($matchResult.$string2) ? jl_String_substring($matchResult.$string2, var$3, var$2) : null;
    }
    function jur_CIBackReferenceSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter3) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, (-1));
        return $res;
    }
    var jur_BackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet);
    function jur_BackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_BackReferenceSet();
        jur_BackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_BackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter);
    }
    function jur_BackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $shift;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $shift = !jl_String_startsWith($testString, $group, $stringIndex) ? (-1) : jl_String_length($group);
            if ($shift < 0)
                return (-1);
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, $shift);
            return $this.$next2.$matches($stringIndex + $shift | 0, $testString, $matchResult);
        }
        return (-1);
    }
    function jur_BackReferenceSet_find($this, $strIndex, $testString, $matchResult) {
        var $group, $strLength;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        $strLength = $matchResult.$leftBound0;
        if ($group !== null && ($strIndex + jl_String_length($group) | 0) <= $strLength) {
            while (true) {
                if ($strIndex > $strLength)
                    return (-1);
                $strIndex = jl_String_indexOf0($testString, $group, $strIndex);
                if ($strIndex < 0)
                    return (-1);
                if ($this.$next2.$matches($strIndex + jl_String_length($group) | 0, $testString, $matchResult) >= 0)
                    break;
                $strIndex = $strIndex + 1 | 0;
            }
            return $strIndex;
        }
        return (-1);
    }
    function jur_BackReferenceSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
        var $group, var$6;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group === null)
            return (-1);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_Math_min($lastIndex, jl_String_length($testString) - jl_String_length($group) | 0);
                b: {
                    c: while (true) {
                        if (var$6 < 0) {
                            var$6 = (-1);
                            break b;
                        }
                        $lastIndex = 0;
                        while (true) {
                            if ($lastIndex >= jl_String_length($group))
                                break c;
                            if (jl_String_charAt($testString, var$6 + $lastIndex | 0) != jl_String_charAt($group, $lastIndex))
                                break;
                            $lastIndex = $lastIndex + 1 | 0;
                        }
                        var$6 = var$6 + (-1) | 0;
                    }
                }
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                if ($this.$next2.$matches(var$6 + jl_String_length($group) | 0, $testString, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_BackReferenceSet_first($this, $set) {
        return 1;
    }
    var jur_UCIBackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet);
    function jur_UCIBackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_UCIBackReferenceSet();
        jur_UCIBackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_UCIBackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter);
    }
    function jur_UCIBackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $i;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $i = 0;
            while (true) {
                if ($i >= jl_String_length($group)) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, jl_String_length($group));
                    return $this.$next2.$matches($stringIndex + jl_String_length($group) | 0, $testString, $matchResult);
                }
                if (jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($group, $i))) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $stringIndex + $i | 0))))
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        return (-1);
    }
    var jl_StringBuffer = $rt_classWithoutFields(jl_AbstractStringBuilder);
    function jl_StringBuffer_insert($this, var$1, var$2, var$3, var$4) {
        jl_AbstractStringBuilder_insert2($this, var$1, var$2, var$3, var$4);
        return $this;
    }
    function jl_StringBuffer_append($this, var$1, var$2, var$3) {
        jl_AbstractStringBuilder_append1($this, var$1, var$2, var$3);
        return $this;
    }
    function jl_StringBuffer_ensureCapacity($this, var$1) {
        jl_AbstractStringBuilder_ensureCapacity($this, var$1);
    }
    function jl_StringBuffer_insert0($this, var$1, var$2) {
        jl_AbstractStringBuilder_insert1($this, var$1, var$2);
        return $this;
    }
    function jur_SequenceSet() {
        var a = this; jur_LeafSet.call(a);
        a.$string0 = null;
        a.$leftToRight = null;
        a.$rightToLeft = null;
    }
    function jur_SequenceSet_accepts($this, $strIndex, $testString) {
        return !jur_SequenceSet_startsWith($this, $testString, $strIndex) ? (-1) : $this.$charCount;
    }
    function jur_SequenceSet_find($this, $strIndex, $testString, $matchResult) {
        var $strLength, var$5, var$6;
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex > $strLength)
                return (-1);
            var$5 = jl_String_charAt($this.$string0, $this.$charCount - 1 | 0);
            a: {
                while (true) {
                    var$6 = $this.$charCount;
                    if ($strIndex > ($strLength - var$6 | 0)) {
                        $strIndex = (-1);
                        break a;
                    }
                    var$6 = jl_String_charAt($testString, ($strIndex + var$6 | 0) - 1 | 0);
                    if (var$6 == var$5 && jur_SequenceSet_startsWith($this, $testString, $strIndex))
                        break;
                    $strIndex = $strIndex + jur_SequenceSet$IntHash_get($this.$leftToRight, var$6) | 0;
                }
            }
            if ($strIndex < 0)
                return (-1);
            if ($this.$next2.$matches($strIndex + $this.$charCount | 0, $testString, $matchResult) >= 0)
                break;
            $strIndex = $strIndex + 1 | 0;
        }
        return $strIndex;
    }
    function jur_SequenceSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
        var var$5, var$6;
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$5 = jl_String_charAt($this.$string0, 0);
            var$6 = (jl_String_length($testString) - $lastIndex | 0) - $this.$charCount | 0;
            if (var$6 <= 0)
                $lastIndex = $lastIndex + var$6 | 0;
            a: {
                while (true) {
                    if ($lastIndex < $strIndex) {
                        $lastIndex = (-1);
                        break a;
                    }
                    var$6 = jl_String_charAt($testString, $lastIndex);
                    if (var$6 == var$5 && jur_SequenceSet_startsWith($this, $testString, $lastIndex))
                        break;
                    $lastIndex = $lastIndex - jur_SequenceSet$IntHash_get($this.$rightToLeft, var$6) | 0;
                }
            }
            if ($lastIndex < 0)
                return (-1);
            if ($this.$next2.$matches($lastIndex + $this.$charCount | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    function jur_SequenceSet_first($this, $set) {
        var var$2;
        if ($set instanceof jur_CharSet)
            return $set.$ch2 != jl_String_charAt($this.$string0, 0) ? 0 : 1;
        if ($set instanceof jur_RangeSet)
            return jur_RangeSet_accepts($set, 0, jl_String_substring($this.$string0, 0, 1)) <= 0 ? 0 : 1;
        if (!($set instanceof jur_SupplRangeSet)) {
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return jl_String_length($this.$string0) > 1 && $set.$ch1 == jl_Character_toCodePoint(jl_String_charAt($this.$string0, 0), jl_String_charAt($this.$string0, 1)) ? 1 : 0;
        }
        a: {
            b: {
                $set = $set;
                if (!$set.$contains1(jl_String_charAt($this.$string0, 0))) {
                    if (jl_String_length($this.$string0) <= 1)
                        break b;
                    if (!$set.$contains1(jl_Character_toCodePoint(jl_String_charAt($this.$string0, 0), jl_String_charAt($this.$string0, 1))))
                        break b;
                }
                var$2 = 1;
                break a;
            }
            var$2 = 0;
        }
        return var$2;
    }
    function jur_SequenceSet_startsWith($this, $str, $from) {
        var $i;
        $i = 0;
        while ($i < $this.$charCount) {
            if (jl_String_charAt($str, $i + $from | 0) != jl_String_charAt($this.$string0, $i))
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    function jur_UCISequenceSet() {
        jur_LeafSet.call(this);
        this.$string3 = null;
    }
    function jur_UCISequenceSet__init_(var_0) {
        var var_1 = new jur_UCISequenceSet();
        jur_UCISequenceSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCISequenceSet__init_0($this, $substring) {
        var $res, $i, var$4;
        jur_LeafSet__init_($this);
        $res = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($res);
        $i = 0;
        while (true) {
            var$4 = $rt_compare($i, $substring.$length0);
            if (var$4 >= 0) {
                $this.$string3 = jl_AbstractStringBuilder_toString($res);
                $this.$charCount = $res.$length0;
                return;
            }
            if ($i < 0)
                break;
            if (var$4 >= 0)
                break;
            jl_AbstractStringBuilder_append($res, jl_Character_toLowerCase(jl_Character_toUpperCase($substring.$buffer.data[$i])));
            $i = $i + 1 | 0;
        }
        $substring = new jl_IndexOutOfBoundsException;
        jl_Exception__init_($substring);
        $rt_throw($substring);
    }
    function jur_UCISequenceSet_accepts($this, $strIndex, $testString) {
        var $i;
        $i = 0;
        while (true) {
            if ($i >= jl_String_length($this.$string3))
                return jl_String_length($this.$string3);
            if (jl_String_charAt($this.$string3, $i) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex + $i | 0))))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_CISequenceSet() {
        jur_LeafSet.call(this);
        this.$string1 = null;
    }
    function jur_CISequenceSet_accepts($this, $strIndex, $testString) {
        var $i, var$4, var$5;
        $i = 0;
        while (true) {
            if ($i >= jl_String_length($this.$string1))
                return jl_String_length($this.$string1);
            var$4 = jl_String_charAt($this.$string1, $i);
            var$5 = $strIndex + $i | 0;
            if (var$4 != jl_String_charAt($testString, var$5) && jur_Pattern_getSupplement(jl_String_charAt($this.$string1, $i)) != jl_String_charAt($testString, var$5))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_AbstractCharClass$PredefinedCharacterClasses = $rt_classWithoutFields();
    var jur_AbstractCharClass$PredefinedCharacterClasses_space = null;
    var jur_AbstractCharClass$PredefinedCharacterClasses_digit = null;
    var jur_AbstractCharClass$PredefinedCharacterClasses_contents = null;
    function jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit() {
        jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit = $rt_eraseClinit(jur_AbstractCharClass$PredefinedCharacterClasses);
        jur_AbstractCharClass$PredefinedCharacterClasses__clinit_();
    }
    function jur_AbstractCharClass$PredefinedCharacterClasses__clinit_() {
        jur_AbstractCharClass$PredefinedCharacterClasses_space = jur_AbstractCharClass$LazySpace__init_();
        jur_AbstractCharClass$PredefinedCharacterClasses_digit = jur_AbstractCharClass$LazyDigit__init_();
        jur_AbstractCharClass$PredefinedCharacterClasses_contents = $rt_createArrayFromData($rt_arraycls(jl_Object), [$rt_createArrayFromData(jl_Object, [$rt_s(295), jur_AbstractCharClass$LazyLower__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(296), jur_AbstractCharClass$LazyUpper__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(297), jur_AbstractCharClass$LazyASCII__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(298), jur_AbstractCharClass$LazyAlpha__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(299), jur_AbstractCharClass$PredefinedCharacterClasses_digit]), $rt_createArrayFromData(jl_Object, [$rt_s(300), jur_AbstractCharClass$LazyAlnum__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(301), jur_AbstractCharClass$LazyPunct__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(302), jur_AbstractCharClass$LazyGraph__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(303), jur_AbstractCharClass$LazyPrint__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(304), jur_AbstractCharClass$LazyBlank__init_()]),
        $rt_createArrayFromData(jl_Object, [$rt_s(305), jur_AbstractCharClass$LazyCntrl__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(306), jur_AbstractCharClass$LazyXDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(307), jur_AbstractCharClass$LazyJavaLowerCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(308), jur_AbstractCharClass$LazyJavaUpperCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(309), jur_AbstractCharClass$LazyJavaWhitespace__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(310), jur_AbstractCharClass$LazyJavaMirrored__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(311), jur_AbstractCharClass$LazyJavaDefined__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(312), jur_AbstractCharClass$LazyJavaDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(313), jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(314), jur_AbstractCharClass$LazyJavaISOControl__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(315),
        jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(316), jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(317), jur_AbstractCharClass$LazyJavaLetter__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(318), jur_AbstractCharClass$LazyJavaLetterOrDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(319), jur_AbstractCharClass$LazyJavaSpaceChar__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(320), jur_AbstractCharClass$LazyJavaTitleCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(321), jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(322), jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(323), jur_AbstractCharClass$PredefinedCharacterClasses_space]), $rt_createArrayFromData(jl_Object, [$rt_s(324), jur_AbstractCharClass$LazyWord__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(325), jur_AbstractCharClass$LazyNonWord__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(326), jur_AbstractCharClass$PredefinedCharacterClasses_space]), $rt_createArrayFromData(jl_Object, [$rt_s(327), jur_AbstractCharClass$LazyNonSpace__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(328), jur_AbstractCharClass$PredefinedCharacterClasses_digit]), $rt_createArrayFromData(jl_Object, [$rt_s(329), jur_AbstractCharClass$LazyNonDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(330),
        jur_AbstractCharClass$LazyRange__init_(0, 127)]), $rt_createArrayFromData(jl_Object, [$rt_s(331), jur_AbstractCharClass$LazyRange__init_(128, 255)]), $rt_createArrayFromData(jl_Object, [$rt_s(332), jur_AbstractCharClass$LazyRange__init_(256, 383)]), $rt_createArrayFromData(jl_Object, [$rt_s(333), jur_AbstractCharClass$LazyRange__init_(384, 591)]), $rt_createArrayFromData(jl_Object, [$rt_s(334), jur_AbstractCharClass$LazyRange__init_(592, 687)]), $rt_createArrayFromData(jl_Object, [$rt_s(335), jur_AbstractCharClass$LazyRange__init_(688,
        767)]), $rt_createArrayFromData(jl_Object, [$rt_s(336), jur_AbstractCharClass$LazyRange__init_(768, 879)]), $rt_createArrayFromData(jl_Object, [$rt_s(337), jur_AbstractCharClass$LazyRange__init_(880, 1023)]), $rt_createArrayFromData(jl_Object, [$rt_s(338), jur_AbstractCharClass$LazyRange__init_(1024, 1279)]), $rt_createArrayFromData(jl_Object, [$rt_s(339), jur_AbstractCharClass$LazyRange__init_(1280, 1327)]), $rt_createArrayFromData(jl_Object, [$rt_s(340), jur_AbstractCharClass$LazyRange__init_(1328,
        1423)]), $rt_createArrayFromData(jl_Object, [$rt_s(341), jur_AbstractCharClass$LazyRange__init_(1424, 1535)]), $rt_createArrayFromData(jl_Object, [$rt_s(342), jur_AbstractCharClass$LazyRange__init_(1536, 1791)]), $rt_createArrayFromData(jl_Object, [$rt_s(343), jur_AbstractCharClass$LazyRange__init_(1792, 1871)]), $rt_createArrayFromData(jl_Object, [$rt_s(344), jur_AbstractCharClass$LazyRange__init_(1872, 1919)]), $rt_createArrayFromData(jl_Object, [$rt_s(345), jur_AbstractCharClass$LazyRange__init_(1920,
        1983)]), $rt_createArrayFromData(jl_Object, [$rt_s(346), jur_AbstractCharClass$LazyRange__init_(2304, 2431)]), $rt_createArrayFromData(jl_Object, [$rt_s(347), jur_AbstractCharClass$LazyRange__init_(2432, 2559)]), $rt_createArrayFromData(jl_Object, [$rt_s(348), jur_AbstractCharClass$LazyRange__init_(2560, 2687)]), $rt_createArrayFromData(jl_Object, [$rt_s(349), jur_AbstractCharClass$LazyRange__init_(2688, 2815)]), $rt_createArrayFromData(jl_Object, [$rt_s(350), jur_AbstractCharClass$LazyRange__init_(2816,
        2943)]), $rt_createArrayFromData(jl_Object, [$rt_s(351), jur_AbstractCharClass$LazyRange__init_(2944, 3071)]), $rt_createArrayFromData(jl_Object, [$rt_s(352), jur_AbstractCharClass$LazyRange__init_(3072, 3199)]), $rt_createArrayFromData(jl_Object, [$rt_s(353), jur_AbstractCharClass$LazyRange__init_(3200, 3327)]), $rt_createArrayFromData(jl_Object, [$rt_s(354), jur_AbstractCharClass$LazyRange__init_(3328, 3455)]), $rt_createArrayFromData(jl_Object, [$rt_s(355), jur_AbstractCharClass$LazyRange__init_(3456,
        3583)]), $rt_createArrayFromData(jl_Object, [$rt_s(356), jur_AbstractCharClass$LazyRange__init_(3584, 3711)]), $rt_createArrayFromData(jl_Object, [$rt_s(357), jur_AbstractCharClass$LazyRange__init_(3712, 3839)]), $rt_createArrayFromData(jl_Object, [$rt_s(358), jur_AbstractCharClass$LazyRange__init_(3840, 4095)]), $rt_createArrayFromData(jl_Object, [$rt_s(359), jur_AbstractCharClass$LazyRange__init_(4096, 4255)]), $rt_createArrayFromData(jl_Object, [$rt_s(360), jur_AbstractCharClass$LazyRange__init_(4256,
        4351)]), $rt_createArrayFromData(jl_Object, [$rt_s(361), jur_AbstractCharClass$LazyRange__init_(4352, 4607)]), $rt_createArrayFromData(jl_Object, [$rt_s(362), jur_AbstractCharClass$LazyRange__init_(4608, 4991)]), $rt_createArrayFromData(jl_Object, [$rt_s(363), jur_AbstractCharClass$LazyRange__init_(4992, 5023)]), $rt_createArrayFromData(jl_Object, [$rt_s(364), jur_AbstractCharClass$LazyRange__init_(5024, 5119)]), $rt_createArrayFromData(jl_Object, [$rt_s(365), jur_AbstractCharClass$LazyRange__init_(5120,
        5759)]), $rt_createArrayFromData(jl_Object, [$rt_s(366), jur_AbstractCharClass$LazyRange__init_(5760, 5791)]), $rt_createArrayFromData(jl_Object, [$rt_s(367), jur_AbstractCharClass$LazyRange__init_(5792, 5887)]), $rt_createArrayFromData(jl_Object, [$rt_s(368), jur_AbstractCharClass$LazyRange__init_(5888, 5919)]), $rt_createArrayFromData(jl_Object, [$rt_s(369), jur_AbstractCharClass$LazyRange__init_(5920, 5951)]), $rt_createArrayFromData(jl_Object, [$rt_s(370), jur_AbstractCharClass$LazyRange__init_(5952,
        5983)]), $rt_createArrayFromData(jl_Object, [$rt_s(371), jur_AbstractCharClass$LazyRange__init_(5984, 6015)]), $rt_createArrayFromData(jl_Object, [$rt_s(372), jur_AbstractCharClass$LazyRange__init_(6016, 6143)]), $rt_createArrayFromData(jl_Object, [$rt_s(373), jur_AbstractCharClass$LazyRange__init_(6144, 6319)]), $rt_createArrayFromData(jl_Object, [$rt_s(374), jur_AbstractCharClass$LazyRange__init_(6400, 6479)]), $rt_createArrayFromData(jl_Object, [$rt_s(375), jur_AbstractCharClass$LazyRange__init_(6480,
        6527)]), $rt_createArrayFromData(jl_Object, [$rt_s(376), jur_AbstractCharClass$LazyRange__init_(6528, 6623)]), $rt_createArrayFromData(jl_Object, [$rt_s(377), jur_AbstractCharClass$LazyRange__init_(6624, 6655)]), $rt_createArrayFromData(jl_Object, [$rt_s(378), jur_AbstractCharClass$LazyRange__init_(6656, 6687)]), $rt_createArrayFromData(jl_Object, [$rt_s(379), jur_AbstractCharClass$LazyRange__init_(7424, 7551)]), $rt_createArrayFromData(jl_Object, [$rt_s(380), jur_AbstractCharClass$LazyRange__init_(7552,
        7615)]), $rt_createArrayFromData(jl_Object, [$rt_s(381), jur_AbstractCharClass$LazyRange__init_(7616, 7679)]), $rt_createArrayFromData(jl_Object, [$rt_s(382), jur_AbstractCharClass$LazyRange__init_(7680, 7935)]), $rt_createArrayFromData(jl_Object, [$rt_s(383), jur_AbstractCharClass$LazyRange__init_(7936, 8191)]), $rt_createArrayFromData(jl_Object, [$rt_s(384), jur_AbstractCharClass$LazyRange__init_(8192, 8303)]), $rt_createArrayFromData(jl_Object, [$rt_s(385), jur_AbstractCharClass$LazyRange__init_(8304,
        8351)]), $rt_createArrayFromData(jl_Object, [$rt_s(386), jur_AbstractCharClass$LazyRange__init_(8352, 8399)]), $rt_createArrayFromData(jl_Object, [$rt_s(387), jur_AbstractCharClass$LazyRange__init_(8400, 8447)]), $rt_createArrayFromData(jl_Object, [$rt_s(388), jur_AbstractCharClass$LazyRange__init_(8448, 8527)]), $rt_createArrayFromData(jl_Object, [$rt_s(389), jur_AbstractCharClass$LazyRange__init_(8528, 8591)]), $rt_createArrayFromData(jl_Object, [$rt_s(390), jur_AbstractCharClass$LazyRange__init_(8592,
        8703)]), $rt_createArrayFromData(jl_Object, [$rt_s(391), jur_AbstractCharClass$LazyRange__init_(8704, 8959)]), $rt_createArrayFromData(jl_Object, [$rt_s(392), jur_AbstractCharClass$LazyRange__init_(8960, 9215)]), $rt_createArrayFromData(jl_Object, [$rt_s(393), jur_AbstractCharClass$LazyRange__init_(9216, 9279)]), $rt_createArrayFromData(jl_Object, [$rt_s(394), jur_AbstractCharClass$LazyRange__init_(9280, 9311)]), $rt_createArrayFromData(jl_Object, [$rt_s(395), jur_AbstractCharClass$LazyRange__init_(9312,
        9471)]), $rt_createArrayFromData(jl_Object, [$rt_s(396), jur_AbstractCharClass$LazyRange__init_(9472, 9599)]), $rt_createArrayFromData(jl_Object, [$rt_s(397), jur_AbstractCharClass$LazyRange__init_(9600, 9631)]), $rt_createArrayFromData(jl_Object, [$rt_s(398), jur_AbstractCharClass$LazyRange__init_(9632, 9727)]), $rt_createArrayFromData(jl_Object, [$rt_s(399), jur_AbstractCharClass$LazyRange__init_(9728, 9983)]), $rt_createArrayFromData(jl_Object, [$rt_s(400), jur_AbstractCharClass$LazyRange__init_(9984,
        10175)]), $rt_createArrayFromData(jl_Object, [$rt_s(401), jur_AbstractCharClass$LazyRange__init_(10176, 10223)]), $rt_createArrayFromData(jl_Object, [$rt_s(402), jur_AbstractCharClass$LazyRange__init_(10224, 10239)]), $rt_createArrayFromData(jl_Object, [$rt_s(403), jur_AbstractCharClass$LazyRange__init_(10240, 10495)]), $rt_createArrayFromData(jl_Object, [$rt_s(404), jur_AbstractCharClass$LazyRange__init_(10496, 10623)]), $rt_createArrayFromData(jl_Object, [$rt_s(405), jur_AbstractCharClass$LazyRange__init_(10624,
        10751)]), $rt_createArrayFromData(jl_Object, [$rt_s(406), jur_AbstractCharClass$LazyRange__init_(10752, 11007)]), $rt_createArrayFromData(jl_Object, [$rt_s(407), jur_AbstractCharClass$LazyRange__init_(11008, 11263)]), $rt_createArrayFromData(jl_Object, [$rt_s(408), jur_AbstractCharClass$LazyRange__init_(11264, 11359)]), $rt_createArrayFromData(jl_Object, [$rt_s(409), jur_AbstractCharClass$LazyRange__init_(11392, 11519)]), $rt_createArrayFromData(jl_Object, [$rt_s(410), jur_AbstractCharClass$LazyRange__init_(11520,
        11567)]), $rt_createArrayFromData(jl_Object, [$rt_s(411), jur_AbstractCharClass$LazyRange__init_(11568, 11647)]), $rt_createArrayFromData(jl_Object, [$rt_s(412), jur_AbstractCharClass$LazyRange__init_(11648, 11743)]), $rt_createArrayFromData(jl_Object, [$rt_s(413), jur_AbstractCharClass$LazyRange__init_(11776, 11903)]), $rt_createArrayFromData(jl_Object, [$rt_s(414), jur_AbstractCharClass$LazyRange__init_(11904, 12031)]), $rt_createArrayFromData(jl_Object, [$rt_s(415), jur_AbstractCharClass$LazyRange__init_(12032,
        12255)]), $rt_createArrayFromData(jl_Object, [$rt_s(416), jur_AbstractCharClass$LazyRange__init_(12272, 12287)]), $rt_createArrayFromData(jl_Object, [$rt_s(417), jur_AbstractCharClass$LazyRange__init_(12288, 12351)]), $rt_createArrayFromData(jl_Object, [$rt_s(418), jur_AbstractCharClass$LazyRange__init_(12352, 12447)]), $rt_createArrayFromData(jl_Object, [$rt_s(419), jur_AbstractCharClass$LazyRange__init_(12448, 12543)]), $rt_createArrayFromData(jl_Object, [$rt_s(420), jur_AbstractCharClass$LazyRange__init_(12544,
        12591)]), $rt_createArrayFromData(jl_Object, [$rt_s(421), jur_AbstractCharClass$LazyRange__init_(12592, 12687)]), $rt_createArrayFromData(jl_Object, [$rt_s(422), jur_AbstractCharClass$LazyRange__init_(12688, 12703)]), $rt_createArrayFromData(jl_Object, [$rt_s(423), jur_AbstractCharClass$LazyRange__init_(12704, 12735)]), $rt_createArrayFromData(jl_Object, [$rt_s(424), jur_AbstractCharClass$LazyRange__init_(12736, 12783)]), $rt_createArrayFromData(jl_Object, [$rt_s(425), jur_AbstractCharClass$LazyRange__init_(12784,
        12799)]), $rt_createArrayFromData(jl_Object, [$rt_s(426), jur_AbstractCharClass$LazyRange__init_(12800, 13055)]), $rt_createArrayFromData(jl_Object, [$rt_s(427), jur_AbstractCharClass$LazyRange__init_(13056, 13311)]), $rt_createArrayFromData(jl_Object, [$rt_s(428), jur_AbstractCharClass$LazyRange__init_(13312, 19893)]), $rt_createArrayFromData(jl_Object, [$rt_s(429), jur_AbstractCharClass$LazyRange__init_(19904, 19967)]), $rt_createArrayFromData(jl_Object, [$rt_s(430), jur_AbstractCharClass$LazyRange__init_(19968,
        40959)]), $rt_createArrayFromData(jl_Object, [$rt_s(431), jur_AbstractCharClass$LazyRange__init_(40960, 42127)]), $rt_createArrayFromData(jl_Object, [$rt_s(432), jur_AbstractCharClass$LazyRange__init_(42128, 42191)]), $rt_createArrayFromData(jl_Object, [$rt_s(433), jur_AbstractCharClass$LazyRange__init_(42752, 42783)]), $rt_createArrayFromData(jl_Object, [$rt_s(434), jur_AbstractCharClass$LazyRange__init_(43008, 43055)]), $rt_createArrayFromData(jl_Object, [$rt_s(435), jur_AbstractCharClass$LazyRange__init_(44032,
        55203)]), $rt_createArrayFromData(jl_Object, [$rt_s(436), jur_AbstractCharClass$LazyRange__init_(55296, 56191)]), $rt_createArrayFromData(jl_Object, [$rt_s(437), jur_AbstractCharClass$LazyRange__init_(56192, 56319)]), $rt_createArrayFromData(jl_Object, [$rt_s(438), jur_AbstractCharClass$LazyRange__init_(56320, 57343)]), $rt_createArrayFromData(jl_Object, [$rt_s(439), jur_AbstractCharClass$LazyRange__init_(57344, 63743)]), $rt_createArrayFromData(jl_Object, [$rt_s(440), jur_AbstractCharClass$LazyRange__init_(63744,
        64255)]), $rt_createArrayFromData(jl_Object, [$rt_s(441), jur_AbstractCharClass$LazyRange__init_(64256, 64335)]), $rt_createArrayFromData(jl_Object, [$rt_s(442), jur_AbstractCharClass$LazyRange__init_(64336, 65023)]), $rt_createArrayFromData(jl_Object, [$rt_s(443), jur_AbstractCharClass$LazyRange__init_(65024, 65039)]), $rt_createArrayFromData(jl_Object, [$rt_s(444), jur_AbstractCharClass$LazyRange__init_(65040, 65055)]), $rt_createArrayFromData(jl_Object, [$rt_s(445), jur_AbstractCharClass$LazyRange__init_(65056,
        65071)]), $rt_createArrayFromData(jl_Object, [$rt_s(446), jur_AbstractCharClass$LazyRange__init_(65072, 65103)]), $rt_createArrayFromData(jl_Object, [$rt_s(447), jur_AbstractCharClass$LazyRange__init_(65104, 65135)]), $rt_createArrayFromData(jl_Object, [$rt_s(448), jur_AbstractCharClass$LazyRange__init_(65136, 65279)]), $rt_createArrayFromData(jl_Object, [$rt_s(449), jur_AbstractCharClass$LazyRange__init_(65280, 65519)]), $rt_createArrayFromData(jl_Object, [$rt_s(450), jur_AbstractCharClass$LazyRange__init_(0,
        1114111)]), $rt_createArrayFromData(jl_Object, [$rt_s(451), jur_AbstractCharClass$LazySpecialsBlock__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(452), jur_AbstractCharClass$LazyCategory__init_(0, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(453), jur_AbstractCharClass$LazyCategoryScope__init_(62, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(454), jur_AbstractCharClass$LazyCategory__init_(1, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(455), jur_AbstractCharClass$LazyCategory__init_(2,
        1)]), $rt_createArrayFromData(jl_Object, [$rt_s(456), jur_AbstractCharClass$LazyCategory__init_(3, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(457), jur_AbstractCharClass$LazyCategory__init_(4, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(458), jur_AbstractCharClass$LazyCategory__init_(5, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(459), jur_AbstractCharClass$LazyCategoryScope__init_(448, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(460), jur_AbstractCharClass$LazyCategory__init_(6, 1)]),
        $rt_createArrayFromData(jl_Object, [$rt_s(461), jur_AbstractCharClass$LazyCategory__init_(7, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(462), jur_AbstractCharClass$LazyCategory__init_(8, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(463), jur_AbstractCharClass$LazyCategoryScope__init_(3584, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(464), jur_AbstractCharClass$LazyCategory__init_(9, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(465), jur_AbstractCharClass$LazyCategory__init_(10, 1)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(466), jur_AbstractCharClass$LazyCategory__init_(11, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(467), jur_AbstractCharClass$LazyCategoryScope__init_(28672, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(468), jur_AbstractCharClass$LazyCategory__init_(12, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(469), jur_AbstractCharClass$LazyCategory__init_(13, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(470), jur_AbstractCharClass$LazyCategory__init_(14, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(471), jur_AbstractCharClass$LazyCategoryScope__init_0(983040, 1, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(472), jur_AbstractCharClass$LazyCategory__init_(15, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(473), jur_AbstractCharClass$LazyCategory__init_(16, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(474), jur_AbstractCharClass$LazyCategory__init_(18, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(475), jur_AbstractCharClass$LazyCategory__init_0(19, 0, 1)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(476), jur_AbstractCharClass$LazyCategoryScope__init_(1643118592, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(477), jur_AbstractCharClass$LazyCategory__init_(20, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(478), jur_AbstractCharClass$LazyCategory__init_(21, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(479), jur_AbstractCharClass$LazyCategory__init_(22, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(480), jur_AbstractCharClass$LazyCategory__init_(23, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(481), jur_AbstractCharClass$LazyCategory__init_(24, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(482), jur_AbstractCharClass$LazyCategoryScope__init_(2113929216, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(483), jur_AbstractCharClass$LazyCategory__init_(25, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(484), jur_AbstractCharClass$LazyCategory__init_(26, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(485), jur_AbstractCharClass$LazyCategory__init_(27, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(486), jur_AbstractCharClass$LazyCategory__init_(28, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(487), jur_AbstractCharClass$LazyCategory__init_(29, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(488), jur_AbstractCharClass$LazyCategory__init_(30, 0)])]);
    }
    function jur_UCISupplCharSet() {
        jur_LeafSet.call(this);
        this.$ch0 = 0;
    }
    function jur_UCISupplCharSet_accepts($this, $strIndex, $testString) {
        var $low, $high;
        $low = $strIndex + 1 | 0;
        $high = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $low);
        return $this.$ch0 != jl_Character_toLowerCase0(jl_Character_toUpperCase0(jl_Character_toCodePoint($high, $low))) ? (-1) : 2;
    }
    function jur_LowSurrogateCharSet() {
        jur_JointSet.call(this);
        this.$low0 = 0;
    }
    function jur_LowSurrogateCharSet__init_(var_0) {
        var var_1 = new jur_LowSurrogateCharSet();
        jur_LowSurrogateCharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_LowSurrogateCharSet__init_0($this, $low) {
        jur_AbstractSet__init_($this);
        $this.$low0 = $low;
    }
    function jur_LowSurrogateCharSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_LowSurrogateCharSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $low;
        var$4 = $stringIndex + 1 | 0;
        if (var$4 > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $low = jl_String_charAt($testString, $stringIndex);
        if ($stringIndex > $matchResult.$leftBound0 && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0)))
            return (-1);
        if ($this.$low0 != $low)
            return (-1);
        return $this.$next2.$matches(var$4, $testString, $matchResult);
    }
    function jur_LowSurrogateCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $startStr, $strLength, var$6, var$7;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $startStr = $matchResult.$leftBound0;
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$6 = jl_String_indexOf($testStr, $this.$low0, $strIndex);
            if (var$6 < 0)
                return (-1);
            if (var$6 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$6 - 1 | 0))) {
                $strIndex = var$6 + 1 | 0;
                continue;
            }
            var$7 = $this.$next2;
            $strIndex = var$6 + 1 | 0;
            if (var$7.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$6;
    }
    function jur_LowSurrogateCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var $startStr, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        $startStr = $matchResult.$leftBound0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_String_lastIndexOf($testStr, $this.$low0, $lastIndex);
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                if (var$6 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$6 - 1 | 0))) {
                    $lastIndex = var$6 + (-2) | 0;
                    continue;
                }
                if ($this.$next2.$matches(var$6 + 1 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_LowSurrogateCharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return 0;
        if ($set instanceof jur_RangeSet)
            return 0;
        if ($set instanceof jur_SupplRangeSet)
            return 0;
        if ($set instanceof jur_SupplCharSet)
            return 0;
        if ($set instanceof jur_HighSurrogateCharSet)
            return 0;
        if (!($set instanceof jur_LowSurrogateCharSet))
            return 1;
        return $set.$low0 != $this.$low0 ? 0 : 1;
    }
    function jur_LowSurrogateCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_HighSurrogateCharSet() {
        jur_JointSet.call(this);
        this.$high0 = 0;
    }
    function jur_HighSurrogateCharSet__init_(var_0) {
        var var_1 = new jur_HighSurrogateCharSet();
        jur_HighSurrogateCharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_HighSurrogateCharSet__init_0($this, $high) {
        jur_AbstractSet__init_($this);
        $this.$high0 = $high;
    }
    function jur_HighSurrogateCharSet_setNext($this, $next) {
        $this.$next2 = $next;
    }
    function jur_HighSurrogateCharSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $low, $high;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        $low = $rt_compare(var$5, $strLength);
        if ($low > 0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if ($low < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$5)))
            return (-1);
        if ($this.$high0 != $high)
            return (-1);
        return $this.$next2.$matches(var$5, $testString, $matchResult);
    }
    function jur_HighSurrogateCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$5 = jl_String_indexOf($testStr, $this.$high0, $strIndex);
            if (var$5 < 0)
                return (-1);
            $strIndex = var$5 + 1 | 0;
            if ($strIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $strIndex))) {
                $strIndex = var$5 + 2 | 0;
                continue;
            }
            if ($this.$next2.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$5;
    }
    function jur_HighSurrogateCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var $strLength, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_String_lastIndexOf($testStr, $this.$high0, $lastIndex);
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                $lastIndex = var$6 + 1 | 0;
                if ($lastIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $lastIndex))) {
                    $lastIndex = var$6 + (-1) | 0;
                    continue;
                }
                if ($this.$next2.$matches($lastIndex, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_HighSurrogateCharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return 0;
        if ($set instanceof jur_RangeSet)
            return 0;
        if ($set instanceof jur_SupplRangeSet)
            return 0;
        if ($set instanceof jur_SupplCharSet)
            return 0;
        if ($set instanceof jur_LowSurrogateCharSet)
            return 0;
        if (!($set instanceof jur_HighSurrogateCharSet))
            return 1;
        return $set.$high0 != $this.$high0 ? 0 : 1;
    }
    function jur_HighSurrogateCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_SupplCharSet() {
        var a = this; jur_LeafSet.call(a);
        a.$high = 0;
        a.$low = 0;
        a.$ch1 = 0;
    }
    function jur_SupplCharSet_accepts($this, $strIndex, $testString) {
        var $low, $high;
        $low = $strIndex + 1 | 0;
        $high = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $low);
        return $this.$high == $high && $this.$low == $low ? 2 : (-1);
    }
    function jur_SupplCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, $ch;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while ($strIndex < $strLength) {
            $strIndex = jl_String_indexOf($testStr, $this.$high, $strIndex);
            if ($strIndex < 0)
                return (-1);
            $strIndex = $strIndex + 1 | 0;
            if ($strIndex >= $strLength)
                continue;
            $ch = jl_String_charAt($testStr, $strIndex);
            if ($this.$low == $ch && $this.$next2.$matches($strIndex + 1 | 0, $testStr, $matchResult) >= 0)
                return $strIndex + (-1) | 0;
            $strIndex = $strIndex + 1 | 0;
        }
        return (-1);
    }
    function jur_SupplCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$5 = jl_String_lastIndexOf($testStr, $this.$low, $lastIndex) + (-1) | 0;
                if (var$5 < 0)
                    break a;
                if (var$5 < $strIndex)
                    break a;
                if ($this.$high == jl_String_charAt($testStr, var$5) && $this.$next2.$matches(var$5 + 2 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$5 + (-1) | 0;
            }
            return var$5;
        }
        return (-1);
    }
    function jur_SupplCharSet_first($this, $set) {
        if ($set instanceof jur_SupplCharSet)
            return $set.$ch1 != $this.$ch1 ? 0 : 1;
        if ($set instanceof jur_SupplRangeSet)
            return $set.$contains1($this.$ch1);
        if ($set instanceof jur_CharSet)
            return 0;
        if (!($set instanceof jur_RangeSet))
            return 1;
        return 0;
    }
    var jur_AbstractLineTerminator$1 = $rt_classWithoutFields(jur_AbstractLineTerminator);
    function jur_AbstractLineTerminator$1_isLineTerminator($this, $ch) {
        return $ch != 10 ? 0 : 1;
    }
    function jur_AbstractLineTerminator$1_isAfterLineTerminator($this, $ch, $ch2) {
        return $ch != 10 ? 0 : 1;
    }
    var jur_AbstractLineTerminator$2 = $rt_classWithoutFields(jur_AbstractLineTerminator);
    function jur_AbstractLineTerminator$2_isLineTerminator($this, $ch) {
        return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
    }
    function jur_AbstractLineTerminator$2_isAfterLineTerminator($this, $ch, $ch2) {
        a: {
            b: {
                if ($ch != 10 && $ch != 133 && ($ch | 1) != 8233) {
                    if ($ch != 13)
                        break b;
                    if ($ch2 == 10)
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = 0;
        }
        return $ch;
    }
    function jur_SequenceSet$IntHash() {
        var a = this; jl_Object.call(a);
        a.$table = null;
        a.$values4 = null;
        a.$mask = 0;
        a.$size2 = 0;
    }
    function jur_SequenceSet$IntHash__init_(var_0) {
        var var_1 = new jur_SequenceSet$IntHash();
        jur_SequenceSet$IntHash__init_0(var_1, var_0);
        return var_1;
    }
    function jur_SequenceSet$IntHash__init_0($this, $size) {
        var var$2, var$3;
        while (true) {
            var$2 = $this.$mask;
            if ($size < var$2)
                break;
            $this.$mask = var$2 << 1 | 1;
        }
        var$3 = var$2 << 1 | 1;
        $this.$mask = var$3;
        var$3 = var$3 + 1 | 0;
        $this.$table = $rt_createIntArray(var$3);
        $this.$values4 = $rt_createIntArray(var$3);
        $this.$size2 = $size;
    }
    function jur_SequenceSet$IntHash_put($this, $key, $value) {
        var $i, var$4, $hashCode, var$6;
        $i = 0;
        var$4 = $this.$mask;
        $hashCode = $key & var$4;
        while (true) {
            var$6 = $this.$table.data;
            if (!var$6[$hashCode])
                break;
            if (var$6[$hashCode] == $key)
                break;
            $i = ($i + 1 | 0) & var$4;
            $hashCode = ($hashCode + $i | 0) & var$4;
        }
        var$6[$hashCode] = $key;
        $this.$values4.data[$hashCode] = $value;
    }
    function jur_SequenceSet$IntHash_get($this, $key) {
        var var$2, $hashCode, $i, $storedKey;
        var$2 = $this.$mask;
        $hashCode = $key & var$2;
        $i = 0;
        while (true) {
            $storedKey = $this.$table.data[$hashCode];
            if (!$storedKey)
                break;
            if ($storedKey == $key)
                return $this.$values4.data[$hashCode];
            $i = ($i + 1 | 0) & var$2;
            $hashCode = ($hashCode + $i | 0) & var$2;
        }
        return $this.$size2;
    }
    function jnc_IllegalCharsetNameException() {
        jl_IllegalArgumentException.call(this);
        this.$charsetName = null;
    }
    function jnc_IllegalCharsetNameException__init_(var_0) {
        var var_1 = new jnc_IllegalCharsetNameException();
        jnc_IllegalCharsetNameException__init_0(var_1, var_0);
        return var_1;
    }
    function jnc_IllegalCharsetNameException__init_0($this, $charsetName) {
        jl_Exception__init_($this);
        $this.$charsetName = $charsetName;
    }
    function otciu_UnicodeHelper$Range() {
        var a = this; jl_Object.call(a);
        a.$start2 = 0;
        a.$end0 = 0;
        a.$data = null;
    }
    function otciu_UnicodeHelper$Range__init_(var_0, var_1, var_2) {
        var var_3 = new otciu_UnicodeHelper$Range();
        otciu_UnicodeHelper$Range__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function otciu_UnicodeHelper$Range__init_0($this, $start, $end, $data) {
        $this.$start2 = $start;
        $this.$end0 = $end;
        $this.$data = $data;
    }
    var jur_IntHash = $rt_classWithoutFields();
    var otpp_ResourceAccessor = $rt_classWithoutFields();
    var otciu_UnicodeHelper = $rt_classWithoutFields();
    function otciu_UnicodeHelper_decodeCaseMapping($text) {
        var $flow, $sz, $data, var$5, $last, $i, var$8;
        $flow = otci_CharFlow__init_(jl_String_toCharArray($text));
        $sz = otci_Base46_decodeUnsigned($flow);
        $data = $rt_createIntArray($sz * 2 | 0);
        var$5 = $data.data;
        $last = 0;
        $i = 0;
        while ($i < $sz) {
            $last = $last + otci_Base46_decodeUnsigned($flow) | 0;
            var$8 = $i * 2 | 0;
            var$5[var$8] = $last;
            var$5[var$8 + 1 | 0] = otci_Base46_decode($flow);
            $i = $i + 1 | 0;
        }
        return $data;
    }
    function otciu_UnicodeHelper_decodeByte($c) {
        if ($c > 92)
            return (($c - 32 | 0) - 2 | 0) << 24 >> 24;
        if ($c <= 34)
            return ($c - 32 | 0) << 24 >> 24;
        return (($c - 32 | 0) - 1 | 0) << 24 >> 24;
    }
    var jur_AbstractCharClass$LazySpace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazySpace__init_() {
        var var_0 = new jur_AbstractCharClass$LazySpace();
        jur_AbstractCharClass$LazySpace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazySpace__init_0($this) {}
    function jur_AbstractCharClass$LazySpace_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass__init_0(), 9, 13), 32);
    }
    var jur_AbstractCharClass$LazyDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyDigit();
        jur_AbstractCharClass$LazyDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyDigit_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 48, 57);
    }
    var jur_AbstractCharClass$LazyLower = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyLower__init_() {
        var var_0 = new jur_AbstractCharClass$LazyLower();
        jur_AbstractCharClass$LazyLower__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyLower__init_0($this) {}
    function jur_AbstractCharClass$LazyLower_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 97, 122);
    }
    var jur_AbstractCharClass$LazyUpper = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyUpper__init_() {
        var var_0 = new jur_AbstractCharClass$LazyUpper();
        jur_AbstractCharClass$LazyUpper__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyUpper__init_0($this) {}
    function jur_AbstractCharClass$LazyUpper_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 65, 90);
    }
    var jur_AbstractCharClass$LazyASCII = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyASCII__init_() {
        var var_0 = new jur_AbstractCharClass$LazyASCII();
        jur_AbstractCharClass$LazyASCII__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyASCII__init_0($this) {}
    function jur_AbstractCharClass$LazyASCII_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 0, 127);
    }
    var jur_AbstractCharClass$LazyAlpha = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyAlpha__init_() {
        var var_0 = new jur_AbstractCharClass$LazyAlpha();
        jur_AbstractCharClass$LazyAlpha__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyAlpha__init_0($this) {}
    function jur_AbstractCharClass$LazyAlpha_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 97, 122), 65, 90);
    }
    var jur_AbstractCharClass$LazyAlnum = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlpha);
    function jur_AbstractCharClass$LazyAlnum__init_() {
        var var_0 = new jur_AbstractCharClass$LazyAlnum();
        jur_AbstractCharClass$LazyAlnum__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyAlnum__init_0($this) {}
    function jur_AbstractCharClass$LazyAlnum_computeValue($this) {
        return jur_CharClass_add0(jur_AbstractCharClass$LazyAlpha_computeValue($this), 48, 57);
    }
    var jur_AbstractCharClass$LazyPunct = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyPunct__init_() {
        var var_0 = new jur_AbstractCharClass$LazyPunct();
        jur_AbstractCharClass$LazyPunct__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyPunct__init_0($this) {}
    function jur_AbstractCharClass$LazyPunct_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 33, 64), 91, 96), 123, 126);
    }
    var jur_AbstractCharClass$LazyGraph = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlnum);
    function jur_AbstractCharClass$LazyGraph__init_() {
        var var_0 = new jur_AbstractCharClass$LazyGraph();
        jur_AbstractCharClass$LazyGraph__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyGraph__init_0($this) {}
    function jur_AbstractCharClass$LazyGraph_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_AbstractCharClass$LazyAlnum_computeValue($this), 33, 64), 91, 96), 123, 126);
    }
    var jur_AbstractCharClass$LazyPrint = $rt_classWithoutFields(jur_AbstractCharClass$LazyGraph);
    function jur_AbstractCharClass$LazyPrint__init_() {
        var var_0 = new jur_AbstractCharClass$LazyPrint();
        jur_AbstractCharClass$LazyPrint__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyPrint__init_0($this) {}
    function jur_AbstractCharClass$LazyPrint_computeValue($this) {
        return jur_CharClass_add(jur_AbstractCharClass$LazyGraph_computeValue($this), 32);
    }
    var jur_AbstractCharClass$LazyBlank = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyBlank__init_() {
        var var_0 = new jur_AbstractCharClass$LazyBlank();
        jur_AbstractCharClass$LazyBlank__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyBlank__init_0($this) {}
    function jur_AbstractCharClass$LazyBlank_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_0(), 32), 9);
    }
    var jur_AbstractCharClass$LazyCntrl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyCntrl__init_() {
        var var_0 = new jur_AbstractCharClass$LazyCntrl();
        jur_AbstractCharClass$LazyCntrl__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyCntrl__init_0($this) {}
    function jur_AbstractCharClass$LazyCntrl_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass__init_0(), 0, 31), 127);
    }
    var jur_AbstractCharClass$LazyXDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyXDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyXDigit();
        jur_AbstractCharClass$LazyXDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyXDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyXDigit_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 48, 57), 97, 102), 65, 70);
    }
    var jur_AbstractCharClass$LazyJavaLowerCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLowerCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLowerCase();
        jur_AbstractCharClass$LazyJavaLowerCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLowerCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLowerCase_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLowerCase$1;
        $chCl.$this$020 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaUpperCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUpperCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUpperCase();
        jur_AbstractCharClass$LazyJavaUpperCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUpperCase_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUpperCase$1;
        $chCl.$this$021 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaWhitespace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaWhitespace__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaWhitespace();
        jur_AbstractCharClass$LazyJavaWhitespace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaWhitespace__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaWhitespace_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaWhitespace$1;
        var$1.$this$022 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaMirrored = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaMirrored__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaMirrored();
        jur_AbstractCharClass$LazyJavaMirrored__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaMirrored__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaMirrored_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaMirrored$1;
        var$1.$this$023 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaDefined = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaDefined__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaDefined();
        jur_AbstractCharClass$LazyJavaDefined__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaDefined__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaDefined_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaDefined$1;
        $chCl.$this$024 = $this;
        jur_AbstractCharClass__init_($chCl);
        ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaDigit();
        jur_AbstractCharClass$LazyJavaDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaDigit_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaDigit$1;
        $chCl.$this$025 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaIdentifierIgnorable = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable();
        jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
        $chCl.$this$026 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaISOControl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaISOControl__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaISOControl();
        jur_AbstractCharClass$LazyJavaISOControl__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaISOControl__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaISOControl_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaISOControl$1;
        var$1.$this$027 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaJavaIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart();
        jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
        $chCl.$this$028 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaJavaIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart();
        jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
        $chCl.$this$029 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaLetter = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLetter__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLetter();
        jur_AbstractCharClass$LazyJavaLetter__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLetter__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLetter_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLetter$1;
        $chCl.$this$030 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaLetterOrDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLetterOrDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLetterOrDigit();
        jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
        $chCl.$this$031 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaSpaceChar = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaSpaceChar__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaSpaceChar();
        jur_AbstractCharClass$LazyJavaSpaceChar__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaSpaceChar_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaSpaceChar$1;
        var$1.$this$032 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaTitleCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaTitleCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaTitleCase();
        jur_AbstractCharClass$LazyJavaTitleCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaTitleCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaTitleCase_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaTitleCase$1;
        var$1.$this$033 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart();
        jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
        $chCl.$this$034 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart();
        jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
        $chCl.$this$035 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyWord__init_() {
        var var_0 = new jur_AbstractCharClass$LazyWord();
        jur_AbstractCharClass$LazyWord__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyWord__init_0($this) {}
    function jur_AbstractCharClass$LazyWord_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 97, 122), 65, 90), 48, 57), 95);
    }
    var jur_AbstractCharClass$LazyNonWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyWord);
    function jur_AbstractCharClass$LazyNonWord__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonWord();
        jur_AbstractCharClass$LazyNonWord__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonWord__init_0($this) {}
    function jur_AbstractCharClass$LazyNonWord_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyWord_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyNonSpace = $rt_classWithoutFields(jur_AbstractCharClass$LazySpace);
    function jur_AbstractCharClass$LazyNonSpace__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonSpace();
        jur_AbstractCharClass$LazyNonSpace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonSpace__init_0($this) {}
    function jur_AbstractCharClass$LazyNonSpace_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazySpace_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyNonDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyDigit);
    function jur_AbstractCharClass$LazyNonDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonDigit();
        jur_AbstractCharClass$LazyNonDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyNonDigit_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyDigit_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    function jur_AbstractCharClass$LazyRange() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$start5 = 0;
        a.$end1 = 0;
    }
    function jur_AbstractCharClass$LazyRange__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyRange();
        jur_AbstractCharClass$LazyRange__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyRange__init_0($this, $start, $end) {
        $this.$start5 = $start;
        $this.$end1 = $end;
    }
    function jur_AbstractCharClass$LazyRange_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), $this.$start5, $this.$end1);
    }
    var jur_AbstractCharClass$LazySpecialsBlock = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazySpecialsBlock__init_() {
        var var_0 = new jur_AbstractCharClass$LazySpecialsBlock();
        jur_AbstractCharClass$LazySpecialsBlock__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazySpecialsBlock__init_0($this) {}
    function jur_AbstractCharClass$LazySpecialsBlock_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 65279, 65279), 65520, 65533);
    }
    function jur_AbstractCharClass$LazyCategory() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$category = 0;
        a.$mayContainSupplCodepoints0 = 0;
        a.$containsAllSurrogates = 0;
    }
    function jur_AbstractCharClass$LazyCategory__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyCategory();
        jur_AbstractCharClass$LazyCategory__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyCategory__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_AbstractCharClass$LazyCategory();
        jur_AbstractCharClass$LazyCategory__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_AbstractCharClass$LazyCategory__init_1($this, $cat, $mayContainSupplCodepoints) {
        $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
        $this.$category = $cat;
    }
    function jur_AbstractCharClass$LazyCategory__init_2($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) {
        $this.$containsAllSurrogates = $containsAllSurrogates;
        $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
        $this.$category = $cat;
    }
    function jur_AbstractCharClass$LazyCategory_computeValue($this) {
        var $chCl;
        $chCl = jur_UnicodeCategory__init_($this.$category);
        if ($this.$containsAllSurrogates)
            ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints0;
        return $chCl;
    }
    function jur_AbstractCharClass$LazyCategoryScope() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$category0 = 0;
        a.$mayContainSupplCodepoints1 = 0;
        a.$containsAllSurrogates0 = 0;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyCategoryScope();
        jur_AbstractCharClass$LazyCategoryScope__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_AbstractCharClass$LazyCategoryScope();
        jur_AbstractCharClass$LazyCategoryScope__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_1($this, $cat, $mayContainSupplCodepoints) {
        $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
        $this.$category0 = $cat;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_2($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) {
        $this.$containsAllSurrogates0 = $containsAllSurrogates;
        $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
        $this.$category0 = $cat;
    }
    function jur_AbstractCharClass$LazyCategoryScope_computeValue($this) {
        var $chCl;
        $chCl = new jur_UnicodeCategoryScope;
        jur_UnicodeCategory__init_0($chCl, $this.$category0);
        if ($this.$containsAllSurrogates0)
            ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints1;
        return $chCl;
    }
    var ju_Arrays = $rt_classWithoutFields();
    function ju_Arrays_copyOf($array, $length) {
        var $result, var$4, $sz, $i;
        $array = $array.data;
        $result = $rt_createCharArray($length);
        var$4 = $result.data;
        $sz = jl_Math_min($length, $array.length);
        $i = 0;
        while ($i < $sz) {
            var$4[$i] = $array[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_copyOf0($array, $length) {
        var $result, var$4, $sz, $i;
        $array = $array.data;
        $result = $rt_createByteArray($length);
        var$4 = $result.data;
        $sz = jl_Math_min($length, $array.length);
        $i = 0;
        while ($i < $sz) {
            var$4[$i] = $array[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_copyOf1($original, $newLength) {
        var var$3, $result, $sz, $i;
        var$3 = $original.data;
        $result = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($original)), $newLength);
        $sz = jl_Math_min($newLength, var$3.length);
        $i = 0;
        while ($i < $sz) {
            $result.data[$i] = var$3[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_fill($a, $val) {
        var var$3, var$4, var$5, var$6;
        $a = $a.data;
        var$3 = 0;
        var$4 = $a.length;
        if (var$3 > var$4) {
            var$5 = new jl_IllegalArgumentException;
            jl_Exception__init_(var$5);
            $rt_throw(var$5);
        }
        while (var$3 < var$4) {
            var$6 = var$3 + 1 | 0;
            $a[var$3] = $val;
            var$3 = var$6;
        }
    }
    function otci_CharFlow() {
        var a = this; jl_Object.call(a);
        a.$characters0 = null;
        a.$pointer = 0;
    }
    function otci_CharFlow__init_(var_0) {
        var var_1 = new otci_CharFlow();
        otci_CharFlow__init_0(var_1, var_0);
        return var_1;
    }
    function otci_CharFlow__init_0($this, $characters) {
        $this.$characters0 = $characters;
    }
    var otci_Base46 = $rt_classWithoutFields();
    function otci_Base46_decodeUnsigned($seq) {
        var $number, $pos, var$4, $hasMore, $digit;
        $number = 0;
        $pos = 1;
        while (true) {
            var$4 = $seq.$characters0.data;
            $hasMore = $seq.$pointer;
            $seq.$pointer = $hasMore + 1 | 0;
            $digit = var$4[$hasMore];
            $digit = $digit < 34 ? $digit - 32 | 0 : $digit >= 92 ? ($digit - 32 | 0) - 2 | 0 : ($digit - 32 | 0) - 1 | 0;
            $hasMore = ($digit % 2 | 0) != 1 ? 0 : 1;
            $number = $number + $rt_imul($pos, $digit / 2 | 0) | 0;
            $pos = $pos * 46 | 0;
            if (!$hasMore)
                break;
        }
        return $number;
    }
    function otci_Base46_decode($seq) {
        var $number, $result;
        $number = otci_Base46_decodeUnsigned($seq);
        $result = $number / 2 | 0;
        if ($number % 2 | 0)
            $result =  -$result | 0;
        return $result;
    }
    var jl_NegativeArraySizeException = $rt_classWithoutFields(jl_RuntimeException);
    var ju_Iterator = $rt_classWithoutFields(0);
    function ju_AbstractList$1() {
        var a = this; jl_Object.call(a);
        a.$index4 = 0;
        a.$modCount1 = 0;
        a.$size1 = 0;
        a.$removeIndex = 0;
        a.$this$0 = null;
    }
    function ju_AbstractList$1_hasNext($this) {
        return $this.$index4 >= $this.$size1 ? 0 : 1;
    }
    function ju_AbstractList$1_next($this) {
        var var$1, var$2, var$3;
        var$1 = $this.$modCount1;
        var$2 = $this.$this$0;
        if (var$1 < var$2.$modCount0) {
            var$2 = new ju_ConcurrentModificationException;
            jl_Exception__init_(var$2);
            $rt_throw(var$2);
        }
        var$3 = $this.$index4;
        $this.$removeIndex = var$3;
        $this.$index4 = var$3 + 1 | 0;
        return ju_ArrayList_get(var$2, var$3);
    }
    var jl_Runnable = $rt_classWithoutFields(0);
    function jl_Thread() {
        var a = this; jl_Object.call(a);
        a.$id = Long_ZERO;
        a.$timeSliceStart = Long_ZERO;
        a.$finishedLock = null;
        a.$interruptHandler = null;
        a.$name17 = null;
        a.$alive = 0;
        a.$target = null;
    }
    var jl_Thread_mainThread = null;
    var jl_Thread_currentThread0 = null;
    var jl_Thread_nextId = 0;
    var jl_Thread_activeCount = 0;
    var jl_Thread_defaultUncaughtExceptionHandler = null;
    function jl_Thread_$callClinit() {
        jl_Thread_$callClinit = $rt_eraseClinit(jl_Thread);
        jl_Thread__clinit_();
    }
    function jl_Thread_setCurrentThread($thread_0) {
        jl_Thread_$callClinit();
        if (jl_Thread_currentThread0 !== $thread_0)
            jl_Thread_currentThread0 = $thread_0;
        jl_Thread_currentThread0.$timeSliceStart = jl_System_currentTimeMillis();
    }
    function jl_Thread_currentThread() {
        jl_Thread_$callClinit();
        return jl_Thread_currentThread0;
    }
    function jl_Thread_sleep(var$1) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        return thread.suspend(function() {
            try {
                jl_Thread_sleep0(var$1, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
    }
    function jl_Thread_sleep0($millis, $callback) {
        var $current, $handler;
        jl_Thread_$callClinit();
        $current = jl_Thread_currentThread();
        $handler = new jl_Thread$SleepHandler;
        $handler.$thread = $current;
        $handler.$callback = $callback;
        $handler.$scheduleId = otp_Platform_schedule($handler, Long_ge($millis, Long_fromInt(2147483647)) ? 2147483647 : Long_lo($millis));
        $current.$interruptHandler = $handler;
    }
    function jl_Thread__clinit_() {
        var var$1, var$2, var$3;
        var$1 = new jl_Thread;
        jl_Thread_$callClinit();
        var$2 = null;
        var$1.$finishedLock = new jl_Object;
        var$1.$alive = 1;
        var$1.$name17 = $rt_s(489);
        var$1.$target = var$2;
        var$3 = jl_Thread_nextId;
        jl_Thread_nextId = var$3 + 1 | 0;
        var$1.$id = Long_fromInt(var$3);
        jl_Thread_mainThread = var$1;
        jl_Thread_currentThread0 = var$1;
        jl_Thread_nextId = 1;
        jl_Thread_activeCount = 1;
        jl_Thread_defaultUncaughtExceptionHandler = new jl_DefaultUncaughtExceptionHandler;
    }
    var ju_Objects = $rt_classWithoutFields();
    function tj_IntVar() {
        var a = this; jl_Object.call(a);
        a.$value3 = null;
        a.$name4 = null;
    }
    function tj_FloatVar() {
        var a = this; jl_Object.call(a);
        a.$value0 = null;
        a.$name1 = null;
    }
    function tj_BoolVar() {
        var a = this; jl_Object.call(a);
        a.$value1 = null;
        a.$name2 = null;
    }
    function tj_StringVar() {
        var a = this; jl_Object.call(a);
        a.$value2 = null;
        a.$name3 = null;
    }
    function tj_StringList() {
        var a = this; jl_Object.call(a);
        a.$value8 = null;
        a.$name8 = null;
    }
    function tj_BoolList() {
        var a = this; jl_Object.call(a);
        a.$value6 = null;
        a.$name7 = null;
    }
    function tj_FloatList() {
        var a = this; jl_Object.call(a);
        a.$value4 = null;
        a.$name6 = null;
    }
    function tj_IntList() {
        var a = this; jl_Object.call(a);
        a.$value10 = null;
        a.$name9 = null;
    }
    function tj_FunctionVar() {
        var a = this; jl_Object.call(a);
        a.$name5 = null;
        a.$body0 = null;
        a.$args = null;
    }
    function jur_AbstractCharClass$1() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$lHS = null;
        a.$this$00 = null;
    }
    function jur_AbstractCharClass$1_contains($this, $ch) {
        var $index;
        $index = $ch - 55296 | 0;
        return $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS, $index) : 0;
    }
    function jur_AbstractCharClass$2() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$lHS0 = null;
        a.$val$thisClass = null;
        a.$this$01 = null;
    }
    function jur_AbstractCharClass$2_contains($this, $ch) {
        var $index, $containslHS;
        $index = $ch - 55296 | 0;
        $containslHS = $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS0, $index) : 0;
        return $this.$val$thisClass.$contains1($ch) && !$containslHS ? 1 : 0;
    }
    function jur_CharClass$18() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$bs = null;
        a.$this$019 = null;
    }
    function jur_CharClass$18_contains($this, $ch) {
        return $this.$alt0 ^ ju_BitSet_get($this.$val$bs, $ch);
    }
    function jur_CharClass$18_toString($this) {
        var $temp, $i, var$3;
        $temp = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($temp);
        $i = ju_BitSet_nextSetBit($this.$val$bs, 0);
        while ($i >= 0) {
            jl_AbstractStringBuilder_append2($temp, jl_Character_toChars($i));
            jl_AbstractStringBuilder_append($temp, 124);
            $i = ju_BitSet_nextSetBit($this.$val$bs, $i + 1 | 0);
        }
        var$3 = $temp.$length0;
        if (var$3 > 0)
            jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
        return jl_AbstractStringBuilder_toString($temp);
    }
    function jur_CharClass$1() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$cc1 = null;
        a.$this$04 = null;
    }
    function jur_CharClass$1_contains($this, $ch) {
        return $this.$val$cc1.$contains1($ch);
    }
    function jur_CharClass$3() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt1 = 0;
        a.$val$cc2 = null;
        a.$this$05 = null;
    }
    function jur_CharClass$3_contains($this, $ch) {
        return !($this.$val$curAlt1 ^ ju_BitSet_get($this.$this$05.$bits, $ch)) && !($this.$val$curAlt1 ^ $this.$this$05.$inverted ^ $this.$val$cc2.$contains1($ch)) ? 0 : 1;
    }
    function jur_CharClass$2() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt2 = 0;
        a.$val$cc3 = null;
        a.$this$06 = null;
    }
    function jur_CharClass$2_contains($this, $ch) {
        return !($this.$val$curAlt2 ^ ju_BitSet_get($this.$this$06.$bits, $ch)) && !($this.$val$curAlt2 ^ $this.$this$06.$inverted ^ $this.$val$cc3.$contains1($ch)) ? 1 : 0;
    }
    function jur_CharClass$5() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt = 0;
        a.$val$nb = null;
        a.$val$cc = null;
        a.$this$02 = null;
    }
    function jur_CharClass$5_contains($this, $ch) {
        return $this.$val$curAlt ^ (!$this.$val$nb.$contains1($ch) && !$this.$val$cc.$contains1($ch) ? 0 : 1);
    }
    function jur_CharClass$4() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt0 = 0;
        a.$val$nb0 = null;
        a.$val$cc0 = null;
        a.$this$03 = null;
    }
    function jur_CharClass$4_contains($this, $ch) {
        return $this.$val$curAlt0 ^ (!$this.$val$nb0.$contains1($ch) && !$this.$val$cc0.$contains1($ch) ? 0 : 1) ? 0 : 1;
    }
    function jur_CharClass$7() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz1 = null;
        a.$this$09 = null;
    }
    function jur_CharClass$7_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz1, $ch);
    }
    function jur_CharClass$6() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz2 = null;
        a.$this$010 = null;
    }
    function jur_CharClass$6_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz2, $ch) ? 0 : 1;
    }
    function jur_CharClass$9() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz3 = null;
        a.$val$curAlt5 = 0;
        a.$this$011 = null;
    }
    function jur_CharClass$9_contains($this, $ch) {
        return !jur_CharClass_contains($this.$val$clazz3, $ch) && !($this.$val$curAlt5 ^ ju_BitSet_get($this.$this$011.$bits, $ch)) ? 0 : 1;
    }
    function jur_CharClass$8() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz4 = null;
        a.$val$curAlt6 = 0;
        a.$this$012 = null;
    }
    function jur_CharClass$8_contains($this, $ch) {
        return !jur_CharClass_contains($this.$val$clazz4, $ch) && !($this.$val$curAlt6 ^ ju_BitSet_get($this.$this$012.$bits, $ch)) ? 1 : 0;
    }
    function jur_CharClass$11() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt3 = 0;
        a.$val$nb1 = null;
        a.$val$clazz = null;
        a.$this$07 = null;
    }
    function jur_CharClass$11_contains($this, $ch) {
        return !($this.$val$curAlt3 ^ $this.$val$nb1.$contains1($ch)) && !jur_CharClass_contains($this.$val$clazz, $ch) ? 0 : 1;
    }
    function jur_CharClass$10() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt4 = 0;
        a.$val$nb2 = null;
        a.$val$clazz0 = null;
        a.$this$08 = null;
    }
    function jur_CharClass$10_contains($this, $ch) {
        return !($this.$val$curAlt4 ^ $this.$val$nb2.$contains1($ch)) && !jur_CharClass_contains($this.$val$clazz0, $ch) ? 1 : 0;
    }
    function jur_CharClass$13() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz7 = null;
        a.$this$015 = null;
    }
    function jur_CharClass$13_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz7, $ch);
    }
    function jur_CharClass$12() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz8 = null;
        a.$this$016 = null;
    }
    function jur_CharClass$12_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz8, $ch) ? 0 : 1;
    }
    function jur_CharClass$15() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz9 = null;
        a.$val$curAlt9 = 0;
        a.$this$017 = null;
    }
    function jur_CharClass$15_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz9, $ch) && $this.$val$curAlt9 ^ ju_BitSet_get($this.$this$017.$bits, $ch) ? 1 : 0;
    }
    function jur_CharClass$14() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz10 = null;
        a.$val$curAlt10 = 0;
        a.$this$018 = null;
    }
    function jur_CharClass$14_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz10, $ch) && $this.$val$curAlt10 ^ ju_BitSet_get($this.$this$018.$bits, $ch) ? 0 : 1;
    }
    function jur_CharClass$17() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt7 = 0;
        a.$val$nb3 = null;
        a.$val$clazz5 = null;
        a.$this$013 = null;
    }
    function jur_CharClass$17_contains($this, $ch) {
        return $this.$val$curAlt7 ^ $this.$val$nb3.$contains1($ch) && jur_CharClass_contains($this.$val$clazz5, $ch) ? 1 : 0;
    }
    function jur_CharClass$16() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt8 = 0;
        a.$val$nb4 = null;
        a.$val$clazz6 = null;
        a.$this$014 = null;
    }
    function jur_CharClass$16_contains($this, $ch) {
        return $this.$val$curAlt8 ^ $this.$val$nb4.$contains1($ch) && jur_CharClass_contains($this.$val$clazz6, $ch) ? 0 : 1;
    }
    var oti_AsyncCallback = $rt_classWithoutFields(0);
    function otpp_AsyncCallbackWrapper() {
        jl_Object.call(this);
        this.$realAsyncCallback = null;
    }
    function otpp_AsyncCallbackWrapper_create($realAsyncCallback) {
        var var$2;
        var$2 = new otpp_AsyncCallbackWrapper;
        var$2.$realAsyncCallback = $realAsyncCallback;
        return var$2;
    }
    function otpp_AsyncCallbackWrapper_complete($this, $result) {
        $this.$realAsyncCallback.$complete($result);
    }
    function otpp_AsyncCallbackWrapper_error($this, $e) {
        $this.$realAsyncCallback.$error($e);
    }
    var otp_PlatformRunnable = $rt_classWithoutFields(0);
    var otr_EventQueue$Event = $rt_classWithoutFields(0);
    var jl_ThreadInterruptHandler = $rt_classWithoutFields(0);
    function jl_Thread$SleepHandler() {
        var a = this; jl_Object.call(a);
        a.$thread = null;
        a.$callback = null;
        a.$isInterrupted = 0;
        a.$scheduleId = 0;
    }
    function jn_Buffer() {
        var a = this; jl_Object.call(a);
        a.$capacity = 0;
        a.$position = 0;
        a.$limit = 0;
        a.$mark = 0;
    }
    function jn_Buffer__init_($this, $capacity) {
        $this.$mark = (-1);
        $this.$capacity = $capacity;
        $this.$limit = $capacity;
    }
    function jn_Buffer_position($this) {
        return $this.$position;
    }
    function jn_Buffer_remaining($this) {
        return $this.$limit - $this.$position | 0;
    }
    function jn_Buffer_hasRemaining($this) {
        return $this.$position >= $this.$limit ? 0 : 1;
    }
    var jl_Readable = $rt_classWithoutFields(0);
    var jn_CharBuffer = $rt_classWithoutFields(jn_Buffer);
    function jn_CharBuffer_position($this, $newPosition) {
        var var$2, var$3, var$4;
        if ($newPosition >= 0 && $newPosition <= $this.$limit) {
            $this.$position = $newPosition;
            if ($newPosition < $this.$mark)
                $this.$mark = 0;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        var$3 = $this.$limit;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(490)), $newPosition), $rt_s(491)), var$3), 93);
        jl_Throwable__init_0(var$2, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$2);
    }
    function jn_ByteBuffer() {
        var a = this; jn_Buffer.call(a);
        a.$start4 = 0;
        a.$array1 = null;
        a.$order = null;
    }
    function jn_ByteBuffer_put($this, $src, $offset, $length) {
        var var$4, var$5, var$6, var$7, var$8, var$9, $pos, $i, var$12;
        if (!$length)
            return $this;
        if ($this.$readOnly0) {
            var$4 = new jn_ReadOnlyBufferException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        if (jn_Buffer_remaining($this) < $length) {
            var$4 = new jn_BufferOverflowException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        if ($offset >= 0) {
            var$5 = $src.data;
            var$6 = var$5.length;
            if ($offset <= var$6) {
                var$7 = $offset + $length | 0;
                if (var$7 > var$6) {
                    var$8 = new jl_IndexOutOfBoundsException;
                    var$9 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$9);
                    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(492)), var$7), $rt_s(493)), var$6);
                    jl_Throwable__init_0(var$8, jl_AbstractStringBuilder_toString(var$9));
                    $rt_throw(var$8);
                }
                if ($length < 0) {
                    var$4 = new jl_IndexOutOfBoundsException;
                    var$8 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$8);
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(494)), $length), $rt_s(495));
                    jl_Throwable__init_0(var$4, jl_AbstractStringBuilder_toString(var$8));
                    $rt_throw(var$4);
                }
                var$7 = $this.$position;
                $pos = var$7 + $this.$start4 | 0;
                $i = 0;
                while ($i < $length) {
                    $src = $this.$array1.data;
                    var$12 = $pos + 1 | 0;
                    var$6 = $offset + 1 | 0;
                    $src[$pos] = var$5[$offset];
                    $i = $i + 1 | 0;
                    $pos = var$12;
                    $offset = var$6;
                }
                $this.$position = var$7 + $length | 0;
                return $this;
            }
        }
        $src = $src.data;
        var$4 = new jl_IndexOutOfBoundsException;
        $length = $src.length;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(496)), $offset), $rt_s(491)), $length), 41);
        jl_Throwable__init_0(var$4, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$4);
    }
    function jn_ByteBuffer_clear($this) {
        $this.$position = 0;
        $this.$limit = $this.$capacity;
        $this.$mark = (-1);
        return $this;
    }
    function jnc_CodingErrorAction() {
        jl_Object.call(this);
        this.$name18 = null;
    }
    var jnc_CodingErrorAction_IGNORE = null;
    var jnc_CodingErrorAction_REPLACE = null;
    var jnc_CodingErrorAction_REPORT = null;
    function jnc_CodingErrorAction_$callClinit() {
        jnc_CodingErrorAction_$callClinit = $rt_eraseClinit(jnc_CodingErrorAction);
        jnc_CodingErrorAction__clinit_();
    }
    function jnc_CodingErrorAction__init_(var_0) {
        var var_1 = new jnc_CodingErrorAction();
        jnc_CodingErrorAction__init_0(var_1, var_0);
        return var_1;
    }
    function jnc_CodingErrorAction__init_0($this, $name) {
        jnc_CodingErrorAction_$callClinit();
        $this.$name18 = $name;
    }
    function jnc_CodingErrorAction__clinit_() {
        jnc_CodingErrorAction_IGNORE = jnc_CodingErrorAction__init_($rt_s(497));
        jnc_CodingErrorAction_REPLACE = jnc_CodingErrorAction__init_($rt_s(498));
        jnc_CodingErrorAction_REPORT = jnc_CodingErrorAction__init_($rt_s(499));
    }
    var jl_Thread$UncaughtExceptionHandler = $rt_classWithoutFields(0);
    var jl_DefaultUncaughtExceptionHandler = $rt_classWithoutFields();
    var jn_CharBufferImpl = $rt_classWithoutFields(jn_CharBuffer);
    function jn_CharBufferOverArray() {
        var a = this; jn_CharBufferImpl.call(a);
        a.$readOnly = 0;
        a.$start3 = 0;
        a.$array0 = null;
    }
    function jnc_CharsetEncoder() {
        var a = this; jl_Object.call(a);
        a.$charset0 = null;
        a.$replacement = null;
        a.$averageBytesPerChar = 0.0;
        a.$maxBytesPerChar = 0.0;
        a.$malformedAction = null;
        a.$unmappableAction = null;
        a.$status = 0;
    }
    function jnc_CoderResult() {
        var a = this; jl_Object.call(a);
        a.$kind = 0;
        a.$length1 = 0;
    }
    var jnc_CoderResult_UNDERFLOW = null;
    var jnc_CoderResult_OVERFLOW = null;
    function jnc_CoderResult__init_(var_0, var_1) {
        var var_2 = new jnc_CoderResult();
        jnc_CoderResult__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jnc_CoderResult__init_0($this, $kind, $length) {
        $this.$kind = $kind;
        $this.$length1 = $length;
    }
    function jnc_CoderResult_isOverflow($this) {
        return $this.$kind != 1 ? 0 : 1;
    }
    function jnc_CoderResult_isMalformed($this) {
        return $this.$kind != 2 ? 0 : 1;
    }
    function jnc_CoderResult_isUnmappable($this) {
        return $this.$kind != 3 ? 0 : 1;
    }
    function jnc_CoderResult_malformedForLength($length) {
        return jnc_CoderResult__init_(2, $length);
    }
    function jnc_CoderResult__clinit_() {
        jnc_CoderResult_UNDERFLOW = jnc_CoderResult__init_(0, 0);
        jnc_CoderResult_OVERFLOW = jnc_CoderResult__init_(1, 0);
    }
    function jn_ByteBufferImpl() {
        var a = this; jn_ByteBuffer.call(a);
        a.$direct = 0;
        a.$readOnly0 = 0;
    }
    function jn_ByteOrder() {
        jl_Object.call(this);
        this.$name19 = null;
    }
    var jn_ByteOrder_BIG_ENDIAN = null;
    var jn_ByteOrder_LITTLE_ENDIAN = null;
    function jn_ByteOrder_$callClinit() {
        jn_ByteOrder_$callClinit = $rt_eraseClinit(jn_ByteOrder);
        jn_ByteOrder__clinit_();
    }
    function jn_ByteOrder__init_(var_0) {
        var var_1 = new jn_ByteOrder();
        jn_ByteOrder__init_0(var_1, var_0);
        return var_1;
    }
    function jn_ByteOrder__init_0($this, $name) {
        jn_ByteOrder_$callClinit();
        $this.$name19 = $name;
    }
    function jn_ByteOrder__clinit_() {
        jn_ByteOrder_BIG_ENDIAN = jn_ByteOrder__init_($rt_s(500));
        jn_ByteOrder_LITTLE_ENDIAN = jn_ByteOrder__init_($rt_s(501));
    }
    var jur_BackReferencedSingleSet = $rt_classWithoutFields(jur_SingleSet);
    function jur_BackReferencedSingleSet_find($this, $startSearch, $testString, $matchResult) {
        var $res, $lastIndex, $saveStart;
        $res = 0;
        $lastIndex = $matchResult.$rightBound0;
        a: {
            while (true) {
                if ($startSearch > $lastIndex) {
                    $startSearch = $res;
                    break a;
                }
                $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $startSearch);
                $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
                if ($res >= 0)
                    break;
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $saveStart);
                $startSearch = $startSearch + 1 | 0;
            }
        }
        return $startSearch;
    }
    function jur_BackReferencedSingleSet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        var $res, $saveStart;
        $res = 0;
        a: {
            while (true) {
                if ($startSearch < $stringIndex) {
                    $startSearch = $res;
                    break a;
                }
                $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $startSearch);
                $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
                if ($res >= 0)
                    break;
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $saveStart);
                $startSearch = $startSearch + (-1) | 0;
            }
        }
        return $startSearch;
    }
    function jur_BackReferencedSingleSet_processBackRefReplacement($this) {
        return null;
    }
    function jnci_BufferedEncoder() {
        var a = this; jnc_CharsetEncoder.call(a);
        a.$inArray = null;
        a.$outArray = null;
    }
    function jnci_BufferedEncoder_encodeLoop($this, $in, $out) {
        var $inArray, $inPos, $inSize, $outArray, $i, var$8, $outPos, $outSize, $result, var$12, var$13, var$14, $controller;
        $inArray = $this.$inArray;
        $inPos = 0;
        $inSize = 0;
        $outArray = $this.$outArray;
        a: {
            b: {
                while (true) {
                    if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                        $i = $inPos;
                        while ($i < $inSize) {
                            var$8 = $inArray.data;
                            var$8[$i - $inPos | 0] = var$8[$i];
                            $i = $i + 1 | 0;
                        }
                        var$8 = $inArray.data;
                        $outPos = $inSize - $inPos | 0;
                        $outSize = jn_Buffer_remaining($in) + $outPos | 0;
                        $i = var$8.length;
                        $inSize = jl_Math_min($outSize, $i);
                        $inPos = $inSize - $outPos | 0;
                        if ($outPos < 0)
                            break b;
                        if ($outPos > $i)
                            break b;
                        $outSize = $outPos + $inPos | 0;
                        if ($outSize > $i) {
                            $result = new jl_IndexOutOfBoundsException;
                            $in = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($in);
                            jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($in, $rt_s(502)), $outSize), $rt_s(493)), $i);
                            jl_Throwable__init_0($result, jl_AbstractStringBuilder_toString($in));
                            $rt_throw($result);
                        }
                        if (jn_Buffer_remaining($in) < $inPos)
                            break;
                        if ($inPos < 0) {
                            $in = new jl_IndexOutOfBoundsException;
                            $out = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($out);
                            jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(494)), $inPos), $rt_s(495));
                            jl_Throwable__init_0($in, jl_AbstractStringBuilder_toString($out));
                            $rt_throw($in);
                        }
                        $i = $in.$position;
                        var$12 = 0;
                        var$13 = $i;
                        while (var$12 < $inPos) {
                            var$14 = $outPos + 1 | 0;
                            $outSize = var$13 + 1 | 0;
                            var$8[$outPos] = $in.$array0.data[var$13 + $in.$start3 | 0];
                            var$12 = var$12 + 1 | 0;
                            $outPos = var$14;
                            var$13 = $outSize;
                        }
                        $in.$position = $i + $inPos | 0;
                        $inPos = 0;
                    }
                    if (!jn_Buffer_hasRemaining($out)) {
                        $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$8 = $outArray.data;
                    $outSize = jl_Math_min(jn_Buffer_remaining($out), var$8.length);
                    $controller = new jnci_BufferedEncoder$Controller;
                    $controller.$in = $in;
                    $controller.$out1 = $out;
                    $result = jnci_UTF8Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
                    $inPos = $controller.$inPosition;
                    $outPos = $controller.$outPosition;
                    if ($result === null) {
                        if (!jn_Buffer_hasRemaining($in) && $inPos >= $inSize)
                            $result = jnc_CoderResult_UNDERFLOW;
                        else if (!jn_Buffer_hasRemaining($out) && $inPos >= $inSize)
                            $result = jnc_CoderResult_OVERFLOW;
                    }
                    jn_ByteBuffer_put($out, $outArray, 0, $outPos);
                    if ($result !== null)
                        break a;
                }
                $in = new jn_BufferUnderflowException;
                jl_Exception__init_($in);
                $rt_throw($in);
            }
            $controller = new jl_IndexOutOfBoundsException;
            $result = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($result);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($result, $rt_s(496)), $outPos), $rt_s(491)), $i), 41);
            jl_Throwable__init_0($controller, jl_AbstractStringBuilder_toString($result));
            $rt_throw($controller);
        }
        jn_CharBuffer_position($in, $in.$position - ($inSize - $inPos | 0) | 0);
        return $result;
    }
    var jnci_UTF8Encoder = $rt_classWithoutFields(jnci_BufferedEncoder);
    function jnci_UTF8Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, $ch, $low, var$13, $codePoint;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize) {
                    var$9 = $inPos;
                    break a;
                }
                var$10 = $inArray.data;
                var$9 = $inPos + 1 | 0;
                $ch = var$10[$inPos];
                if ($ch < 128) {
                    var$10 = $outArray.data;
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = $ch << 24 >> 24;
                } else if ($ch < 2048) {
                    if (($outPos + 2 | 0) > $outSize) {
                        var$9 = var$9 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    $inPos = $outPos + 1 | 0;
                    var$10[$outPos] = (192 | $ch >> 6) << 24 >> 24;
                    $low = $inPos + 1 | 0;
                    var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
                } else if (!jl_Character_isSurrogate($ch)) {
                    if (($outPos + 3 | 0) > $outSize) {
                        var$9 = var$9 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 3))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    var$13 = $outPos + 1 | 0;
                    var$10[$outPos] = (224 | $ch >> 12) << 24 >> 24;
                    $inPos = var$13 + 1 | 0;
                    var$10[var$13] = (128 | $ch >> 6 & 63) << 24 >> 24;
                    $low = $inPos + 1 | 0;
                    var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
                } else {
                    if (!jl_Character_isHighSurrogate($ch)) {
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (var$9 >= $inSize) {
                        if (jn_Buffer_hasRemaining($controller.$in))
                            break a;
                        $result = jnc_CoderResult_UNDERFLOW;
                        break a;
                    }
                    $inPos = var$9 + 1 | 0;
                    $low = var$10[var$9];
                    if (!jl_Character_isLowSurrogate($low)) {
                        var$9 = $inPos + (-2) | 0;
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (($outPos + 4 | 0) > $outSize) {
                        var$9 = $inPos + (-2) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    $codePoint = jl_Character_toCodePoint($ch, $low);
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = (240 | $codePoint >> 18) << 24 >> 24;
                    var$13 = $low + 1 | 0;
                    var$10[$low] = (128 | $codePoint >> 12 & 63) << 24 >> 24;
                    $outPos = var$13 + 1 | 0;
                    var$10[var$13] = (128 | $codePoint >> 6 & 63) << 24 >> 24;
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = (128 | $codePoint & 63) << 24 >> 24;
                    var$9 = $inPos;
                }
                $inPos = var$9;
                $outPos = $low;
            }
            var$9 = $inPos;
        }
        $controller.$inPosition = var$9;
        $controller.$outPosition = $outPos;
        return $result;
    }
    var ji_IOException = $rt_classWithoutFields(jl_Exception);
    var ju_ConcurrentModificationException = $rt_classWithoutFields(jl_RuntimeException);
    var jur_MatchResult = $rt_classWithoutFields(0);
    function jur_Matcher() {
        var a = this; jl_Object.call(a);
        a.$pat = null;
        a.$start0 = null;
        a.$string = null;
        a.$matchResult = null;
        a.$leftBound = 0;
        a.$rightBound = 0;
    }
    function jur_Matcher_find($this, $start) {
        var $stringLength, var$3, var$4;
        $stringLength = jl_String_length($this.$string);
        if ($start >= 0 && $start <= $stringLength) {
            jur_MatchResultImpl_reset($this.$matchResult, null, (-1), (-1));
            var$3 = $this.$matchResult;
            var$3.$mode1 = 1;
            var$3.$startIndex = $start;
            $stringLength = var$3.$previousMatch;
            if ($stringLength < 0)
                $stringLength = $start;
            var$3.$previousMatch = $stringLength;
            $start = $this.$start0.$find0($start, $this.$string, var$3);
            if ($start == (-1))
                $this.$matchResult.$hitEnd = 1;
            if ($start >= 0) {
                var$3 = $this.$matchResult;
                if (var$3.$valid) {
                    var$4 = var$3.$groupBounds.data;
                    if (var$4[0] == (-1)) {
                        $stringLength = var$3.$startIndex;
                        var$4[0] = $stringLength;
                        var$4[1] = $stringLength;
                    }
                    var$3.$previousMatch = jur_MatchResultImpl_end(var$3);
                    return 1;
                }
            }
            $this.$matchResult.$startIndex = (-1);
            return 0;
        }
        var$3 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$3, jl_String_valueOf0($start));
        $rt_throw(var$3);
    }
    function jur_Matcher_start($this) {
        return jur_MatchResultImpl_start0($this.$matchResult, 0);
    }
    function jur_Matcher_end($this) {
        return jur_MatchResultImpl_end0($this.$matchResult, 0);
    }
    function jur_Matcher_hasTransparentBounds($this) {
        return $this.$matchResult.$transparentBounds;
    }
    function jur_AbstractCharClass$LazyJavaLowerCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$020 = null;
    }
    function jur_AbstractCharClass$LazyJavaLowerCase$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 2 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$021 = null;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 1 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaWhitespace$1() {
        jur_AbstractCharClass.call(this);
        this.$this$022 = null;
    }
    function jur_AbstractCharClass$LazyJavaWhitespace$1_contains($this, $ch) {
        return jl_Character_isWhitespace($ch);
    }
    function jur_AbstractCharClass$LazyJavaMirrored$1() {
        jur_AbstractCharClass.call(this);
        this.$this$023 = null;
    }
    function jur_AbstractCharClass$LazyJavaMirrored$1_contains($this, $ch) {
        return 0;
    }
    function jur_AbstractCharClass$LazyJavaDefined$1() {
        jur_AbstractCharClass.call(this);
        this.$this$024 = null;
    }
    function jur_AbstractCharClass$LazyJavaDefined$1_contains($this, $ch) {
        return !jl_Character_getType($ch) ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaDigit$1() {
        jur_AbstractCharClass.call(this);
        this.$this$025 = null;
    }
    function jur_AbstractCharClass$LazyJavaDigit$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 9 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1() {
        jur_AbstractCharClass.call(this);
        this.$this$026 = null;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains($this, $ch) {
        return jl_Character_isIdentifierIgnorable($ch);
    }
    function jur_AbstractCharClass$LazyJavaISOControl$1() {
        jur_AbstractCharClass.call(this);
        this.$this$027 = null;
    }
    function jur_AbstractCharClass$LazyJavaISOControl$1_contains($this, $ch) {
        a: {
            b: {
                if (!($ch >= 0 && $ch <= 31)) {
                    if ($ch < 127)
                        break b;
                    if ($ch > 159)
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = 0;
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$028 = null;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 10:
                    case 23:
                    case 26:
                        break;
                    case 7:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 24:
                    case 25:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$029 = null;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 23:
                    case 26:
                        break;
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 24:
                    case 25:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaLetter$1() {
        jur_AbstractCharClass.call(this);
        this.$this$030 = null;
    }
    function jur_AbstractCharClass$LazyJavaLetter$1_contains($this, $ch) {
        return jl_Character_isLetter($ch);
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit$1() {
        jur_AbstractCharClass.call(this);
        this.$this$031 = null;
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains($this, $ch) {
        return jl_Character_isLetterOrDigit($ch);
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar$1() {
        jur_AbstractCharClass.call(this);
        this.$this$032 = null;
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar$1_contains($this, $ch) {
        return jl_Character_isSpaceChar($ch);
    }
    function jur_AbstractCharClass$LazyJavaTitleCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$033 = null;
    }
    function jur_AbstractCharClass$LazyJavaTitleCase$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 3 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$034 = null;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 10:
                    case 23:
                        break;
                    case 7:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$035 = null;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                        break;
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_UnicodeCategory() {
        jur_AbstractCharClass.call(this);
        this.$category1 = 0;
    }
    function jur_UnicodeCategory__init_(var_0) {
        var var_1 = new jur_UnicodeCategory();
        jur_UnicodeCategory__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UnicodeCategory__init_0($this, $category) {
        jur_AbstractCharClass__init_($this);
        $this.$category1 = $category;
    }
    function jur_UnicodeCategory_contains($this, $ch) {
        return $this.$alt0 ^ ($this.$category1 != jl_Character_getType($ch & 65535) ? 0 : 1);
    }
    var jur_UnicodeCategoryScope = $rt_classWithoutFields(jur_UnicodeCategory);
    function jur_UnicodeCategoryScope_contains($this, $ch) {
        return $this.$alt0 ^ (!($this.$category1 >> jl_Character_getType($ch & 65535) & 1) ? 0 : 1);
    }
    var otcic_Console = $rt_classWithoutFields();
    function jur_MatchResultImpl() {
        var a = this; jl_Object.call(a);
        a.$groupBounds = null;
        a.$consumers = null;
        a.$compQuantCounters = null;
        a.$string2 = null;
        a.$groupCount = 0;
        a.$valid = 0;
        a.$leftBound0 = 0;
        a.$rightBound0 = 0;
        a.$startIndex = 0;
        a.$transparentBounds = 0;
        a.$anchoringBounds = 0;
        a.$hitEnd = 0;
        a.$requireEnd = 0;
        a.$previousMatch = 0;
        a.$mode1 = 0;
    }
    function jur_MatchResultImpl_setConsumed($this, $counter, $value) {
        $this.$consumers.data[$counter] = $value;
    }
    function jur_MatchResultImpl_getConsumed($this, $counter) {
        return $this.$consumers.data[$counter];
    }
    function jur_MatchResultImpl_end($this) {
        return jur_MatchResultImpl_end0($this, 0);
    }
    function jur_MatchResultImpl_end0($this, $group) {
        jur_MatchResultImpl_checkGroup($this, $group);
        return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
    }
    function jur_MatchResultImpl_setStart($this, $group, $offset) {
        $this.$groupBounds.data[$group * 2 | 0] = $offset;
    }
    function jur_MatchResultImpl_setEnd($this, $group, $offset) {
        $this.$groupBounds.data[($group * 2 | 0) + 1 | 0] = $offset;
    }
    function jur_MatchResultImpl_getStart($this, $group) {
        return $this.$groupBounds.data[$group * 2 | 0];
    }
    function jur_MatchResultImpl_getEnd($this, $group) {
        return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
    }
    function jur_MatchResultImpl_start($this) {
        return jur_MatchResultImpl_start0($this, 0);
    }
    function jur_MatchResultImpl_start0($this, $group) {
        jur_MatchResultImpl_checkGroup($this, $group);
        return $this.$groupBounds.data[$group * 2 | 0];
    }
    function jur_MatchResultImpl_getEnterCounter($this, $setCounter) {
        return $this.$compQuantCounters.data[$setCounter];
    }
    function jur_MatchResultImpl_setEnterCounter($this, $setCounter, $value) {
        $this.$compQuantCounters.data[$setCounter] = $value;
    }
    function jur_MatchResultImpl_checkGroup($this, $group) {
        var var$2;
        if (!$this.$valid) {
            var$2 = new jl_IllegalStateException;
            jl_Exception__init_(var$2);
            $rt_throw(var$2);
        }
        if ($group >= 0 && $group < $this.$groupCount)
            return;
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$2, jl_String_valueOf0($group));
        $rt_throw(var$2);
    }
    function jur_MatchResultImpl_reset($this, $newSequence, $leftBound, $rightBound) {
        $this.$valid = 0;
        $this.$mode1 = 2;
        ju_Arrays_fill($this.$groupBounds, (-1));
        ju_Arrays_fill($this.$consumers, (-1));
        if ($newSequence !== null)
            $this.$string2 = $newSequence;
        if ($leftBound >= 0) {
            $this.$leftBound0 = $leftBound;
            $this.$rightBound0 = $rightBound;
        }
        $this.$startIndex = $this.$leftBound0;
    }
    function jur_MatchResultImpl_mode($this) {
        return $this.$mode1;
    }
    var jl_AbstractStringBuilder$Constants = $rt_classWithoutFields();
    var jl_AbstractStringBuilder$Constants_intPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_longPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_longLogPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_doubleAnalysisResult = null;
    var jl_AbstractStringBuilder$Constants_floatAnalysisResult = null;
    function jl_AbstractStringBuilder$Constants__clinit_() {
        jl_AbstractStringBuilder$Constants_intPowersOfTen = $rt_createIntArrayFromData([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]);
        jl_AbstractStringBuilder$Constants_longPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(1000), Long_fromInt(10000), Long_fromInt(100000), Long_fromInt(1000000), Long_fromInt(10000000), Long_fromInt(100000000), Long_fromInt(1000000000), Long_create(1410065408, 2), Long_create(1215752192, 23), Long_create(3567587328, 232), Long_create(1316134912, 2328), Long_create(276447232, 23283), Long_create(2764472320, 232830), Long_create(1874919424, 2328306),
        Long_create(1569325056, 23283064), Long_create(2808348672, 232830643)]);
        jl_AbstractStringBuilder$Constants_longLogPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(10000), Long_fromInt(100000000), Long_create(1874919424, 2328306)]);
        jl_AbstractStringBuilder$Constants_doubleAnalysisResult = new otcit_DoubleAnalyzer$Result;
        jl_AbstractStringBuilder$Constants_floatAnalysisResult = new otcit_FloatAnalyzer$Result;
    }
    function otcit_FloatAnalyzer$Result() {
        var a = this; jl_Object.call(a);
        a.$mantissa = 0;
        a.$exponent = 0;
        a.$sign = 0;
    }
    var jl_Long = $rt_classWithoutFields(jl_Number);
    var jl_Long_TYPE = null;
    function jl_Long_compareUnsigned(var$1, var$2) {
        return Long_ucompare(var$1, var$2);
    }
    function jl_Long__clinit_() {
        jl_Long_TYPE = $rt_cls($rt_longcls());
    }
    var otcit_DoubleAnalyzer$Result = $rt_classWithoutFields();
    var jl_IllegalStateException = $rt_classWithoutFields(jl_RuntimeException);
    var jnc_CoderMalfunctionError = $rt_classWithoutFields(jl_Error);
    function jnc_CoderMalfunctionError__init_(var_0) {
        var var_1 = new jnc_CoderMalfunctionError();
        jnc_CoderMalfunctionError__init_0(var_1, var_0);
        return var_1;
    }
    function jnc_CoderMalfunctionError__init_0($this, $cause) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
        $this.$cause = $cause;
    }
    var jl_UnsupportedOperationException = $rt_classWithoutFields(jl_RuntimeException);
    function jnci_BufferedEncoder$Controller() {
        var a = this; jl_Object.call(a);
        a.$in = null;
        a.$out1 = null;
        a.$inPosition = 0;
        a.$outPosition = 0;
    }
    function jnci_BufferedEncoder$Controller_hasMoreOutput($this, $sz) {
        return jn_Buffer_remaining($this.$out1) < $sz ? 0 : 1;
    }
    var jn_ReadOnlyBufferException = $rt_classWithoutFields(jl_UnsupportedOperationException);
    var jn_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException);
    var jn_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException);
    var jur_IntArrHash = $rt_classWithoutFields();
    $rt_packages([-1, "java", 0, "util", 1, "regex", 0, "lang", -1, "trackerjo", 4, "javaish"
    ]);
    $rt_metadata([jl_Object, "Object", 3, 0, [], 0, 3, 0, 0, ["$equals", $rt_wrapFunction1(jl_Object_equals), "$toString", $rt_wrapFunction0(jl_Object_toString)],
    t_Client, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jlr_AnnotatedElement, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jlr_Type, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Class, 0, jl_Object, [jlr_AnnotatedElement, jlr_Type], 0, 3, 0, 0, 0,
    otji_JS, 0, jl_Object, [], 4, 0, 0, 0, 0,
    otp_Platform, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_Throwable, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_Exception, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
    jl_RuntimeException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
    jl_ClassCastException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ji_Serializable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Comparable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_CharSequence, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_String, "String", 3, jl_Object, [ji_Serializable, jl_Comparable, jl_CharSequence], 0, 3, 0, jl_String_$callClinit, ["$toString", $rt_wrapFunction0(jl_String_toString), "$equals", $rt_wrapFunction1(jl_String_equals)],
    jl_Error, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
    jl_LinkageError, 0, jl_Error, [], 0, 3, 0, 0, 0,
    jl_NoClassDefFoundError, 0, jl_LinkageError, [], 0, 3, 0, 0, 0,
    jl_Number, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0, 0,
    jl_Integer, "Integer", 3, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Integer_toString0)],
    jl_AbstractStringBuilder, 0, jl_Object, [ji_Serializable, jl_CharSequence], 0, 0, 0, 0, ["$ensureCapacity", $rt_wrapFunction1(jl_AbstractStringBuilder_ensureCapacity), "$toString", $rt_wrapFunction0(jl_AbstractStringBuilder_toString)],
    jl_Appendable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_StringBuilder, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert1", $rt_wrapFunction4(jl_StringBuilder_insert0), "$append3", $rt_wrapFunction3(jl_StringBuilder_append4), "$toString", $rt_wrapFunction0(jl_StringBuilder_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuilder_ensureCapacity), "$insert0", $rt_wrapFunction2(jl_StringBuilder_insert1)],
    jl_IncompatibleClassChangeError, 0, jl_LinkageError, [], 0, 3, 0, 0, 0,
    jl_NoSuchFieldError, 0, jl_IncompatibleClassChangeError, [], 0, 3, 0, 0, 0,
    jl_NoSuchMethodError, 0, jl_IncompatibleClassChangeError, [], 0, 3, 0, 0, 0,
    otj_JSObject, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otjdx_Node, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otjdx_Document, 0, jl_Object, [otjdx_Node], 3, 3, 0, 0, 0,
    otjde_EventTarget, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otjdh_HTMLDocument, 0, jl_Object, [otjdx_Document, otjde_EventTarget], 3, 3, 0, 0, 0,
    tj_Runner, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_System, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otci_IntegerUtil, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otjde_FocusEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_MouseEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_KeyboardEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_LoadEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_GamepadEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjb_WindowEventTarget, 0, jl_Object, [otjde_EventTarget, otjde_FocusEventTarget, otjde_MouseEventTarget, otjde_KeyboardEventTarget, otjde_LoadEventTarget, otjde_GamepadEventTarget], 3, 3, 0, 0, 0,
    otjb_StorageProvider, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otjc_JSArrayReader, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otjb_Window, 0, jl_Object, [otj_JSObject, otjb_WindowEventTarget, otjb_StorageProvider, otjc_JSArrayReader], 1, 3, 0, 0, ["$get$exported$0", $rt_wrapFunction1(otjb_Window_get$exported$0), "$addEventListener$exported$1", $rt_wrapFunction2(otjb_Window_addEventListener$exported$1), "$removeEventListener$exported$2", $rt_wrapFunction2(otjb_Window_removeEventListener$exported$2), "$removeEventListener$exported$3", $rt_wrapFunction3(otjb_Window_removeEventListener$exported$3), "$dispatchEvent$exported$4", $rt_wrapFunction1(otjb_Window_dispatchEvent$exported$4),
    "$getLength$exported$5", $rt_wrapFunction0(otjb_Window_getLength$exported$5), "$addEventListener$exported$6", $rt_wrapFunction3(otjb_Window_addEventListener$exported$6)],
    tj_Variables, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_Parser, 0, jl_Object, [], 0, 3, 0, 0, 0,
    tj_Translator, 0, jl_Object, [], 0, 3, 0, 0, 0,
    tj_Interpreter, 0, jl_Object, [], 0, 3, 0, 0, 0,
    ju_Comparator, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_String$_clinit_$lambda$_89_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
    jl_IndexOutOfBoundsException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0]);
    $rt_metadata([jlr_Array, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_NullPointerException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jl_ArrayStoreException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jl_Character, 0, jl_Object, [jl_Comparable], 0, 3, 0, 0, 0,
    ju_Map, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_AbstractMap, 0, jl_Object, [ju_Map], 1, 3, 0, 0, 0,
    jl_Cloneable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_HashMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
    jl_Iterable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_Collection, 0, jl_Object, [jl_Iterable], 3, 3, 0, 0, 0,
    ju_AbstractCollection, 0, jl_Object, [ju_Collection], 1, 3, 0, 0, 0,
    ju_SequencedCollection, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
    ju_List, 0, jl_Object, [ju_SequencedCollection], 3, 3, 0, 0, 0,
    ju_AbstractList, 0, ju_AbstractCollection, [ju_List], 1, 3, 0, 0, 0,
    ju_RandomAccess, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_ArrayList, 0, ju_AbstractList, [jl_Cloneable, ji_Serializable, ju_RandomAccess], 0, 3, 0, 0, 0,
    tj_Statements, 0, jl_Object, [], 0, 3, 0, 0, ["$getLine", $rt_wrapFunction0(tj_Statements_getLine)],
    tj_ClassStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ClassStmt_getLine)],
    otji_JSWrapper, 0, jl_Object, [], 4, 3, 0, otji_JSWrapper_$callClinit, 0,
    jl_Enum, 0, jl_Object, [jl_Comparable, ji_Serializable], 1, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Enum_toString)],
    tj_Statements$StmtType, 0, jl_Enum, [], 12, 0, 0, tj_Statements$StmtType_$callClinit, 0,
    otjc_JSWeakMap, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjc_JSWeakRef, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjc_JSMap, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjc_JSFinalizationRegistryConsumer, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otji_JSWrapper$_clinit_$lambda$_29_0, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, ["$accept$exported$0", $rt_wrapFunction1(otji_JSWrapper$_clinit_$lambda$_29_0_accept$exported$0)],
    otjc_JSFinalizationRegistry, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otji_JSWrapper$_clinit_$lambda$_29_1, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, ["$accept$exported$0", $rt_wrapFunction1(otji_JSWrapper$_clinit_$lambda$_29_1_accept$exported$0)],
    jl_IllegalArgumentException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    otjc_JSObjects, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_StringIndexOutOfBoundsException, 0, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
    jur_Pattern, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0, 0,
    tj_CommentStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_CommentStmt_getLine)],
    tj_Expression$ExpressionReturnType, 0, jl_Enum, [], 12, 0, 0, tj_Expression$ExpressionReturnType_$callClinit, 0,
    tj_Parser$1, 0, jl_Object, [], 32, 0, 0, tj_Parser$1_$callClinit, 0,
    tj_Expression, 0, jl_Object, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(tj_Expression_toString)],
    tj_IfStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_IfStmt_getLine)],
    tj_WhileStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_WhileStmt_getLine)],
    tj_ReturnStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ReturnStmt_getLine)],
    tj_MutationStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_MutationStmt_getLine)],
    tj_Statements$MutationType, 0, jl_Enum, [], 12, 3, 0, tj_Statements$MutationType_$callClinit, 0,
    tj_RemoveAllFromStmt, 0, tj_Statements, [], 0, 0, 0, 0, 0,
    tj_RemoveFromStmt, 0, tj_Statements, [], 0, 0, 0, 0, 0,
    tj_RemoveAtStmt, 0, tj_Statements, [], 0, 0, 0, 0, 0,
    tj_AssignmentStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_AssignmentStmt_getLine)],
    tj_Error, 0, jl_Object, [], 0, 3, 0, 0, 0,
    tj_PrintStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_PrintStmt_getLine)],
    tj_CallStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_CallStmt_getLine)],
    tj_ShowMsgBoxStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ShowMsgBoxStmt_getLine)],
    tj_Argument, 0, jl_Object, [], 0, 3, 0, 0, 0]);
    $rt_metadata([tj_FunctionStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_FunctionStmt_getLine)],
    tj_ForWhenStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ForWhenStmt_getLine)],
    tj_ForEachStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ForEachStmt_getLine)],
    tj_ElseStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ElseStmt_getLine)],
    tj_ElseIfStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_ElseIfStmt_getLine)],
    tj_DeclarationStmt, 0, tj_Statements, [], 0, 0, 0, 0, ["$getLine", $rt_wrapFunction0(tj_DeclarationStmt_getLine)],
    ju_Map$Entry, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_MapEntry, 0, jl_Object, [ju_Map$Entry, jl_Cloneable], 0, 0, 0, 0, 0,
    ju_HashMap$HashEntry, 0, ju_MapEntry, [], 0, 0, 0, 0, 0,
    tj_JavaishVal$JavaishType, 0, jl_Enum, [], 12, 3, 0, tj_JavaishVal$JavaishType_$callClinit, 0,
    jl_AutoCloseable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ji_Closeable, 0, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0, 0,
    ji_Flushable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ji_OutputStream, 0, jl_Object, [ji_Closeable, ji_Flushable], 1, 3, 0, 0, 0,
    ji_FilterOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
    ji_PrintStream, 0, ji_FilterOutputStream, [], 0, 3, 0, 0, 0,
    otcic_ConsoleOutputStream, 0, ji_OutputStream, [], 1, 3, 0, 0, 0,
    otcic_StdoutOutputStream, 0, otcic_ConsoleOutputStream, [], 0, 3, 0, 0, 0,
    tj_Translator$1, 0, jl_Object, [], 32, 0, 0, tj_Translator$1_$callClinit, 0,
    tj_Result, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_Return, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jur_AbstractSet, 0, jl_Object, [], 1, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_AbstractSet_find), "$findBack", $rt_wrapFunction4(jur_AbstractSet_findBack), "$getType3", $rt_wrapFunction0(jur_AbstractSet_getType), "$setNext", $rt_wrapFunction1(jur_AbstractSet_setNext), "$first", $rt_wrapFunction1(jur_AbstractSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_AbstractSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_AbstractSet_processSecondPass)],
    jnc_Charset, 0, jl_Object, [jl_Comparable], 1, 3, 0, 0, 0,
    jnci_UTF8Charset, 0, jnc_Charset, [], 0, 3, 0, jnci_UTF8Charset_$callClinit, 0,
    tj_Element, 0, jl_Object, [], 0, 3, 0, 0, 0,
    tj_ExpressionElmt, "ExpressionElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_ExpressionElmt_toString)],
    tj_CastElmt, "CastElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_CastElmt_toString)],
    tj_ListValElmt, "ListValElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_ListValElmt_toString)],
    tj_StringElmt, "StringElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_StringElmt_toString)],
    tj_NotEqualElmt, "NotEqualElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_NotEqualElmt_toString)],
    tj_GreaterThanElmt, "GreaterThanElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_GreaterThanElmt_toString)],
    tj_GreaterThanEqualElmt, "GreaterThanEqualElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_GreaterThanEqualElmt_toString)],
    tj_LessThanElmt, "LessThanElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_LessThanElmt_toString)],
    tj_LessThanEqualElmt, "LessThanEqualElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_LessThanEqualElmt_toString)],
    tj_ArrayLengthElmt, "ArrayLengthElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_ArrayLengthElmt_toString)],
    tj_NotElmt, "NotElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_NotElmt_toString)],
    tj_ShowInputBoxElmt, "ShowInputBoxElmt", 5, tj_Element, [], 0, 0, 0, 0, 0,
    tj_FunctionElmt, "FunctionElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_FunctionElmt_toString)],
    tj_ListElmt, "ListElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_ListElmt_toString)],
    otjc_JSArray, 0, jl_Object, [otjc_JSArrayReader], 1, 3, 0, 0, ["$get$exported$0", $rt_wrapFunction1(otjc_JSArray_get$exported$0), "$getLength$exported$1", $rt_wrapFunction0(otjc_JSArray_getLength$exported$1)],
    otjc_JSString, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    jur_FSet, 0, jur_AbstractSet, [], 0, 0, 0, jur_FSet_$callClinit, ["$matches", $rt_wrapFunction3(jur_FSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_FSet_hasConsumed)],
    jur_Lexer, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jur_PatternSyntaxException, 0, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    tj_Element$ElementType, 0, jl_Enum, [], 12, 3, 0, tj_Element$ElementType_$callClinit, 0,
    tj_IntElmt, "IntElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_IntElmt_toString)],
    tj_FloatElmt, "FloatElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_FloatElmt_toString)],
    jl_Float, "Float", 3, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Float_toString0)],
    tj_BoolElmt, "BoolElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_BoolElmt_toString)],
    jl_Boolean, "Boolean", 3, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Boolean_toString0)]]);
    $rt_metadata([tj_EqualElmt, "EqualElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_EqualElmt_toString)],
    tj_AndElmt, "AndElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_AndElmt_toString)],
    tj_OrElmt, "OrElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_OrElmt_toString)],
    tj_PlusElmt, "PlusElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_PlusElmt_toString)],
    tj_MinusElmt, "MinusElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_MinusElmt_toString)],
    tj_MultiplyElmt, "MultiplyElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_MultiplyElmt_toString)],
    tj_DivideElmt, "DivideElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_DivideElmt_toString)],
    tj_VariableElmt, "VariableElmt", 5, tj_Element, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(tj_VariableElmt_toString)],
    tj_Expression$1, 0, jl_Object, [], 32, 0, 0, tj_Expression$1_$callClinit, 0,
    tj_Translator$Operator, 0, jl_Enum, [], 12, 0, 0, tj_Translator$Operator_$callClinit, 0,
    tj_JavaishVal, 0, jl_Object, [], 3, 3, 0, 0, 0,
    tj_JavaishFloat, 0, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishFloat_getType), "$typeString", $rt_wrapFunction0(tj_JavaishFloat_typeString), "$getValue8", $rt_wrapFunction0(tj_JavaishFloat_getValue0)],
    tj_JavaishInt, 0, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishInt_getType), "$typeString", $rt_wrapFunction0(tj_JavaishInt_typeString), "$getValue8", $rt_wrapFunction0(tj_JavaishInt_getValue0)],
    tj_JavaishListVal, 0, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishListVal_getType), "$typeString", $rt_wrapFunction0(tj_JavaishListVal_typeString), "$getValue8", $rt_wrapFunction0(tj_JavaishListVal_getValue0)],
    tj_JavaishString, 0, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishString_getType), "$typeString", $rt_wrapFunction0(tj_JavaishString_typeString), "$getValue8", $rt_wrapFunction0(tj_JavaishString_getValue0)],
    tj_JavaishBoolean, 0, jl_Object, [tj_JavaishVal], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishBoolean_getType), "$typeString", $rt_wrapFunction0(tj_JavaishBoolean_typeString), "$getValue8", $rt_wrapFunction0(tj_JavaishBoolean_getValue0)],
    tj_JavaishList, 0, jl_Object, [], 3, 3, 0, 0, 0,
    tj_JavaishStringList, "JavaishStringList", 5, jl_Object, [tj_JavaishList], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishStringList_getType), "$typeString", $rt_wrapFunction0(tj_JavaishStringList_typeString), "$getInnerType", $rt_wrapFunction0(tj_JavaishStringList_getInnerType), "$listString", $rt_wrapFunction0(tj_JavaishStringList_listString), "$getLength0", $rt_wrapFunction0(tj_JavaishStringList_getLength), "$getValue7", $rt_wrapFunction1(tj_JavaishStringList_getValue)],
    tj_JavaishBooleanList, "JavaishBooleanList", 5, jl_Object, [tj_JavaishList], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishBooleanList_getType), "$typeString", $rt_wrapFunction0(tj_JavaishBooleanList_typeString), "$getInnerType", $rt_wrapFunction0(tj_JavaishBooleanList_getInnerType), "$listString", $rt_wrapFunction0(tj_JavaishBooleanList_listString), "$getLength0", $rt_wrapFunction0(tj_JavaishBooleanList_getLength), "$getValue7", $rt_wrapFunction1(tj_JavaishBooleanList_getValue)],
    tj_JavaishIntList, "JavaishIntList", 5, jl_Object, [tj_JavaishList], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishIntList_getType), "$typeString", $rt_wrapFunction0(tj_JavaishIntList_typeString), "$getInnerType", $rt_wrapFunction0(tj_JavaishIntList_getInnerType), "$listString", $rt_wrapFunction0(tj_JavaishIntList_listString), "$getLength0", $rt_wrapFunction0(tj_JavaishIntList_getLength), "$getValue7", $rt_wrapFunction1(tj_JavaishIntList_getValue)],
    tj_JavaishFloatList, "JavaishFloatList", 5, jl_Object, [tj_JavaishList], 4, 0, 0, 0, ["$getType", $rt_wrapFunction0(tj_JavaishFloatList_getType), "$typeString", $rt_wrapFunction0(tj_JavaishFloatList_typeString), "$getInnerType", $rt_wrapFunction0(tj_JavaishFloatList_getInnerType), "$listString", $rt_wrapFunction0(tj_JavaishFloatList_listString), "$getLength0", $rt_wrapFunction0(tj_JavaishFloatList_getLength), "$getValue7", $rt_wrapFunction1(tj_JavaishFloatList_getValue)],
    tj_Interpreter$Operator, 0, jl_Enum, [], 12, 0, 0, tj_Interpreter$Operator_$callClinit, 0,
    juc_TimeUnit, 0, jl_Enum, [], 12, 3, 0, juc_TimeUnit_$callClinit, 0,
    jl_InterruptedException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
    jur_NonCapFSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapFSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_NonCapFSet_hasConsumed)],
    jur_AheadFSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AheadFSet_matches)],
    jur_BehindFSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BehindFSet_matches)],
    jur_AtomicFSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicFSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_AtomicFSet_hasConsumed)],
    jur_FinalSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FinalSet_matches)],
    jur_LeafSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafSet_matches), "$charCount0", $rt_wrapFunction0(jur_LeafSet_charCount), "$hasConsumed", $rt_wrapFunction1(jur_LeafSet_hasConsumed)],
    jur_EmptySet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_EmptySet_accepts), "$find0", $rt_wrapFunction3(jur_EmptySet_find), "$findBack", $rt_wrapFunction4(jur_EmptySet_findBack), "$hasConsumed", $rt_wrapFunction1(jur_EmptySet_hasConsumed)],
    jur_JointSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_JointSet_matches), "$setNext", $rt_wrapFunction1(jur_JointSet_setNext), "$first", $rt_wrapFunction1(jur_JointSet_first), "$hasConsumed", $rt_wrapFunction1(jur_JointSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_JointSet_processSecondPass)],
    jur_NonCapJointSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapJointSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_NonCapJointSet_hasConsumed)],
    jur_AtomicJointSet, 0, jur_NonCapJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicJointSet_matches), "$setNext", $rt_wrapFunction1(jur_AtomicJointSet_setNext)],
    jur_PositiveLookAhead, 0, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookAhead_hasConsumed)],
    jur_NegativeLookAhead, 0, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookAhead_hasConsumed)],
    jur_PositiveLookBehind, 0, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookBehind_hasConsumed)],
    jur_NegativeLookBehind, 0, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookBehind_hasConsumed)],
    jur_SingleSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SingleSet_matches), "$find0", $rt_wrapFunction3(jur_SingleSet_find), "$findBack", $rt_wrapFunction4(jur_SingleSet_findBack), "$first", $rt_wrapFunction1(jur_SingleSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_SingleSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_SingleSet_processSecondPass)],
    jl_CloneNotSupportedException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
    jl_NumberFormatException, 0, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    otcit_FloatSynthesizer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_Math, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jur_SpecialToken, 0, jl_Object, [], 1, 0, 0, 0, 0,
    jur_AbstractCharClass, 0, jur_SpecialToken, [], 1, 0, 0, jur_AbstractCharClass_$callClinit, ["$getBits", $rt_wrapFunction0(jur_AbstractCharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_AbstractCharClass_getInstance), "$hasUCI", $rt_wrapFunction0(jur_AbstractCharClass_hasUCI)],
    jur_CharClass, "CharClass", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass_contains), "$getBits", $rt_wrapFunction0(jur_CharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_CharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_CharClass_getInstance), "$toString", $rt_wrapFunction0(jur_CharClass_toString), "$hasUCI", $rt_wrapFunction0(jur_CharClass_hasUCI)],
    ju_MissingResourceException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jur_QuantifierSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$first", $rt_wrapFunction1(jur_QuantifierSet_first), "$hasConsumed", $rt_wrapFunction1(jur_QuantifierSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_QuantifierSet_processSecondPass)],
    jur_LeafQuantifierSet, 0, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafQuantifierSet_matches)],
    jur_CompositeQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeQuantifierSet_matches)]]);
    $rt_metadata([jur_GroupQuantifierSet, 0, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_GroupQuantifierSet_matches)],
    jur_AltQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltQuantifierSet_setNext)],
    jur_UnifiedQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UnifiedQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_UnifiedQuantifierSet_find)],
    otcit_FloatAnalyzer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jur_AbstractCharClass$LazyCharClass, 0, jl_Object, [], 1, 0, 0, 0, 0,
    jur_Quantifier, "Quantifier", 2, jur_SpecialToken, [jl_Cloneable], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Quantifier_toString)],
    jur_FSet$PossessiveFSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FSet$PossessiveFSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_FSet$PossessiveFSet_hasConsumed)],
    ju_BitSet, 0, jl_Object, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
    jur_LowHighSurrogateRangeSet, 0, jur_JointSet, [], 0, 0, 0, 0, 0,
    jur_CompositeRangeSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeRangeSet_matches), "$setNext", $rt_wrapFunction1(jur_CompositeRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_CompositeRangeSet_hasConsumed), "$first", $rt_wrapFunction1(jur_CompositeRangeSet_first)],
    jur_SupplRangeSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SupplRangeSet_matches), "$contains1", $rt_wrapFunction1(jur_SupplRangeSet_contains), "$first", $rt_wrapFunction1(jur_SupplRangeSet_first), "$setNext", $rt_wrapFunction1(jur_SupplRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_SupplRangeSet_hasConsumed)],
    jur_UCISupplRangeSet, 0, jur_SupplRangeSet, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_UCISupplRangeSet_contains)],
    jur_UCIRangeSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCIRangeSet_accepts)],
    jur_RangeSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_RangeSet_accepts), "$first", $rt_wrapFunction1(jur_RangeSet_first)],
    jur_HangulDecomposedCharSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HangulDecomposedCharSet_setNext), "$matches", $rt_wrapFunction3(jur_HangulDecomposedCharSet_matches), "$first", $rt_wrapFunction1(jur_HangulDecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HangulDecomposedCharSet_hasConsumed)],
    jur_CharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$charCount0", $rt_wrapFunction0(jur_CharSet_charCount), "$accepts", $rt_wrapFunction2(jur_CharSet_accepts), "$find0", $rt_wrapFunction3(jur_CharSet_find), "$findBack", $rt_wrapFunction4(jur_CharSet_findBack), "$first", $rt_wrapFunction1(jur_CharSet_first)],
    jur_UCICharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCICharSet_accepts)],
    jur_CICharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CICharSet_accepts)],
    jur_DecomposedCharSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_DecomposedCharSet_setNext), "$matches", $rt_wrapFunction3(jur_DecomposedCharSet_matches), "$first", $rt_wrapFunction1(jur_DecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_DecomposedCharSet_hasConsumed)],
    jur_UCIDecomposedCharSet, 0, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
    jur_CIDecomposedCharSet, 0, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
    jur_PossessiveGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveGroupQuantifierSet_matches)],
    jur_PosPlusGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosPlusGroupQuantifierSet_matches)],
    jur_AltGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltGroupQuantifierSet_setNext)],
    jur_PosAltGroupQuantifierSet, 0, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosAltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_PosAltGroupQuantifierSet_setNext)],
    jur_CompositeGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeGroupQuantifierSet_matches)],
    jur_PosCompositeGroupQuantifierSet, 0, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosCompositeGroupQuantifierSet_matches)],
    jur_ReluctantGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantGroupQuantifierSet_matches)],
    jur_RelAltGroupQuantifierSet, 0, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelAltGroupQuantifierSet_matches)],
    jur_RelCompositeGroupQuantifierSet, 0, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelCompositeGroupQuantifierSet_matches)],
    jur_DotAllQuantifierSet, 0, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotAllQuantifierSet_find)],
    jur_DotQuantifierSet, 0, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotQuantifierSet_find)],
    jur_AbstractLineTerminator, 0, jl_Object, [], 1, 0, 0, 0, 0,
    jur_PossessiveQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveQuantifierSet_matches)],
    jur_PossessiveAltQuantifierSet, 0, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveAltQuantifierSet_matches)],
    jur_PossessiveCompositeQuantifierSet, 0, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveCompositeQuantifierSet_matches)],
    jur_ReluctantQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantQuantifierSet_matches)],
    jur_ReluctantAltQuantifierSet, 0, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantAltQuantifierSet_matches)],
    jur_ReluctantCompositeQuantifierSet, 0, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantCompositeQuantifierSet_matches)],
    jur_SOLSet, 0, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_SOLSet_hasConsumed)],
    jur_WordBoundary, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_WordBoundary_matches), "$hasConsumed", $rt_wrapFunction1(jur_WordBoundary_hasConsumed)],
    jur_PreviousMatch, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PreviousMatch_matches), "$hasConsumed", $rt_wrapFunction1(jur_PreviousMatch_hasConsumed)],
    jur_EOLSet, 0, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOLSet_hasConsumed)],
    jur_EOISet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOISet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOISet_hasConsumed)],
    jur_MultiLineSOLSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineSOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineSOLSet_hasConsumed)],
    jur_DotAllSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllSet_matches), "$setNext", $rt_wrapFunction1(jur_DotAllSet_setNext), "$getType3", $rt_wrapFunction0(jur_DotAllSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotAllSet_hasConsumed)],
    jur_DotSet, 0, jur_JointSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotSet_matches), "$setNext", $rt_wrapFunction1(jur_DotSet_setNext), "$getType3", $rt_wrapFunction0(jur_DotSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotSet_hasConsumed)],
    jur_UEOLSet, 0, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UEOLSet_hasConsumed)],
    jur_UMultiLineEOLSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UMultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UMultiLineEOLSet_hasConsumed)],
    jur_MultiLineEOLSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineEOLSet_hasConsumed)]]);
    $rt_metadata([jur_CIBackReferenceSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CIBackReferenceSet_matches), "$setNext", $rt_wrapFunction1(jur_CIBackReferenceSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_CIBackReferenceSet_hasConsumed)],
    jur_BackReferenceSet, 0, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BackReferenceSet_matches), "$find0", $rt_wrapFunction3(jur_BackReferenceSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferenceSet_findBack), "$first", $rt_wrapFunction1(jur_BackReferenceSet_first)],
    jur_UCIBackReferenceSet, 0, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UCIBackReferenceSet_matches)],
    jl_StringBuffer, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert1", $rt_wrapFunction4(jl_StringBuffer_insert), "$append3", $rt_wrapFunction3(jl_StringBuffer_append), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuffer_ensureCapacity), "$insert0", $rt_wrapFunction2(jl_StringBuffer_insert0)],
    jur_SequenceSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SequenceSet_accepts), "$find0", $rt_wrapFunction3(jur_SequenceSet_find), "$findBack", $rt_wrapFunction4(jur_SequenceSet_findBack), "$first", $rt_wrapFunction1(jur_SequenceSet_first)],
    jur_UCISequenceSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISequenceSet_accepts)],
    jur_CISequenceSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CISequenceSet_accepts)],
    jur_AbstractCharClass$PredefinedCharacterClasses, 0, jl_Object, [], 4, 0, 0, jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit, 0,
    jur_UCISupplCharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISupplCharSet_accepts)],
    jur_LowSurrogateCharSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_LowSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_LowSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_LowSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_LowSurrogateCharSet_findBack), "$first", $rt_wrapFunction1(jur_LowSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_LowSurrogateCharSet_hasConsumed)],
    jur_HighSurrogateCharSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HighSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_HighSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_HighSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_HighSurrogateCharSet_findBack), "$first", $rt_wrapFunction1(jur_HighSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HighSurrogateCharSet_hasConsumed)],
    jur_SupplCharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SupplCharSet_accepts), "$find0", $rt_wrapFunction3(jur_SupplCharSet_find), "$findBack", $rt_wrapFunction4(jur_SupplCharSet_findBack), "$first", $rt_wrapFunction1(jur_SupplCharSet_first)],
    jur_AbstractLineTerminator$1, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$1_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$1_isAfterLineTerminator)],
    jur_AbstractLineTerminator$2, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$2_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$2_isAfterLineTerminator)],
    jur_SequenceSet$IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jnc_IllegalCharsetNameException, 0, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    otciu_UnicodeHelper$Range, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jur_IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
    otpp_ResourceAccessor, 0, jl_Object, [], 4, 0, 0, 0, 0,
    otciu_UnicodeHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jur_AbstractCharClass$LazySpace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpace_computeValue)],
    jur_AbstractCharClass$LazyDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyDigit_computeValue)],
    jur_AbstractCharClass$LazyLower, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyLower_computeValue)],
    jur_AbstractCharClass$LazyUpper, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyUpper_computeValue)],
    jur_AbstractCharClass$LazyASCII, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyASCII_computeValue)],
    jur_AbstractCharClass$LazyAlpha, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlpha_computeValue)],
    jur_AbstractCharClass$LazyAlnum, 0, jur_AbstractCharClass$LazyAlpha, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlnum_computeValue)],
    jur_AbstractCharClass$LazyPunct, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPunct_computeValue)],
    jur_AbstractCharClass$LazyGraph, 0, jur_AbstractCharClass$LazyAlnum, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyGraph_computeValue)],
    jur_AbstractCharClass$LazyPrint, 0, jur_AbstractCharClass$LazyGraph, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPrint_computeValue)],
    jur_AbstractCharClass$LazyBlank, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyBlank_computeValue)],
    jur_AbstractCharClass$LazyCntrl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCntrl_computeValue)],
    jur_AbstractCharClass$LazyXDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyXDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaLowerCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLowerCase_computeValue)],
    jur_AbstractCharClass$LazyJavaUpperCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUpperCase_computeValue)],
    jur_AbstractCharClass$LazyJavaWhitespace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaWhitespace_computeValue)],
    jur_AbstractCharClass$LazyJavaMirrored, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaMirrored_computeValue)],
    jur_AbstractCharClass$LazyJavaDefined, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDefined_computeValue)],
    jur_AbstractCharClass$LazyJavaDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue)],
    jur_AbstractCharClass$LazyJavaISOControl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaISOControl_computeValue)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue)],
    jur_AbstractCharClass$LazyJavaLetter, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetter_computeValue)],
    jur_AbstractCharClass$LazyJavaLetterOrDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaSpaceChar, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaSpaceChar_computeValue)],
    jur_AbstractCharClass$LazyJavaTitleCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaTitleCase_computeValue)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue)],
    jur_AbstractCharClass$LazyWord, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyWord_computeValue)]]);
    $rt_metadata([jur_AbstractCharClass$LazyNonWord, 0, jur_AbstractCharClass$LazyWord, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonWord_computeValue)],
    jur_AbstractCharClass$LazyNonSpace, 0, jur_AbstractCharClass$LazySpace, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonSpace_computeValue)],
    jur_AbstractCharClass$LazyNonDigit, 0, jur_AbstractCharClass$LazyDigit, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonDigit_computeValue)],
    jur_AbstractCharClass$LazyRange, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyRange_computeValue)],
    jur_AbstractCharClass$LazySpecialsBlock, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpecialsBlock_computeValue)],
    jur_AbstractCharClass$LazyCategory, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategory_computeValue)],
    jur_AbstractCharClass$LazyCategoryScope, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategoryScope_computeValue)],
    ju_Arrays, 0, jl_Object, [], 0, 3, 0, 0, 0,
    otci_CharFlow, 0, jl_Object, [], 0, 3, 0, 0, 0,
    otci_Base46, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_NegativeArraySizeException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ju_Iterator, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_AbstractList$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
    jl_Runnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Thread, 0, jl_Object, [jl_Runnable], 0, 3, 0, jl_Thread_$callClinit, 0,
    ju_Objects, 0, jl_Object, [], 4, 3, 0, 0, 0,
    tj_IntVar, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_FloatVar, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_BoolVar, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_StringVar, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_StringList, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_BoolList, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_FloatList, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_IntList, 0, jl_Object, [], 0, 0, 0, 0, 0,
    tj_FunctionVar, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jur_AbstractCharClass$1, "AbstractCharClass$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$1_contains)],
    jur_AbstractCharClass$2, "AbstractCharClass$2", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$2_contains)],
    jur_CharClass$18, "CharClass$18", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$18_contains), "$toString", $rt_wrapFunction0(jur_CharClass$18_toString)],
    jur_CharClass$1, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$1_contains)],
    jur_CharClass$3, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$3_contains)],
    jur_CharClass$2, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$2_contains)],
    jur_CharClass$5, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$5_contains)],
    jur_CharClass$4, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$4_contains)],
    jur_CharClass$7, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$7_contains)],
    jur_CharClass$6, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$6_contains)],
    jur_CharClass$9, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$9_contains)],
    jur_CharClass$8, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$8_contains)],
    jur_CharClass$11, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$11_contains)],
    jur_CharClass$10, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$10_contains)],
    jur_CharClass$13, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$13_contains)],
    jur_CharClass$12, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$12_contains)],
    jur_CharClass$15, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$15_contains)],
    jur_CharClass$14, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$14_contains)],
    jur_CharClass$17, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$17_contains)],
    jur_CharClass$16, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$16_contains)],
    oti_AsyncCallback, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otpp_AsyncCallbackWrapper, 0, jl_Object, [oti_AsyncCallback], 0, 0, 0, 0, ["$complete", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_complete), "$error", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_error)],
    otp_PlatformRunnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otr_EventQueue$Event, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_ThreadInterruptHandler, 0, jl_Object, [], 3, 3, 0, 0, 0]);
    $rt_metadata([jl_Thread$SleepHandler, 0, jl_Object, [otp_PlatformRunnable, otr_EventQueue$Event, jl_ThreadInterruptHandler], 0, 0, 0, 0, 0,
    jn_Buffer, 0, jl_Object, [], 1, 3, 0, 0, 0,
    jl_Readable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jn_CharBuffer, 0, jn_Buffer, [jl_Comparable, jl_Appendable, jl_CharSequence, jl_Readable], 1, 3, 0, 0, 0,
    jn_ByteBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
    jnc_CodingErrorAction, 0, jl_Object, [], 0, 3, 0, jnc_CodingErrorAction_$callClinit, 0,
    jl_Thread$UncaughtExceptionHandler, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_DefaultUncaughtExceptionHandler, 0, jl_Object, [jl_Thread$UncaughtExceptionHandler], 0, 3, 0, 0, 0,
    jn_CharBufferImpl, 0, jn_CharBuffer, [], 1, 0, 0, 0, 0,
    jn_CharBufferOverArray, 0, jn_CharBufferImpl, [], 0, 0, 0, 0, 0,
    jnc_CharsetEncoder, 0, jl_Object, [], 1, 3, 0, 0, 0,
    jnc_CoderResult, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jn_ByteBufferImpl, 0, jn_ByteBuffer, [], 0, 0, 0, 0, 0,
    jn_ByteOrder, 0, jl_Object, [], 4, 3, 0, jn_ByteOrder_$callClinit, 0,
    jur_BackReferencedSingleSet, 0, jur_SingleSet, [], 0, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_BackReferencedSingleSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferencedSingleSet_findBack), "$processBackRefReplacement", $rt_wrapFunction0(jur_BackReferencedSingleSet_processBackRefReplacement)],
    jnci_BufferedEncoder, 0, jnc_CharsetEncoder, [], 1, 3, 0, 0, 0,
    jnci_UTF8Encoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0, 0,
    ji_IOException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
    ju_ConcurrentModificationException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jur_MatchResult, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jur_Matcher, 0, jl_Object, [jur_MatchResult], 4, 3, 0, 0, 0,
    jur_AbstractCharClass$LazyJavaLowerCase$1, "AbstractCharClass$LazyJavaLowerCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLowerCase$1_contains)],
    jur_AbstractCharClass$LazyJavaUpperCase$1, "AbstractCharClass$LazyJavaUpperCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUpperCase$1_contains)],
    jur_AbstractCharClass$LazyJavaWhitespace$1, "AbstractCharClass$LazyJavaWhitespace$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaWhitespace$1_contains)],
    jur_AbstractCharClass$LazyJavaMirrored$1, "AbstractCharClass$LazyJavaMirrored$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaMirrored$1_contains)],
    jur_AbstractCharClass$LazyJavaDefined$1, "AbstractCharClass$LazyJavaDefined$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDefined$1_contains)],
    jur_AbstractCharClass$LazyJavaDigit$1, "AbstractCharClass$LazyJavaDigit$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDigit$1_contains)],
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1, "AbstractCharClass$LazyJavaIdentifierIgnorable$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains)],
    jur_AbstractCharClass$LazyJavaISOControl$1, "AbstractCharClass$LazyJavaISOControl$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaISOControl$1_contains)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1, "AbstractCharClass$LazyJavaJavaIdentifierPart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1, "AbstractCharClass$LazyJavaJavaIdentifierStart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains)],
    jur_AbstractCharClass$LazyJavaLetter$1, "AbstractCharClass$LazyJavaLetter$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetter$1_contains)],
    jur_AbstractCharClass$LazyJavaLetterOrDigit$1, "AbstractCharClass$LazyJavaLetterOrDigit$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains)],
    jur_AbstractCharClass$LazyJavaSpaceChar$1, "AbstractCharClass$LazyJavaSpaceChar$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaSpaceChar$1_contains)],
    jur_AbstractCharClass$LazyJavaTitleCase$1, "AbstractCharClass$LazyJavaTitleCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaTitleCase$1_contains)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierPart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierStart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains)],
    jur_UnicodeCategory, "UnicodeCategory", 2, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_UnicodeCategory_contains)],
    jur_UnicodeCategoryScope, "UnicodeCategoryScope", 2, jur_UnicodeCategory, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_UnicodeCategoryScope_contains)],
    otcic_Console, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jur_MatchResultImpl, 0, jl_Object, [jur_MatchResult], 0, 0, 0, 0, 0,
    jl_AbstractStringBuilder$Constants, 0, jl_Object, [], 0, 0, 0, 0, 0,
    otcit_FloatAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_Long, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
    otcit_DoubleAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_IllegalStateException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnc_CoderMalfunctionError, 0, jl_Error, [], 0, 3, 0, 0, 0,
    jl_UnsupportedOperationException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnci_BufferedEncoder$Controller, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jn_ReadOnlyBufferException, 0, jl_UnsupportedOperationException, [], 0, 3, 0, 0, 0]);
    $rt_metadata([jn_BufferOverflowException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jn_BufferUnderflowException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jur_IntArrHash, 0, jl_Object, [], 0, 0, 0, 0, 0]);
    function $rt_array(cls, data) {
        this.$monitor = null;
        this.$id$ = 0;
        this.type = cls;
        this.data = data;
        this.constructor = $rt_arraycls(cls);
    }
    $rt_array.prototype = $rt_globals.Object.create(($rt_objcls()).prototype);
    $rt_array.prototype.toString = function() {
        var str = "[";
        for (var i = 0;i < this.data.length;++i) {
            if (i > 0) {
                str += ", ";
            }
            str += this.data[i].toString();
        }
        str += "]";
        return str;
    };
    $rt_setCloneMethod($rt_array.prototype, function() {
        var dataCopy;
        if ('slice' in this.data) {
            dataCopy = this.data.slice();
        } else {
            dataCopy = new this.data.constructor(this.data.length);
            for (var i = 0;i < dataCopy.length;++i) {
                dataCopy[i] = this.data[i];
            }
        }
        return new $rt_array(this.type, dataCopy);
    });
    $rt_stringPool(["0", "Running Code\n", "run", "\\.", "$main", "public class ", " {", "\tpublic static void main(String[] args) {", "\t}", "}", "", "null", "Patter is null", "String is null", "String is empty", "String contains invalid digits: ", "String contains digits out of radix ", ": ", "The value is too big for int type: ", "Illegal radix: ", "false", "true", "Either src or dest is null", "STRING", "INT", "FLOAT", "BOOLEAN", "Function ", " already exists!", "Float", "Boolean", "String", "Int", "INTLIST",
    "STRINGLIST", "BOOLEANLIST", "FLOATLIST", "FloatList", "BooleanList", "StringList", "IntList", "\n", "//", " ", "subtract", "divide", "remove", "return", "removeAt", "if", "add", "for", "let", "while", "}else", "multiply", "return.", "removeAll", "function", "Expression: ", "else", "when", "each", "ForCondition: ", ",", ":", "Invalid argument declaration. Full Arg", " Line: ", "equals", "=", "print", "showMessageDialog", "from", "sub", "(", "\\(", "in", "increment", "by", "to", "equal", "Unclosed string at line ",
    "bool[]", "float[]", "int", "bool", "float", "int[]", "String[]", "public static void ", ", ", ") {", "public static ", " = ", "),", ");", " else {", " else if(", "){", "System.out.println(", "Parsing INT ", "List", "Number or String", "Number or Bool", "Number", " && ", " !", "CastExpr: ", "(float)", "Float.parseFloat(", "(int)", "Integer.parseInt(", "String.valueOf(", "Boolean.parseBoolean(", " / ", " == ", " > ", " >= ", " < ", " <= ", " - ", " * ", " != ", " || ", " + ", ".get(", "new ArrayList<", ">(Arrays.asList(",
    "import java.util.ArrayList;", "import java.util.Arrays;", "))", ".size()", "Declaration: Type:", " Name: ", " Value:", "ArrayList<", "if(", "while(", "for(String ", " : ", "for(boolean ", "for(int ", "for(float ", "; ", "int ", " = 0;", "for(", " += ", "import javax.swing.JOptionPane;", "JOptionPane.showMessageDialog(null, ", "ShowInputBox", "JOptionPane.showInputDialog(", "++;", "--;", " -= ", " *= ", " /= ", ".add(", ".remove(", "LIST: ", ".remove(Integer.valueOf(", "));", ".removeAll(Arrays.asList(",
    "REMOVE FROM: ", "boolean", "FUNCTION", "RETURN", "IF", "CALL", "ELSE", "FOREACH", "FORWHEN", "PRINT", "WHILE", "DECLARATION", "REMOVEAT", "ASSIGNMENT", "REMOVEFROM", "MUTATION", "COMMENT", "REMOVEALLFROM", "SHOWMSGBOX", "ELSEIF", "EVAL ELSE IF: ", " PASSED: ", "INTEGER", "LESS_THAN_EQUAL", "EXPRESSION", "LESS_THAN", "ARRAYLENGTH", "VARIABLE", "OR", "AND", "NOT", "BOOL", "CAST", "LIST", "PLUS", "EQUAL", "MINUS", "GREATER_THAN_EQUAL", "LISTVAL", "GREATER_THAN", "NOT_EQUAL", "MULTIPLY", "SHOWINPUTBOX", "DIVIDE",
    "SUBTRACT", "ADD", "object", "string", "number", "END", "CLASS", "NUMBER", "EXPRESSION: ", "ARRAY ARG EXPR: ", "READING NOT", "showInputDialog", "ORIGINAL EXPR: ", " PARSING(", ")FUNCTION ARG: ", "toString", "CAST TO STRING: ", "toFloat", "toInt", "toBool", "Adding NOT", "call", "not", "greater", "than", "or", "less", "length", "LENGTH NEXT WORD: ", "of", "==", "!=", ">", "<", ">=", "<=", "and", "&&", "||", "+", "-", "times", "*", "/", "Unknown element at line ", " column ", "Unknown statement at line ",
    "Type mismatch at line ", ": Expected ", ", got ", "Variable ", "Unable to parse ", " to ", " at line ", " not declared at line ", "Can\'t perform mutation on ", "Argument length mismatch at line ", "Argument type mismatch at line ", " not global at line ", "Can\'t perform operation ", " on ", "Index bigger than array length at line ", ": Got:", ", Max: ", "Unclosed parenthesis at line ", "Missing period at end of statement at line ", "Unclosed bracket at line ", "List ", " empty at line ", "Index out of bounds",
    "Action must be non-null", "Replacement preconditions do not hold", "UTF-8", "EXPRESSION(", "CAST(", ".length", "[", "Is", "In", "VAR(", "boolean[]", "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "Lower", "Upper", "ASCII", "Alpha", "Digit", "Alnum", "Punct", "Graph", "Print", "Blank", "Cntrl", "XDigit", "javaLowerCase", "javaUpperCase", "javaWhitespace", "javaMirrored", "javaDefined", "javaDigit", "javaIdentifierIgnorable", "javaISOControl", "javaJavaIdentifierPart",
    "javaJavaIdentifierStart", "javaLetter", "javaLetterOrDigit", "javaSpaceChar", "javaTitleCase", "javaUnicodeIdentifierPart", "javaUnicodeIdentifierStart", "Space", "w", "W", "s", "S", "d", "D", "BasicLatin", "Latin-1Supplement", "LatinExtended-A", "LatinExtended-B", "IPAExtensions", "SpacingModifierLetters", "CombiningDiacriticalMarks", "Greek", "Cyrillic", "CyrillicSupplement", "Armenian", "Hebrew", "Arabic", "Syriac", "ArabicSupplement", "Thaana", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya",
    "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian", "HangulJamo", "Ethiopic", "EthiopicSupplement", "Cherokee", "UnifiedCanadianAboriginalSyllabics", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "TaiLe", "NewTaiLue", "KhmerSymbols", "Buginese", "PhoneticExtensions", "PhoneticExtensionsSupplement", "CombiningDiacriticalMarksSupplement", "LatinExtendedAdditional", "GreekExtended", "GeneralPunctuation", "SuperscriptsandSubscripts",
    "CurrencySymbols", "CombiningMarksforSymbols", "LetterlikeSymbols", "NumberForms", "Arrows", "MathematicalOperators", "MiscellaneousTechnical", "ControlPictures", "OpticalCharacterRecognition", "EnclosedAlphanumerics", "BoxDrawing", "BlockElements", "GeometricShapes", "MiscellaneousSymbols", "Dingbats", "MiscellaneousMathematicalSymbols-A", "SupplementalArrows-A", "BraillePatterns", "SupplementalArrows-B", "MiscellaneousMathematicalSymbols-B", "SupplementalMathematicalOperators", "MiscellaneousSymbolsandArrows",
    "Glagolitic", "Coptic", "GeorgianSupplement", "Tifinagh", "EthiopicExtended", "SupplementalPunctuation", "CJKRadicalsSupplement", "KangxiRadicals", "IdeographicDescriptionCharacters", "CJKSymbolsandPunctuation", "Hiragana", "Katakana", "Bopomofo", "HangulCompatibilityJamo", "Kanbun", "BopomofoExtended", "CJKStrokes", "KatakanaPhoneticExtensions", "EnclosedCJKLettersandMonths", "CJKCompatibility", "CJKUnifiedIdeographsExtensionA", "YijingHexagramSymbols", "CJKUnifiedIdeographs", "YiSyllables", "YiRadicals",
    "ModifierToneLetters", "SylotiNagri", "HangulSyllables", "HighSurrogates", "HighPrivateUseSurrogates", "LowSurrogates", "PrivateUseArea", "CJKCompatibilityIdeographs", "AlphabeticPresentationForms", "ArabicPresentationForms-A", "VariationSelectors", "VerticalForms", "CombiningHalfMarks", "CJKCompatibilityForms", "SmallFormVariants", "ArabicPresentationForms-B", "HalfwidthandFullwidthForms", "all", "Specials", "Cn", "IsL", "Lu", "Ll", "Lt", "Lm", "Lo", "IsM", "Mn", "Me", "Mc", "N", "Nd", "Nl", "No", "IsZ",
    "Zs", "Zl", "Zp", "IsC", "Cc", "Cf", "Co", "Cs", "IsP", "Pd", "Ps", "Pe", "Pc", "Po", "IsS", "Sm", "Sc", "Sk", "So", "Pi", "Pf", "main", "New position ", " is outside of range [0;", "The last byte in src ", " is outside of array of size ", "Length ", " must be non-negative", "Offset ", "IGNORE", "REPLACE", "REPORT", "BIG_ENDIAN", "LITTLE_ENDIAN", "The last char in dst "]);
    jl_String.prototype.toString = function() {
        return $rt_ustr(this);
    };
    jl_String.prototype.valueOf = jl_String.prototype.toString;
    jl_Object.prototype.toString = function() {
        return $rt_ustr(jl_Object_toString(this));
    };
    jl_Object.prototype.__teavm_class__ = function() {
        return $dbg_class(this);
    };
    var Long_eq;
    var Long_ne;
    var Long_gt;
    var Long_ge;
    var Long_lt;
    var Long_le;
    var Long_compare;
    var Long_ucompare;
    var Long_add;
    var Long_sub;
    var Long_inc;
    var Long_dec;
    var Long_mul;
    var Long_div;
    var Long_rem;
    var Long_udiv;
    var Long_urem;
    var Long_neg;
    var Long_and;
    var Long_or;
    var Long_xor;
    var Long_shl;
    var Long_shr;
    var Long_shru;
    var Long_not;
    if (typeof $rt_globals.BigInt !== 'function') {
        Long_eq = function(a, b) {
            return a.hi === b.hi && a.lo === b.lo;
        };
        Long_ne = function(a, b) {
            return a.hi !== b.hi || a.lo !== b.lo;
        };
        Long_gt = function(a, b) {
            if (a.hi < b.hi) {
                return false;
            }
            if (a.hi > b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x > y;
            }
            return (a.lo & 1) > (b.lo & 1);
        };
        Long_ge = function(a, b) {
            if (a.hi < b.hi) {
                return false;
            }
            if (a.hi > b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x >= y;
            }
            return (a.lo & 1) >= (b.lo & 1);
        };
        Long_lt = function(a, b) {
            if (a.hi > b.hi) {
                return false;
            }
            if (a.hi < b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x < y;
            }
            return (a.lo & 1) < (b.lo & 1);
        };
        Long_le = function(a, b) {
            if (a.hi > b.hi) {
                return false;
            }
            if (a.hi < b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x <= y;
            }
            return (a.lo & 1) <= (b.lo & 1);
        };
        Long_add = function(a, b) {
            if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
                return Long_fromNumber(a.lo + b.lo);
            } else if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) + Long_toNumber(b));
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = a_lolo + b_lolo | 0;
            var lohi = a_lohi + b_lohi + (lolo >> 16) | 0;
            var hilo = a_hilo + b_hilo + (lohi >> 16) | 0;
            var hihi = a_hihi + b_hihi + (hilo >> 16) | 0;
            return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
        };
        Long_inc = function(a) {
            var lo = a.lo + 1 | 0;
            var hi = a.hi;
            if (lo === 0) {
                hi = hi + 1 | 0;
            }
            return new Long(lo, hi);
        };
        Long_dec = function(a) {
            var lo = a.lo - 1 | 0;
            var hi = a.hi;
            if (lo ===  -1) {
                hi = hi - 1 | 0;
            }
            return new Long(lo, hi);
        };
        Long_neg = function(a) {
            return Long_inc(new Long(a.lo ^ 0xFFFFFFFF, a.hi ^ 0xFFFFFFFF));
        };
        Long_sub = function(a, b) {
            if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
                return Long_fromNumber(a.lo - b.lo);
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = a_lolo - b_lolo | 0;
            var lohi = a_lohi - b_lohi + (lolo >> 16) | 0;
            var hilo = a_hilo - b_hilo + (lohi >> 16) | 0;
            var hihi = a_hihi - b_hihi + (hilo >> 16) | 0;
            return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
        };
        Long_compare = function(a, b) {
            var r = a.hi - b.hi;
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        };
        Long_ucompare = function(a, b) {
            var r = $rt_ucmp(a.hi, b.hi);
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        };
        Long_mul = function(a, b) {
            var positive = Long_isNegative(a) === Long_isNegative(b);
            if (Long_isNegative(a)) {
                a = Long_neg(a);
            }
            if (Long_isNegative(b)) {
                b = Long_neg(b);
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = 0;
            var lohi = 0;
            var hilo = 0;
            var hihi = 0;
            lolo = a_lolo * b_lolo | 0;
            lohi = lolo >>> 16;
            lohi = (lohi & 0xFFFF) + a_lohi * b_lolo | 0;
            hilo = hilo + (lohi >>> 16) | 0;
            lohi = (lohi & 0xFFFF) + a_lolo * b_lohi | 0;
            hilo = hilo + (lohi >>> 16) | 0;
            hihi = hilo >>> 16;
            hilo = (hilo & 0xFFFF) + a_hilo * b_lolo | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hilo = (hilo & 0xFFFF) + a_lohi * b_lohi | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hilo = (hilo & 0xFFFF) + a_lolo * b_hilo | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hihi = hihi + a_hihi * b_lolo + a_hilo * b_lohi + a_lohi * b_hilo + a_lolo * b_hihi | 0;
            var result = new Long(lolo & 0xFFFF | lohi << 16, hilo & 0xFFFF | hihi << 16);
            return positive ? result : Long_neg(result);
        };
        Long_div = function(a, b) {
            if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_divRem(a, b))[0];
        };
        Long_udiv = function(a, b) {
            if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_udivRem(a, b))[0];
        };
        Long_rem = function(a, b) {
            if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) % Long_toNumber(b));
            }
            return (Long_divRem(a, b))[1];
        };
        Long_urem = function(a, b) {
            if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_udivRem(a, b))[1];
        };
        function Long_divRem(a, b) {
            if (b.lo === 0 && b.hi === 0) {
                throw new $rt_globals.Error("Division by zero");
            }
            var positive = Long_isNegative(a) === Long_isNegative(b);
            if (Long_isNegative(a)) {
                a = Long_neg(a);
            }
            if (Long_isNegative(b)) {
                b = Long_neg(b);
            }
            a = new LongInt(a.lo, a.hi, 0);
            b = new LongInt(b.lo, b.hi, 0);
            var q = LongInt_div(a, b);
            a = new Long(a.lo, a.hi);
            q = new Long(q.lo, q.hi);
            return positive ? [q, a] : [Long_neg(q), Long_neg(a)];
        }
        function Long_udivRem(a, b) {
            if (b.lo === 0 && b.hi === 0) {
                throw new $rt_globals.Error("Division by zero");
            }
            a = new LongInt(a.lo, a.hi, 0);
            b = new LongInt(b.lo, b.hi, 0);
            var q = LongInt_div(a, b);
            a = new Long(a.lo, a.hi);
            q = new Long(q.lo, q.hi);
            return [q, a];
        }
        function Long_shiftLeft16(a) {
            return new Long(a.lo << 16, a.lo >>> 16 | a.hi << 16);
        }
        function Long_shiftRight16(a) {
            return new Long(a.lo >>> 16 | a.hi << 16, a.hi >>> 16);
        }
        Long_and = function(a, b) {
            return new Long(a.lo & b.lo, a.hi & b.hi);
        };
        Long_or = function(a, b) {
            return new Long(a.lo | b.lo, a.hi | b.hi);
        };
        Long_xor = function(a, b) {
            return new Long(a.lo ^ b.lo, a.hi ^ b.hi);
        };
        Long_shl = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo << b, a.lo >>> 32 - b | a.hi << b);
            } else if (b === 32) {
                return new Long(0, a.lo);
            } else {
                return new Long(0, a.lo << b - 32);
            }
        };
        Long_shr = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >> b);
            } else if (b === 32) {
                return new Long(a.hi, a.hi >> 31);
            } else {
                return new Long(a.hi >> b - 32, a.hi >> 31);
            }
        };
        Long_shru = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >>> b);
            } else if (b === 32) {
                return new Long(a.hi, 0);
            } else {
                return new Long(a.hi >>> b - 32, 0);
            }
        };
        Long_not = function(a) {
            return new Long(~a.hi, ~a.lo);
        };
        function LongInt(lo, hi, sup) {
            this.lo = lo;
            this.hi = hi;
            this.sup = sup;
        }
        function LongInt_mul(a, b) {
            var a_lolo = (a.lo & 0xFFFF) * b | 0;
            var a_lohi = (a.lo >>> 16) * b | 0;
            var a_hilo = (a.hi & 0xFFFF) * b | 0;
            var a_hihi = (a.hi >>> 16) * b | 0;
            var sup = a.sup * b | 0;
            a_lohi = a_lohi + (a_lolo >>> 16) | 0;
            a_hilo = a_hilo + (a_lohi >>> 16) | 0;
            a_hihi = a_hihi + (a_hilo >>> 16) | 0;
            sup = sup + (a_hihi >>> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup & 0xFFFF;
        }
        function LongInt_sub(a, b) {
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            a_lolo = a_lolo - b_lolo | 0;
            a_lohi = a_lohi - b_lohi + (a_lolo >> 16) | 0;
            a_hilo = a_hilo - b_hilo + (a_lohi >> 16) | 0;
            a_hihi = a_hihi - b_hihi + (a_hilo >> 16) | 0;
            var sup = a.sup - b.sup + (a_hihi >> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup;
        }
        function LongInt_add(a, b) {
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            a_lolo = a_lolo + b_lolo | 0;
            a_lohi = a_lohi + b_lohi + (a_lolo >> 16) | 0;
            a_hilo = a_hilo + b_hilo + (a_lohi >> 16) | 0;
            a_hihi = a_hihi + b_hihi + (a_hilo >> 16) | 0;
            var sup = a.sup + b.sup + (a_hihi >> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup;
        }
        function LongInt_inc(a) {
            a.lo = a.lo + 1 | 0;
            if (a.lo === 0) {
                a.hi = a.hi + 1 | 0;
                if (a.hi === 0) {
                    a.sup = a.sup + 1 & 0xFFFF;
                }
            }
        }
        function LongInt_dec(a) {
            a.lo = a.lo - 1 | 0;
            if (a.lo ===  -1) {
                a.hi = a.hi - 1 | 0;
                if (a.hi ===  -1) {
                    a.sup = a.sup - 1 & 0xFFFF;
                }
            }
        }
        function LongInt_ucompare(a, b) {
            var r = a.sup - b.sup;
            if (r !== 0) {
                return r;
            }
            r = (a.hi >>> 1) - (b.hi >>> 1);
            if (r !== 0) {
                return r;
            }
            r = (a.hi & 1) - (b.hi & 1);
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        }
        function LongInt_numOfLeadingZeroBits(a) {
            var n = 0;
            var d = 16;
            while (d > 0) {
                if (a >>> d !== 0) {
                    a >>>= d;
                    n = n + d | 0;
                }
                d = d / 2 | 0;
            }
            return 31 - n;
        }
        function LongInt_shl(a, b) {
            if (b === 0) {
                return;
            }
            if (b < 32) {
                a.sup = (a.hi >>> 32 - b | a.sup << b) & 0xFFFF;
                a.hi = a.lo >>> 32 - b | a.hi << b;
                a.lo <<= b;
            } else if (b === 32) {
                a.sup = a.hi & 0xFFFF;
                a.hi = a.lo;
                a.lo = 0;
            } else if (b < 64) {
                a.sup = (a.lo >>> 64 - b | a.hi << b - 32) & 0xFFFF;
                a.hi = a.lo << b;
                a.lo = 0;
            } else if (b === 64) {
                a.sup = a.lo & 0xFFFF;
                a.hi = 0;
                a.lo = 0;
            } else {
                a.sup = a.lo << b - 64 & 0xFFFF;
                a.hi = 0;
                a.lo = 0;
            }
        }
        function LongInt_shr(a, b) {
            if (b === 0) {
                return;
            }
            if (b === 32) {
                a.lo = a.hi;
                a.hi = a.sup;
                a.sup = 0;
            } else if (b < 32) {
                a.lo = a.lo >>> b | a.hi << 32 - b;
                a.hi = a.hi >>> b | a.sup << 32 - b;
                a.sup >>>= b;
            } else if (b === 64) {
                a.lo = a.sup;
                a.hi = 0;
                a.sup = 0;
            } else if (b < 64) {
                a.lo = a.hi >>> b - 32 | a.sup << 64 - b;
                a.hi = a.sup >>> b - 32;
                a.sup = 0;
            } else {
                a.lo = a.sup >>> b - 64;
                a.hi = 0;
                a.sup = 0;
            }
        }
        function LongInt_copy(a) {
            return new LongInt(a.lo, a.hi, a.sup);
        }
        function LongInt_div(a, b) {
            var bits = b.hi !== 0 ? LongInt_numOfLeadingZeroBits(b.hi) : LongInt_numOfLeadingZeroBits(b.lo) + 32;
            var sz = 1 + (bits / 16 | 0);
            var dividentBits = bits % 16;
            LongInt_shl(b, bits);
            LongInt_shl(a, dividentBits);
            var q = new LongInt(0, 0, 0);
            while (sz-- > 0) {
                LongInt_shl(q, 16);
                var digitA = (a.hi >>> 16) + 0x10000 * a.sup;
                var digitB = b.hi >>> 16;
                var digit = digitA / digitB | 0;
                var t = LongInt_copy(b);
                LongInt_mul(t, digit);
                if (LongInt_ucompare(t, a) >= 0) {
                    while (LongInt_ucompare(t, a) > 0) {
                        LongInt_sub(t, b);
                         --digit;
                    }
                } else {
                    while (true) {
                        var nextT = LongInt_copy(t);
                        LongInt_add(nextT, b);
                        if (LongInt_ucompare(nextT, a) > 0) {
                            break;
                        }
                        t = nextT;
                        ++digit;
                    }
                }
                LongInt_sub(a, t);
                q.lo |= digit;
                LongInt_shl(a, 16);
            }
            LongInt_shr(a, bits + 16);
            return q;
        }
    } else {
        Long_eq = function(a, b) {
            return a === b;
        };
        Long_ne = function(a, b) {
            return a !== b;
        };
        Long_gt = function(a, b) {
            return a > b;
        };
        Long_ge = function(a, b) {
            return a >= b;
        };
        Long_lt = function(a, b) {
            return a < b;
        };
        Long_le = function(a, b) {
            return a <= b;
        };
        Long_add = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a + b);
        };
        Long_inc = function(a) {
            return $rt_globals.BigInt.asIntN(64, a + 1);
        };
        Long_dec = function(a) {
            return $rt_globals.BigInt.asIntN(64, a - 1);
        };
        Long_neg = function(a) {
            return $rt_globals.BigInt.asIntN(64,  -a);
        };
        Long_sub = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a - b);
        };
        Long_compare = function(a, b) {
            return a < b ?  -1 : a > b ? 1 : 0;
        };
        Long_ucompare = function(a, b) {
            a = $rt_globals.BigInt.asUintN(64, a);
            b = $rt_globals.BigInt.asUintN(64, b);
            return a < b ?  -1 : a > b ? 1 : 0;
        };
        Long_mul = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a * b);
        };
        Long_div = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a / b);
        };
        Long_udiv = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) / $rt_globals.BigInt.asUintN(64, b));
        };
        Long_rem = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a % b);
        };
        Long_urem = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) % $rt_globals.BigInt.asUintN(64, b));
        };
        Long_and = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a & b);
        };
        Long_or = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a | b);
        };
        Long_xor = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a ^ b);
        };
        Long_shl = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a << $rt_globals.BigInt(b & 63));
        };
        Long_shr = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a >> $rt_globals.BigInt(b & 63));
        };
        Long_shru = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) >> $rt_globals.BigInt(b & 63));
        };
        Long_not = function(a) {
            return $rt_globals.BigInt.asIntN(64, ~a);
        };
    }
    var Long_add = Long_add;

    var Long_sub = Long_sub;

    var Long_mul = Long_mul;

    var Long_div = Long_div;

    var Long_rem = Long_rem;

    var Long_or = Long_or;

    var Long_and = Long_and;

    var Long_xor = Long_xor;

    var Long_shl = Long_shl;

    var Long_shr = Long_shr;

    var Long_shru = Long_shru;

    var Long_compare = Long_compare;

    var Long_eq = Long_eq;

    var Long_ne = Long_ne;

    var Long_lt = Long_lt;

    var Long_le = Long_le;

    var Long_gt = Long_gt;

    var Long_ge = Long_ge;

    var Long_not = Long_not;

    var Long_neg = Long_neg;

    function TeaVMThread(runner) {
        this.status = 3;
        this.stack = [];
        this.suspendCallback = null;
        this.runner = runner;
        this.attribute = null;
        this.completeCallback = null;
    }
    TeaVMThread.prototype.push = function() {
        for (var i = 0;i < arguments.length;++i) {
            this.stack.push(arguments[i]);
        }
        return this;
    };
    TeaVMThread.prototype.s = TeaVMThread.prototype.push;
    TeaVMThread.prototype.pop = function() {
        return this.stack.pop();
    };
    TeaVMThread.prototype.l = TeaVMThread.prototype.pop;
    TeaVMThread.prototype.isResuming = function() {
        return this.status === 2;
    };
    TeaVMThread.prototype.isSuspending = function() {
        return this.status === 1;
    };
    TeaVMThread.prototype.suspend = function(callback) {
        this.suspendCallback = callback;
        this.status = 1;
    };
    TeaVMThread.prototype.start = function(callback) {
        if (this.status !== 3) {
            throw new $rt_globals.Error("Thread already started");
        }
        if ($rt_currentNativeThread !== null) {
            throw new $rt_globals.Error("Another thread is running");
        }
        this.status = 0;
        this.completeCallback = callback ? callback : function(result) {
            if (result instanceof $rt_globals.Error) {
                throw result;
            }
        };
        this.run();
    };
    TeaVMThread.prototype.resume = function() {
        if ($rt_currentNativeThread !== null) {
            throw new $rt_globals.Error("Another thread is running");
        }
        this.status = 2;
        this.run();
    };
    TeaVMThread.prototype.run = function() {
        $rt_currentNativeThread = this;
        var result;
        try {
            result = this.runner();
        } catch (e){
            result = e;
        } finally {
            $rt_currentNativeThread = null;
        }
        if (this.suspendCallback !== null) {
            var self = this;
            var callback = this.suspendCallback;
            this.suspendCallback = null;
            callback(function() {
                self.resume();
            });
        } else if (this.status === 0) {
            this.completeCallback(result);
        }
    };
    function $rt_suspending() {
        var thread = $rt_nativeThread();
        return thread != null && thread.isSuspending();
    }
    function $rt_resuming() {
        var thread = $rt_nativeThread();
        return thread != null && thread.isResuming();
    }
    function $rt_suspend(callback) {
        var nativeThread = $rt_nativeThread();
        if (nativeThread === null) {
            throw new $rt_globals.Error("Suspension point reached from non-threading context (perhaps, from native JS method).");
        }
        return nativeThread.suspend(callback);
    }
    function $rt_startThread(runner, callback) {
        (new TeaVMThread(runner)).start(callback);
    }
    var $rt_currentNativeThread = null;
    function $rt_nativeThread() {
        return $rt_currentNativeThread;
    }
    function $rt_invalidPointer() {
        throw new $rt_globals.Error("Invalid recorded state");
    }
    $rt_exports.main = $rt_mainStarter(t_Client_main);
    $rt_exports.main.javaException = $rt_javaException;
    (function() {
        var c;
        c = otjb_Window.prototype;
        c.removeEventListener = c.$removeEventListener$exported$3;
        c.dispatchEvent = c.$dispatchEvent$exported$4;
        c.get = c.$get$exported$0;
        c.addEventListener = c.$addEventListener$exported$6;
        Object.defineProperty(c, "length", {
            get: c.$getLength$exported$5
        });
        c = otji_JSWrapper$_clinit_$lambda$_29_0.prototype;
        c.accept = c.$accept$exported$0;
        c = otji_JSWrapper$_clinit_$lambda$_29_1.prototype;
        c.accept = c.$accept$exported$0;
        c = otjc_JSArray.prototype;
        c.get = c.$get$exported$0;
        Object.defineProperty(c, "length", {
            get: c.$getLength$exported$1
        });
    })();
}));

//# sourceMappingURL=classes.js.map
export default function callMain(args){
 main(args)
}